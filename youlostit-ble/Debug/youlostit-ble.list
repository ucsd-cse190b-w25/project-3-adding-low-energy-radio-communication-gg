
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000487c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08004a0c  08004a0c  00005a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b64  08004b64  000061bc  2**0
                  CONTENTS
  4 .ARM          00000008  08004b64  08004b64  00005b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b6c  08004b6c  000061bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b6c  08004b6c  00005b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b70  08004b70  00005b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001bc  20000000  08004b74  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  200001bc  08004d30  000061bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  08004d30  000064b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5f7  00000000  00000000  000061ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f42  00000000  00000000  000107e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  00012728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000718  00000000  00000000  000130b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000275dc  00000000  00000000  000137d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b135  00000000  00000000  0003adac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0e25  00000000  00000000  00045ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136d06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e88  00000000  00000000  00136d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b4  00000000  00000000  00139bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001bc 	.word	0x200001bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080049f4 	.word	0x080049f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001c0 	.word	0x200001c0
 80001cc:	080049f4 	.word	0x080049f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ble_init>:
 int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler
 
 /**
  * Initializes the BLE module with appropriate settings
  */
 void ble_init(){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af02      	add	r7, sp, #8
	 //fetching the reset event
	 rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000286:	2006      	movs	r0, #6
 8000288:	f003 fa40 	bl	800370c <malloc>
 800028c:	4603      	mov	r3, r0
 800028e:	461a      	mov	r2, r3
 8000290:	4b70      	ldr	r3, [pc, #448]	@ (8000454 <ble_init+0x1d4>)
 8000292:	601a      	str	r2, [r3, #0]
	 int res;
 
	 while(!dataAvailable);
 8000294:	bf00      	nop
 8000296:	4b70      	ldr	r3, [pc, #448]	@ (8000458 <ble_init+0x1d8>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0fb      	beq.n	8000296 <ble_init+0x16>
	 res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800029e:	4b6d      	ldr	r3, [pc, #436]	@ (8000454 <ble_init+0x1d4>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2106      	movs	r1, #6
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f905 	bl	80004b4 <fetchBleEvent>
 80002aa:	6078      	str	r0, [r7, #4]
 
	 if(res==BLE_OK){
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d111      	bne.n	80002d6 <ble_init+0x56>
	 res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80002b2:	4b68      	ldr	r3, [pc, #416]	@ (8000454 <ble_init+0x1d4>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2206      	movs	r2, #6
 80002b8:	4968      	ldr	r1, [pc, #416]	@ (800045c <ble_init+0x1dc>)
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f984 	bl	80005c8 <checkEventResp>
 80002c0:	6078      	str	r0, [r7, #4]
	 if(res==BLE_OK){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d106      	bne.n	80002d6 <ble_init+0x56>
		stackInitCompleteFlag|=0x01;
 80002c8:	4b65      	ldr	r3, [pc, #404]	@ (8000460 <ble_init+0x1e0>)
 80002ca:	881b      	ldrh	r3, [r3, #0]
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	b29a      	uxth	r2, r3
 80002d2:	4b63      	ldr	r3, [pc, #396]	@ (8000460 <ble_init+0x1e0>)
 80002d4:	801a      	strh	r2, [r3, #0]
	 }
	 }
	 HAL_Delay(10);
 80002d6:	200a      	movs	r0, #10
 80002d8:	f001 fb1a 	bl	8001910 <HAL_Delay>
	 free(rxEvent);
 80002dc:	4b5d      	ldr	r3, [pc, #372]	@ (8000454 <ble_init+0x1d4>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f003 fa1b 	bl	800371c <free>
 
	 //INIT GATT
	 if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80002e6:	2300      	movs	r3, #0
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2307      	movs	r3, #7
 80002ec:	4a5d      	ldr	r2, [pc, #372]	@ (8000464 <ble_init+0x1e4>)
 80002ee:	2104      	movs	r1, #4
 80002f0:	485d      	ldr	r0, [pc, #372]	@ (8000468 <ble_init+0x1e8>)
 80002f2:	f000 fa9f 	bl	8000834 <BLE_command>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d106      	bne.n	800030a <ble_init+0x8a>
		stackInitCompleteFlag|=0x02;
 80002fc:	4b58      	ldr	r3, [pc, #352]	@ (8000460 <ble_init+0x1e0>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	f043 0302 	orr.w	r3, r3, #2
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b56      	ldr	r3, [pc, #344]	@ (8000460 <ble_init+0x1e0>)
 8000308:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 800030a:	4b52      	ldr	r3, [pc, #328]	@ (8000454 <ble_init+0x1d4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4618      	mov	r0, r3
 8000310:	f003 fa04 	bl	800371c <free>
 
	 //INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	 if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000314:	2303      	movs	r3, #3
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2307      	movs	r3, #7
 800031a:	4a54      	ldr	r2, [pc, #336]	@ (800046c <ble_init+0x1ec>)
 800031c:	2107      	movs	r1, #7
 800031e:	4854      	ldr	r0, [pc, #336]	@ (8000470 <ble_init+0x1f0>)
 8000320:	f000 fa88 	bl	8000834 <BLE_command>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d11b      	bne.n	8000362 <ble_init+0xe2>
		stackInitCompleteFlag|=0x04;
 800032a:	4b4d      	ldr	r3, [pc, #308]	@ (8000460 <ble_init+0x1e0>)
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	b29a      	uxth	r2, r3
 8000334:	4b4a      	ldr	r3, [pc, #296]	@ (8000460 <ble_init+0x1e0>)
 8000336:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000338:	4b46      	ldr	r3, [pc, #280]	@ (8000454 <ble_init+0x1d4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3307      	adds	r3, #7
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b29a      	uxth	r2, r3
 8000342:	4b4c      	ldr	r3, [pc, #304]	@ (8000474 <ble_init+0x1f4>)
 8000344:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000346:	4b43      	ldr	r3, [pc, #268]	@ (8000454 <ble_init+0x1d4>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3309      	adds	r3, #9
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	b29a      	uxth	r2, r3
 8000350:	4b49      	ldr	r3, [pc, #292]	@ (8000478 <ble_init+0x1f8>)
 8000352:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000354:	4b3f      	ldr	r3, [pc, #252]	@ (8000454 <ble_init+0x1d4>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	330b      	adds	r3, #11
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	b29a      	uxth	r2, r3
 800035e:	4b47      	ldr	r3, [pc, #284]	@ (800047c <ble_init+0x1fc>)
 8000360:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000362:	4b3c      	ldr	r3, [pc, #240]	@ (8000454 <ble_init+0x1d4>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f003 f9d8 	bl	800371c <free>
 
	 //SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	 updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 800036c:	4b44      	ldr	r3, [pc, #272]	@ (8000480 <ble_init+0x200>)
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	2307      	movs	r3, #7
 8000372:	2200      	movs	r2, #0
 8000374:	4940      	ldr	r1, [pc, #256]	@ (8000478 <ble_init+0x1f8>)
 8000376:	483f      	ldr	r0, [pc, #252]	@ (8000474 <ble_init+0x1f4>)
 8000378:	f000 fb22 	bl	80009c0 <updateCharValue>
	 stackInitCompleteFlag|=0x08;
 800037c:	4b38      	ldr	r3, [pc, #224]	@ (8000460 <ble_init+0x1e0>)
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	f043 0308 	orr.w	r3, r3, #8
 8000384:	b29a      	uxth	r2, r3
 8000386:	4b36      	ldr	r3, [pc, #216]	@ (8000460 <ble_init+0x1e0>)
 8000388:	801a      	strh	r2, [r3, #0]
	 free(rxEvent);
 800038a:	4b32      	ldr	r3, [pc, #200]	@ (8000454 <ble_init+0x1d4>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f003 f9c4 	bl	800371c <free>
 
	 //INIT AUTH
	 if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000394:	2300      	movs	r3, #0
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	2307      	movs	r3, #7
 800039a:	4a3a      	ldr	r2, [pc, #232]	@ (8000484 <ble_init+0x204>)
 800039c:	2110      	movs	r1, #16
 800039e:	483a      	ldr	r0, [pc, #232]	@ (8000488 <ble_init+0x208>)
 80003a0:	f000 fa48 	bl	8000834 <BLE_command>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d106      	bne.n	80003b8 <ble_init+0x138>
		stackInitCompleteFlag|=0x10;
 80003aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000460 <ble_init+0x1e0>)
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	f043 0310 	orr.w	r3, r3, #16
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000460 <ble_init+0x1e0>)
 80003b6:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003b8:	4b26      	ldr	r3, [pc, #152]	@ (8000454 <ble_init+0x1d4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f003 f9ad 	bl	800371c <free>
 
	 //SET_TX_LEVEL
	 if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80003c2:	2300      	movs	r3, #0
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	2307      	movs	r3, #7
 80003c8:	4a30      	ldr	r2, [pc, #192]	@ (800048c <ble_init+0x20c>)
 80003ca:	2106      	movs	r1, #6
 80003cc:	4830      	ldr	r0, [pc, #192]	@ (8000490 <ble_init+0x210>)
 80003ce:	f000 fa31 	bl	8000834 <BLE_command>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d106      	bne.n	80003e6 <ble_init+0x166>
		stackInitCompleteFlag|=0x20;
 80003d8:	4b21      	ldr	r3, [pc, #132]	@ (8000460 <ble_init+0x1e0>)
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	f043 0320 	orr.w	r3, r3, #32
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000460 <ble_init+0x1e0>)
 80003e4:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000454 <ble_init+0x1d4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f003 f996 	bl	800371c <free>
 
	 //SET SCAN RESPONSE DATA
	 if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80003f0:	2300      	movs	r3, #0
 80003f2:	9300      	str	r3, [sp, #0]
 80003f4:	2307      	movs	r3, #7
 80003f6:	4a27      	ldr	r2, [pc, #156]	@ (8000494 <ble_init+0x214>)
 80003f8:	2124      	movs	r1, #36	@ 0x24
 80003fa:	4827      	ldr	r0, [pc, #156]	@ (8000498 <ble_init+0x218>)
 80003fc:	f000 fa1a 	bl	8000834 <BLE_command>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d106      	bne.n	8000414 <ble_init+0x194>
		stackInitCompleteFlag|=0x40;
 8000406:	4b16      	ldr	r3, [pc, #88]	@ (8000460 <ble_init+0x1e0>)
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800040e:	b29a      	uxth	r2, r3
 8000410:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <ble_init+0x1e0>)
 8000412:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000414:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <ble_init+0x1d4>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f003 f97f 	bl	800371c <free>
 
	 //This will start the advertisment,
	 setConnectable();
 800041e:	f000 f989 	bl	8000734 <setConnectable>
 
	 //add the nordic UART service
	 addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000422:	2207      	movs	r2, #7
 8000424:	491d      	ldr	r1, [pc, #116]	@ (800049c <ble_init+0x21c>)
 8000426:	481e      	ldr	r0, [pc, #120]	@ (80004a0 <ble_init+0x220>)
 8000428:	f000 fa50 	bl	80008cc <addService>
 
	 //add the nordic UART charachteristics
	 addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 800042c:	2310      	movs	r3, #16
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2314      	movs	r3, #20
 8000432:	4a1a      	ldr	r2, [pc, #104]	@ (800049c <ble_init+0x21c>)
 8000434:	491b      	ldr	r1, [pc, #108]	@ (80004a4 <ble_init+0x224>)
 8000436:	481c      	ldr	r0, [pc, #112]	@ (80004a8 <ble_init+0x228>)
 8000438:	f000 fa80 	bl	800093c <addCharacteristic>
	 addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 800043c:	2304      	movs	r3, #4
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	2314      	movs	r3, #20
 8000442:	4a16      	ldr	r2, [pc, #88]	@ (800049c <ble_init+0x21c>)
 8000444:	4919      	ldr	r1, [pc, #100]	@ (80004ac <ble_init+0x22c>)
 8000446:	481a      	ldr	r0, [pc, #104]	@ (80004b0 <ble_init+0x230>)
 8000448:	f000 fa78 	bl	800093c <addCharacteristic>
 
	 if(stackInitCompleteFlag==255){
	   //turn on led blue if everything was fine
	 //  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	 }
	 return;
 800044c:	bf00      	nop
 }
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	200002f0 	.word	0x200002f0
 8000458:	200002f8 	.word	0x200002f8
 800045c:	20000000 	.word	0x20000000
 8000460:	200002ee 	.word	0x200002ee
 8000464:	2000000c 	.word	0x2000000c
 8000468:	20000008 	.word	0x20000008
 800046c:	2000001c 	.word	0x2000001c
 8000470:	20000014 	.word	0x20000014
 8000474:	200001d8 	.word	0x200001d8
 8000478:	200001dc 	.word	0x200001dc
 800047c:	200001e0 	.word	0x200001e0
 8000480:	20000118 	.word	0x20000118
 8000484:	20000034 	.word	0x20000034
 8000488:	20000024 	.word	0x20000024
 800048c:	20000044 	.word	0x20000044
 8000490:	2000003c 	.word	0x2000003c
 8000494:	20000070 	.word	0x20000070
 8000498:	2000004c 	.word	0x2000004c
 800049c:	200002e4 	.word	0x200002e4
 80004a0:	20000120 	.word	0x20000120
 80004a4:	200002ec 	.word	0x200002ec
 80004a8:	20000140 	.word	0x20000140
 80004ac:	200002e8 	.word	0x200002e8
 80004b0:	20000130 	.word	0x20000130

080004b4 <fetchBleEvent>:
	  if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	  }
	  free(rxEvent);
 }
 
 int fetchBleEvent(uint8_t *container, int size){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08c      	sub	sp, #48	@ 0x30
 80004b8:	af02      	add	r7, sp, #8
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]
 
   uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80004be:	4a3d      	ldr	r2, [pc, #244]	@ (80005b4 <fetchBleEvent+0x100>)
 80004c0:	f107 0318 	add.w	r3, r7, #24
 80004c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004c8:	6018      	str	r0, [r3, #0]
 80004ca:	3304      	adds	r3, #4
 80004cc:	7019      	strb	r1, [r3, #0]
   uint8_t slave_header[5];
 
   //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
   if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80004ce:	2140      	movs	r1, #64	@ 0x40
 80004d0:	4839      	ldr	r0, [pc, #228]	@ (80005b8 <fetchBleEvent+0x104>)
 80004d2:	f001 fcfd 	bl	8001ed0 <HAL_GPIO_ReadPin>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d065      	beq.n	80005a8 <fetchBleEvent+0xf4>
 
   HAL_Delay(5);
 80004dc:	2005      	movs	r0, #5
 80004de:	f001 fa17 	bl	8001910 <HAL_Delay>
   //PIN_CS of SPI2 LOW
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004e8:	4834      	ldr	r0, [pc, #208]	@ (80005bc <fetchBleEvent+0x108>)
 80004ea:	f001 fd09 	bl	8001f00 <HAL_GPIO_WritePin>
 
   //SPI2 in this case, it could change according to the board
   //we send a byte containing a request of reading followed by 4 dummy bytes
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80004ee:	f107 0210 	add.w	r2, r7, #16
 80004f2:	f107 0118 	add.w	r1, r7, #24
 80004f6:	2301      	movs	r3, #1
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2305      	movs	r3, #5
 80004fc:	4830      	ldr	r0, [pc, #192]	@ (80005c0 <fetchBleEvent+0x10c>)
 80004fe:	f002 fd7f 	bl	8003000 <HAL_SPI_TransmitReceive>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000508:	482c      	ldr	r0, [pc, #176]	@ (80005bc <fetchBleEvent+0x108>)
 800050a:	f001 fcf9 	bl	8001f00 <HAL_GPIO_WritePin>
   HAL_Delay(1);
 800050e:	2001      	movs	r0, #1
 8000510:	f001 f9fe 	bl	8001910 <HAL_Delay>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800051a:	4828      	ldr	r0, [pc, #160]	@ (80005bc <fetchBleEvent+0x108>)
 800051c:	f001 fcf0 	bl	8001f00 <HAL_GPIO_WritePin>
 
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000520:	f107 0210 	add.w	r2, r7, #16
 8000524:	f107 0118 	add.w	r1, r7, #24
 8000528:	2301      	movs	r3, #1
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2305      	movs	r3, #5
 800052e:	4824      	ldr	r0, [pc, #144]	@ (80005c0 <fetchBleEvent+0x10c>)
 8000530:	f002 fd66 	bl	8003000 <HAL_SPI_TransmitReceive>
 
   //let's get the size of data available
   int dataSize;
   dataSize=(slave_header[3]|slave_header[4]<<8);
 8000534:	7cfb      	ldrb	r3, [r7, #19]
 8000536:	461a      	mov	r2, r3
 8000538:	7d3b      	ldrb	r3, [r7, #20]
 800053a:	021b      	lsls	r3, r3, #8
 800053c:	4313      	orrs	r3, r2
 800053e:	627b      	str	r3, [r7, #36]	@ 0x24
   int i;
   char dummy=0xff;
 8000540:	23ff      	movs	r3, #255	@ 0xff
 8000542:	73fb      	strb	r3, [r7, #15]
 
   if(dataSize>size){
 8000544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	429a      	cmp	r2, r3
 800054a:	dd01      	ble.n	8000550 <fetchBleEvent+0x9c>
	   dataSize=size;
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	627b      	str	r3, [r7, #36]	@ 0x24
   }
 
   if(dataSize>0){
 8000550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000552:	2b00      	cmp	r3, #0
 8000554:	dd1f      	ble.n	8000596 <fetchBleEvent+0xe2>
		 //let's fill the get the bytes availables and insert them into the container variable
		   for(i=0;i<dataSize;i++){
 8000556:	2300      	movs	r3, #0
 8000558:	623b      	str	r3, [r7, #32]
 800055a:	e00d      	b.n	8000578 <fetchBleEvent+0xc4>
		   HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 800055c:	6a3b      	ldr	r3, [r7, #32]
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	441a      	add	r2, r3
 8000562:	f107 010f 	add.w	r1, r7, #15
 8000566:	2301      	movs	r3, #1
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2301      	movs	r3, #1
 800056c:	4814      	ldr	r0, [pc, #80]	@ (80005c0 <fetchBleEvent+0x10c>)
 800056e:	f002 fd47 	bl	8003000 <HAL_SPI_TransmitReceive>
		   for(i=0;i<dataSize;i++){
 8000572:	6a3b      	ldr	r3, [r7, #32]
 8000574:	3301      	adds	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
 8000578:	6a3a      	ldr	r2, [r7, #32]
 800057a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800057c:	429a      	cmp	r2, r3
 800057e:	dbed      	blt.n	800055c <fetchBleEvent+0xa8>
 
		   }
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000586:	480d      	ldr	r0, [pc, #52]	@ (80005bc <fetchBleEvent+0x108>)
 8000588:	f001 fcba 	bl	8001f00 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
		 return -1;
	   }
 
   //let's stop the SPI2
   dataAvailable=0;
 800058c:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <fetchBleEvent+0x110>)
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
   return BLE_OK;
 8000592:	2300      	movs	r3, #0
 8000594:	e00a      	b.n	80005ac <fetchBleEvent+0xf8>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000596:	2201      	movs	r2, #1
 8000598:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800059c:	4807      	ldr	r0, [pc, #28]	@ (80005bc <fetchBleEvent+0x108>)
 800059e:	f001 fcaf 	bl	8001f00 <HAL_GPIO_WritePin>
		 return -1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	e001      	b.n	80005ac <fetchBleEvent+0xf8>
   }else{
   return -2;
 80005a8:	f06f 0301 	mvn.w	r3, #1
   }
 }
 80005ac:	4618      	mov	r0, r3
 80005ae:	3728      	adds	r7, #40	@ 0x28
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	08004a0c 	.word	0x08004a0c
 80005b8:	48001000 	.word	0x48001000
 80005bc:	48000c00 	.word	0x48000c00
 80005c0:	200002fc 	.word	0x200002fc
 80005c4:	200002f8 	.word	0x200002f8

080005c8 <checkEventResp>:
 
 
 int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80005c8:	b480      	push	{r7}
 80005ca:	b087      	sub	sp, #28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
	 int j=0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
 
	 for(j=0;j<size;j++){
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	e00f      	b.n	80005fe <checkEventResp+0x36>
 
		 if(event[j]!=reference[j]){
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	781a      	ldrb	r2, [r3, #0]
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	68b9      	ldr	r1, [r7, #8]
 80005ea:	440b      	add	r3, r1
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d002      	beq.n	80005f8 <checkEventResp+0x30>
			 return -1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	e007      	b.n	8000608 <checkEventResp+0x40>
	 for(j=0;j<size;j++){
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	3301      	adds	r3, #1
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	697a      	ldr	r2, [r7, #20]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	429a      	cmp	r2, r3
 8000604:	dbeb      	blt.n	80005de <checkEventResp+0x16>
		 }
	 }
 
 return BLE_OK;
 8000606:	2300      	movs	r3, #0
 }
 8000608:	4618      	mov	r0, r3
 800060a:	371c      	adds	r7, #28
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <sendCommand>:
 
 void sendCommand(uint8_t *command,int size){
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af02      	add	r7, sp, #8
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
 
	   uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 800061e:	4a1f      	ldr	r2, [pc, #124]	@ (800069c <sendCommand+0x88>)
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000628:	6018      	str	r0, [r3, #0]
 800062a:	3304      	adds	r3, #4
 800062c:	7019      	strb	r1, [r3, #0]
	   uint8_t slave_header[5];
 
	   int result;
 
	 do{
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000634:	481a      	ldr	r0, [pc, #104]	@ (80006a0 <sendCommand+0x8c>)
 8000636:	f001 fc63 	bl	8001f00 <HAL_GPIO_WritePin>
 
	   //wait until it is possible to write
	   //while(!dataAvailable);
	   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800063a:	f107 0208 	add.w	r2, r7, #8
 800063e:	f107 0110 	add.w	r1, r7, #16
 8000642:	2301      	movs	r3, #1
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2305      	movs	r3, #5
 8000648:	4816      	ldr	r0, [pc, #88]	@ (80006a4 <sendCommand+0x90>)
 800064a:	f002 fcd9 	bl	8003000 <HAL_SPI_TransmitReceive>
	   int bufferSize=(slave_header[2]<<8|slave_header[1]);
 800064e:	7abb      	ldrb	r3, [r7, #10]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	7a7a      	ldrb	r2, [r7, #9]
 8000654:	4313      	orrs	r3, r2
 8000656:	61bb      	str	r3, [r7, #24]
	   if(bufferSize>=size){
 8000658:	69ba      	ldr	r2, [r7, #24]
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	429a      	cmp	r2, r3
 800065e:	db09      	blt.n	8000674 <sendCommand+0x60>
		 HAL_SPI_Transmit(&hspi3,command,size,1);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b29a      	uxth	r2, r3
 8000664:	2301      	movs	r3, #1
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	480e      	ldr	r0, [pc, #56]	@ (80006a4 <sendCommand+0x90>)
 800066a:	f002 fb54 	bl	8002d16 <HAL_SPI_Transmit>
		 result=0;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
 8000672:	e002      	b.n	800067a <sendCommand+0x66>
	   }else{
		 result=-1;
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	61fb      	str	r3, [r7, #28]
	   }
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800067a:	2201      	movs	r2, #1
 800067c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000680:	4807      	ldr	r0, [pc, #28]	@ (80006a0 <sendCommand+0x8c>)
 8000682:	f001 fc3d 	bl	8001f00 <HAL_GPIO_WritePin>
	   dataAvailable=0;
 8000686:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <sendCommand+0x94>)
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
	 }while(result!=0);
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1cd      	bne.n	800062e <sendCommand+0x1a>
 
 }
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	3720      	adds	r7, #32
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	08004a14 	.word	0x08004a14
 80006a0:	48000c00 	.word	0x48000c00
 80006a4:	200002fc 	.word	0x200002fc
 80006a8:	200002f8 	.word	0x200002f8

080006ac <catchBLE>:
 
 void catchBLE(uint8_t * byte1, uint8_t * byte2){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	 int result=fetchBleEvent(buffer,127);
 80006b6:	217f      	movs	r1, #127	@ 0x7f
 80006b8:	4819      	ldr	r0, [pc, #100]	@ (8000720 <catchBLE+0x74>)
 80006ba:	f7ff fefb 	bl	80004b4 <fetchBleEvent>
 80006be:	60f8      	str	r0, [r7, #12]
	 if(result==BLE_OK){
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d128      	bne.n	8000718 <catchBLE+0x6c>
		 if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 80006c6:	2203      	movs	r2, #3
 80006c8:	4916      	ldr	r1, [pc, #88]	@ (8000724 <catchBLE+0x78>)
 80006ca:	4815      	ldr	r0, [pc, #84]	@ (8000720 <catchBLE+0x74>)
 80006cc:	f7ff ff7c 	bl	80005c8 <checkEventResp>
			 //setConnectable();
		 }
		 if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 80006d0:	2205      	movs	r2, #5
 80006d2:	4915      	ldr	r1, [pc, #84]	@ (8000728 <catchBLE+0x7c>)
 80006d4:	4812      	ldr	r0, [pc, #72]	@ (8000720 <catchBLE+0x74>)
 80006d6:	f7ff ff77 	bl	80005c8 <checkEventResp>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d109      	bne.n	80006f4 <catchBLE+0x48>
			 // Little Endian Format
			 *(connectionHandler) = buffer[5];
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <catchBLE+0x74>)
 80006e2:	795b      	ldrb	r3, [r3, #5]
 80006e4:	b21a      	sxth	r2, r3
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <catchBLE+0x80>)
 80006e8:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <catchBLE+0x74>)
 80006ec:	799b      	ldrb	r3, [r3, #6]
 80006ee:	b21a      	sxth	r2, r3
 80006f0:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <catchBLE+0x80>)
 80006f2:	805a      	strh	r2, [r3, #2]
		 }
		 if (checkEventResp(buffer, EVENT_GATT_CHANGED, 5) == BLE_OK){
 80006f4:	2205      	movs	r2, #5
 80006f6:	490e      	ldr	r1, [pc, #56]	@ (8000730 <catchBLE+0x84>)
 80006f8:	4809      	ldr	r0, [pc, #36]	@ (8000720 <catchBLE+0x74>)
 80006fa:	f7ff ff65 	bl	80005c8 <checkEventResp>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d109      	bne.n	8000718 <catchBLE+0x6c>
			 *(connectionHandler) = buffer[5];
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <catchBLE+0x74>)
 8000706:	795b      	ldrb	r3, [r3, #5]
 8000708:	b21a      	sxth	r2, r3
 800070a:	4b08      	ldr	r3, [pc, #32]	@ (800072c <catchBLE+0x80>)
 800070c:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 800070e:	4b04      	ldr	r3, [pc, #16]	@ (8000720 <catchBLE+0x74>)
 8000710:	799b      	ldrb	r3, [r3, #6]
 8000712:	b21a      	sxth	r2, r3
 8000714:	4b05      	ldr	r3, [pc, #20]	@ (800072c <catchBLE+0x80>)
 8000716:	805a      	strh	r2, [r3, #2]
		 }
	 }else{
		 //something bad is happening if I am here
	 }
 }
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200001e4 	.word	0x200001e4
 8000724:	200000f0 	.word	0x200000f0
 8000728:	200000fc 	.word	0x200000fc
 800072c:	20000150 	.word	0x20000150
 8000730:	20000104 	.word	0x20000104

08000734 <setConnectable>:
 
 void setConnectable(){
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
	uint8_t* rxEvent;
	//Start advertising
	uint8_t *localname;
	int res;
	localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 800073a:	200c      	movs	r0, #12
 800073c:	f002 ffe6 	bl	800370c <malloc>
 8000740:	4603      	mov	r3, r0
 8000742:	60fb      	str	r3, [r7, #12]
	memcpy(localname,deviceName,sizeof(deviceName));
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4a37      	ldr	r2, [pc, #220]	@ (8000824 <setConnectable+0xf0>)
 8000748:	6810      	ldr	r0, [r2, #0]
 800074a:	6018      	str	r0, [r3, #0]
 800074c:	8891      	ldrh	r1, [r2, #4]
 800074e:	7992      	ldrb	r2, [r2, #6]
 8000750:	8099      	strh	r1, [r3, #4]
 8000752:	719a      	strb	r2, [r3, #6]
	localname[sizeof(deviceName)+1]=0x00;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	3308      	adds	r3, #8
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
	localname[sizeof(deviceName)+2]=0x00;
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	3309      	adds	r3, #9
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
	localname[sizeof(deviceName)+3]=0x00;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	330a      	adds	r3, #10
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
	localname[sizeof(deviceName)+4]=0x00;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	330b      	adds	r3, #11
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
	localname[sizeof(deviceName)]=0x00;
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	3307      	adds	r3, #7
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]


	ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 800077c:	4b2a      	ldr	r3, [pc, #168]	@ (8000828 <setConnectable+0xf4>)
 800077e:	2208      	movs	r2, #8
 8000780:	72da      	strb	r2, [r3, #11]
	ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 8000782:	4b29      	ldr	r3, [pc, #164]	@ (8000828 <setConnectable+0xf4>)
 8000784:	2215      	movs	r2, #21
 8000786:	70da      	strb	r2, [r3, #3]

	uint8_t *discoverableCommand;
	discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000788:	2019      	movs	r0, #25
 800078a:	f002 ffbf 	bl	800370c <malloc>
 800078e:	4603      	mov	r3, r0
 8000790:	60bb      	str	r3, [r7, #8]
	memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	4a24      	ldr	r2, [pc, #144]	@ (8000828 <setConnectable+0xf4>)
 8000796:	461c      	mov	r4, r3
 8000798:	4613      	mov	r3, r2
 800079a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800079c:	6020      	str	r0, [r4, #0]
 800079e:	6061      	str	r1, [r4, #4]
 80007a0:	60a2      	str	r2, [r4, #8]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	7323      	strb	r3, [r4, #12]
	memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	330d      	adds	r3, #13
 80007aa:	220c      	movs	r2, #12
 80007ac:	68f9      	ldr	r1, [r7, #12]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 fb1f 	bl	8003df2 <memcpy>

	// remove existing buffer content
	rxEvent=(uint8_t*)malloc(7);
 80007b4:	2007      	movs	r0, #7
 80007b6:	f002 ffa9 	bl	800370c <malloc>
 80007ba:	4603      	mov	r3, r0
 80007bc:	607b      	str	r3, [r7, #4]
	res=fetchBleEvent(rxEvent,7);
 80007be:	2107      	movs	r1, #7
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff fe77 	bl	80004b4 <fetchBleEvent>
 80007c6:	6038      	str	r0, [r7, #0]

	// send the command to make the peripheral discoverable
	sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 80007c8:	2119      	movs	r1, #25
 80007ca:	68b8      	ldr	r0, [r7, #8]
 80007cc:	f7ff ff22 	bl	8000614 <sendCommand>
	HAL_Delay(100);
 80007d0:	2064      	movs	r0, #100	@ 0x64
 80007d2:	f001 f89d 	bl	8001910 <HAL_Delay>
	res=fetchBleEvent(rxEvent,7);
 80007d6:	2107      	movs	r1, #7
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff fe6b 	bl	80004b4 <fetchBleEvent>
 80007de:	6038      	str	r0, [r7, #0]
	if(res==BLE_OK){
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d10e      	bne.n	8000804 <setConnectable+0xd0>
	   if(checkEventResp(rxEvent, ACI_GAP_SET_DISCOVERABLE_COMPLETE, 7)==BLE_OK){
 80007e6:	2207      	movs	r2, #7
 80007e8:	4910      	ldr	r1, [pc, #64]	@ (800082c <setConnectable+0xf8>)
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f7ff feec 	bl	80005c8 <checkEventResp>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d106      	bne.n	8000804 <setConnectable+0xd0>
		  stackInitCompleteFlag|=0x80;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <setConnectable+0xfc>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fe:	b29a      	uxth	r2, r3
 8000800:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <setConnectable+0xfc>)
 8000802:	801a      	strh	r2, [r3, #0]
	   }
	}
	free(rxEvent);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f002 ff89 	bl	800371c <free>
	free(discoverableCommand);
 800080a:	68b8      	ldr	r0, [r7, #8]
 800080c:	f002 ff86 	bl	800371c <free>
	free(localname);
 8000810:	68f8      	ldr	r0, [r7, #12]
 8000812:	f002 ff83 	bl	800371c <free>
	HAL_Delay(10);
 8000816:	200a      	movs	r0, #10
 8000818:	f001 f87a 	bl	8001910 <HAL_Delay>
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	bd90      	pop	{r4, r7, pc}
 8000824:	20000118 	.word	0x20000118
 8000828:	20000078 	.word	0x20000078
 800082c:	20000088 	.word	0x20000088
 8000830:	200002ee 	.word	0x200002ee

08000834 <BLE_command>:
  * @param sizeRes Expected size of the response result.
  * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
  * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
  *             or an error code if something went wrong.
  */
 int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
 8000840:	603b      	str	r3, [r7, #0]
		int response;
 
		sendCommand(command,size);
 8000842:	68b9      	ldr	r1, [r7, #8]
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	f7ff fee5 	bl	8000614 <sendCommand>
		rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 800084a:	6a3b      	ldr	r3, [r7, #32]
 800084c:	005a      	lsls	r2, r3, #1
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	4413      	add	r3, r2
 8000852:	4618      	mov	r0, r3
 8000854:	f002 ff5a 	bl	800370c <malloc>
 8000858:	4603      	mov	r3, r0
 800085a:	461a      	mov	r2, r3
 800085c:	4b19      	ldr	r3, [pc, #100]	@ (80008c4 <BLE_command+0x90>)
 800085e:	601a      	str	r2, [r3, #0]
 
		long contatore=0;
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000864:	e007      	b.n	8000876 <BLE_command+0x42>
			contatore++;
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	3301      	adds	r3, #1
 800086a:	613b      	str	r3, [r7, #16]
			if(contatore>30000){
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000872:	4293      	cmp	r3, r2
 8000874:	dc07      	bgt.n	8000886 <BLE_command+0x52>
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000876:	2140      	movs	r1, #64	@ 0x40
 8000878:	4813      	ldr	r0, [pc, #76]	@ (80008c8 <BLE_command+0x94>)
 800087a:	f001 fb29 	bl	8001ed0 <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d0f0      	beq.n	8000866 <BLE_command+0x32>
 8000884:	e000      	b.n	8000888 <BLE_command+0x54>
				break;
 8000886:	bf00      	nop
			}
		}
 
 
		response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000888:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <BLE_command+0x90>)
 800088a:	6818      	ldr	r0, [r3, #0]
 800088c:	6a3b      	ldr	r3, [r7, #32]
 800088e:	005a      	lsls	r2, r3, #1
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	4413      	add	r3, r2
 8000894:	4619      	mov	r1, r3
 8000896:	f7ff fe0d 	bl	80004b4 <fetchBleEvent>
 800089a:	6178      	str	r0, [r7, #20]
		if(response==BLE_OK){
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d107      	bne.n	80008b2 <BLE_command+0x7e>
			response=checkEventResp(rxEvent,result,sizeRes);
 80008a2:	4b08      	ldr	r3, [pc, #32]	@ (80008c4 <BLE_command+0x90>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	683a      	ldr	r2, [r7, #0]
 80008a8:	6879      	ldr	r1, [r7, #4]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fe8c 	bl	80005c8 <checkEventResp>
 80008b0:	6178      	str	r0, [r7, #20]
		}
		HAL_Delay(10);
 80008b2:	200a      	movs	r0, #10
 80008b4:	f001 f82c 	bl	8001910 <HAL_Delay>
 
 
	 return response;
 80008b8:	697b      	ldr	r3, [r7, #20]
 }
 80008ba:	4618      	mov	r0, r3
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200002f0 	.word	0x200002f0
 80008c8:	48001000 	.word	0x48001000

080008cc <addService>:
 
 void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af02      	add	r7, sp, #8
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
 
 
	 //memcpy
	 memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 80008d8:	4b14      	ldr	r3, [pc, #80]	@ (800092c <addService+0x60>)
 80008da:	2210      	movs	r2, #16
 80008dc:	68f9      	ldr	r1, [r7, #12]
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 fa87 	bl	8003df2 <memcpy>
	 ADD_PRIMARY_SERVICE[22]=attributes;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <addService+0x64>)
 80008ea:	759a      	strb	r2, [r3, #22]
		if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 80008ec:	2301      	movs	r3, #1
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	2307      	movs	r3, #7
 80008f2:	4a10      	ldr	r2, [pc, #64]	@ (8000934 <addService+0x68>)
 80008f4:	2117      	movs	r1, #23
 80008f6:	480e      	ldr	r0, [pc, #56]	@ (8000930 <addService+0x64>)
 80008f8:	f7ff ff9c 	bl	8000834 <BLE_command>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d10a      	bne.n	8000918 <addService+0x4c>
			handle[0]=rxEvent[7];
 8000902:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <addService+0x6c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	79da      	ldrb	r2, [r3, #7]
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	701a      	strb	r2, [r3, #0]
			handle[1]=rxEvent[8];
 800090c:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <addService+0x6c>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	3301      	adds	r3, #1
 8000914:	7a12      	ldrb	r2, [r2, #8]
 8000916:	701a      	strb	r2, [r3, #0]
		 }
		free(rxEvent);
 8000918:	4b07      	ldr	r3, [pc, #28]	@ (8000938 <addService+0x6c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	f002 fefd 	bl	800371c <free>
 }
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000095 	.word	0x20000095
 8000930:	20000090 	.word	0x20000090
 8000934:	200000a8 	.word	0x200000a8
 8000938:	200002f0 	.word	0x200002f0

0800093c <addCharacteristic>:
 
 void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af02      	add	r7, sp, #8
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
 8000948:	70fb      	strb	r3, [r7, #3]
	 memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 800094a:	4b19      	ldr	r3, [pc, #100]	@ (80009b0 <addCharacteristic+0x74>)
 800094c:	2210      	movs	r2, #16
 800094e:	68f9      	ldr	r1, [r7, #12]
 8000950:	4618      	mov	r0, r3
 8000952:	f003 fa4e 	bl	8003df2 <memcpy>
 
	 ADD_CUSTOM_CHAR[4]= handleService[0];
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	781a      	ldrb	r2, [r3, #0]
 800095a:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <addCharacteristic+0x78>)
 800095c:	711a      	strb	r2, [r3, #4]
	 ADD_CUSTOM_CHAR[5]= handleService[1];
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	785a      	ldrb	r2, [r3, #1]
 8000962:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <addCharacteristic+0x78>)
 8000964:	715a      	strb	r2, [r3, #5]
	 ADD_CUSTOM_CHAR[23]= maxsize;
 8000966:	4a13      	ldr	r2, [pc, #76]	@ (80009b4 <addCharacteristic+0x78>)
 8000968:	78fb      	ldrb	r3, [r7, #3]
 800096a:	75d3      	strb	r3, [r2, #23]
	 ADD_CUSTOM_CHAR[25]= proprieties;
 800096c:	4a11      	ldr	r2, [pc, #68]	@ (80009b4 <addCharacteristic+0x78>)
 800096e:	7e3b      	ldrb	r3, [r7, #24]
 8000970:	7653      	strb	r3, [r2, #25]
	 if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 8000972:	2301      	movs	r3, #1
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	2307      	movs	r3, #7
 8000978:	4a0f      	ldr	r2, [pc, #60]	@ (80009b8 <addCharacteristic+0x7c>)
 800097a:	211e      	movs	r1, #30
 800097c:	480d      	ldr	r0, [pc, #52]	@ (80009b4 <addCharacteristic+0x78>)
 800097e:	f7ff ff59 	bl	8000834 <BLE_command>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d10a      	bne.n	800099e <addCharacteristic+0x62>
		 handleChar[0]=rxEvent[7];
 8000988:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <addCharacteristic+0x80>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	79da      	ldrb	r2, [r3, #7]
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	701a      	strb	r2, [r3, #0]
		 handleChar[1]=rxEvent[8];
 8000992:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <addCharacteristic+0x80>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	3301      	adds	r3, #1
 800099a:	7a12      	ldrb	r2, [r2, #8]
 800099c:	701a      	strb	r2, [r3, #0]
	 }
	 free(rxEvent);
 800099e:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <addCharacteristic+0x80>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f002 feba 	bl	800371c <free>
 }
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200000b7 	.word	0x200000b7
 80009b4:	200000b0 	.word	0x200000b0
 80009b8:	200000d0 	.word	0x200000d0
 80009bc:	200002f0 	.word	0x200002f0

080009c0 <updateCharValue>:
 
 void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af02      	add	r7, sp, #8
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
	 UPDATE_CHAR[3]=size+6;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	3306      	adds	r3, #6
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b21      	ldr	r3, [pc, #132]	@ (8000a5c <updateCharValue+0x9c>)
 80009d8:	70da      	strb	r2, [r3, #3]
	 UPDATE_CHAR[4]=handleService[0];
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	781a      	ldrb	r2, [r3, #0]
 80009de:	4b1f      	ldr	r3, [pc, #124]	@ (8000a5c <updateCharValue+0x9c>)
 80009e0:	711a      	strb	r2, [r3, #4]
	 UPDATE_CHAR[5]=handleService[1];
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	785a      	ldrb	r2, [r3, #1]
 80009e6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a5c <updateCharValue+0x9c>)
 80009e8:	715a      	strb	r2, [r3, #5]
	 UPDATE_CHAR[6]=handleChar[0];
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	781a      	ldrb	r2, [r3, #0]
 80009ee:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <updateCharValue+0x9c>)
 80009f0:	719a      	strb	r2, [r3, #6]
	 UPDATE_CHAR[7]=handleChar[1];
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	785a      	ldrb	r2, [r3, #1]
 80009f6:	4b19      	ldr	r3, [pc, #100]	@ (8000a5c <updateCharValue+0x9c>)
 80009f8:	71da      	strb	r2, [r3, #7]
	 UPDATE_CHAR[8]=offset;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	4b17      	ldr	r3, [pc, #92]	@ (8000a5c <updateCharValue+0x9c>)
 8000a00:	721a      	strb	r2, [r3, #8]
	 UPDATE_CHAR[9]=size;
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <updateCharValue+0x9c>)
 8000a08:	725a      	strb	r2, [r3, #9]
 
	 uint8_t* commandComplete;
	 commandComplete=(uint8_t*)malloc(10+size);
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	330a      	adds	r3, #10
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f002 fe7c 	bl	800370c <malloc>
 8000a14:	4603      	mov	r3, r0
 8000a16:	617b      	str	r3, [r7, #20]
	 memcpy(commandComplete,UPDATE_CHAR,10);
 8000a18:	220a      	movs	r2, #10
 8000a1a:	4910      	ldr	r1, [pc, #64]	@ (8000a5c <updateCharValue+0x9c>)
 8000a1c:	6978      	ldr	r0, [r7, #20]
 8000a1e:	f003 f9e8 	bl	8003df2 <memcpy>
	 memcpy(commandComplete+10,data,size);
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	330a      	adds	r3, #10
 8000a26:	683a      	ldr	r2, [r7, #0]
 8000a28:	6a39      	ldr	r1, [r7, #32]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f003 f9e1 	bl	8003df2 <memcpy>
 
	 BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	f103 010a 	add.w	r1, r3, #10
 8000a36:	2300      	movs	r3, #0
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	2307      	movs	r3, #7
 8000a3c:	4a08      	ldr	r2, [pc, #32]	@ (8000a60 <updateCharValue+0xa0>)
 8000a3e:	6978      	ldr	r0, [r7, #20]
 8000a40:	f7ff fef8 	bl	8000834 <BLE_command>
 
	 free(commandComplete);
 8000a44:	6978      	ldr	r0, [r7, #20]
 8000a46:	f002 fe69 	bl	800371c <free>
	 free(rxEvent);
 8000a4a:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <updateCharValue+0xa4>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f002 fe64 	bl	800371c <free>
 }
 8000a54:	bf00      	nop
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200000d8 	.word	0x200000d8
 8000a60:	200000d0 	.word	0x200000d0
 8000a64:	200002f0 	.word	0x200002f0

08000a68 <disconnectBLE>:
 
 /** 
  * @brief Disconnects the peripheral from the central
 */
 void disconnectBLE(){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af02      	add	r7, sp, #8
	 if (connectionHandler[0] == -1 && connectionHandler[1] == -1){
 8000a6e:	4b25      	ldr	r3, [pc, #148]	@ (8000b04 <disconnectBLE+0x9c>)
 8000a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a78:	d109      	bne.n	8000a8e <disconnectBLE+0x26>
 8000a7a:	4b22      	ldr	r3, [pc, #136]	@ (8000b04 <disconnectBLE+0x9c>)
 8000a7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a84:	d103      	bne.n	8000a8e <disconnectBLE+0x26>
		// should not be -1
		printf("Connection handler is -1\n");
 8000a86:	4820      	ldr	r0, [pc, #128]	@ (8000b08 <disconnectBLE+0xa0>)
 8000a88:	f003 f828 	bl	8003adc <puts>
 8000a8c:	e036      	b.n	8000afc <disconnectBLE+0x94>
		return;
	 }
	 uint8_t command[7];
	 memcpy(command, DISCONNECT, 4);
 8000a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b0c <disconnectBLE+0xa4>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	607b      	str	r3, [r7, #4]
	 command[4] = connectionHandler[0];
 8000a94:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <disconnectBLE+0x9c>)
 8000a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	723b      	strb	r3, [r7, #8]
	 command[5] = connectionHandler[1];
 8000a9e:	4b19      	ldr	r3, [pc, #100]	@ (8000b04 <disconnectBLE+0x9c>)
 8000aa0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	727b      	strb	r3, [r7, #9]
	 command[6] = 0x13;
 8000aa8:	2313      	movs	r3, #19
 8000aaa:	72bb      	strb	r3, [r7, #10]
	 if(BLE_command(command,sizeof(command),EVENT_DISCONNECT_PENDING,7,0)==BLE_OK){
 8000aac:	1d38      	adds	r0, r7, #4
 8000aae:	2300      	movs	r3, #0
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	4a16      	ldr	r2, [pc, #88]	@ (8000b10 <disconnectBLE+0xa8>)
 8000ab6:	2107      	movs	r1, #7
 8000ab8:	f7ff febc 	bl	8000834 <BLE_command>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d11c      	bne.n	8000afc <disconnectBLE+0x94>
		 int result=fetchBleEvent(buffer,127);
 8000ac2:	217f      	movs	r1, #127	@ 0x7f
 8000ac4:	4813      	ldr	r0, [pc, #76]	@ (8000b14 <disconnectBLE+0xac>)
 8000ac6:	f7ff fcf5 	bl	80004b4 <fetchBleEvent>
 8000aca:	60f8      	str	r0, [r7, #12]
		 if(result==BLE_OK){
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d10f      	bne.n	8000af2 <disconnectBLE+0x8a>
			  if(checkEventResp(buffer,EVENT_DISCONNECTED,4)==BLE_OK){
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	4910      	ldr	r1, [pc, #64]	@ (8000b18 <disconnectBLE+0xb0>)
 8000ad6:	480f      	ldr	r0, [pc, #60]	@ (8000b14 <disconnectBLE+0xac>)
 8000ad8:	f7ff fd76 	bl	80005c8 <checkEventResp>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d107      	bne.n	8000af2 <disconnectBLE+0x8a>
				  //setConnectable();
				  connectionHandler[0] = -1;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <disconnectBLE+0x9c>)
 8000ae4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ae8:	801a      	strh	r2, [r3, #0]
				  connectionHandler[1] = -1;
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <disconnectBLE+0x9c>)
 8000aec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000af0:	805a      	strh	r2, [r3, #2]
			  }
		 }
	 free(rxEvent);
 8000af2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b1c <disconnectBLE+0xb4>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f002 fe10 	bl	800371c <free>
	 }
 }
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000150 	.word	0x20000150
 8000b08:	08004a1c 	.word	0x08004a1c
 8000b0c:	200000e8 	.word	0x200000e8
 8000b10:	200000f4 	.word	0x200000f4
 8000b14:	200001e4 	.word	0x200001e4
 8000b18:	200000f0 	.word	0x200000f0
 8000b1c:	200002f0 	.word	0x200002f0

08000b20 <setDiscoverability>:
 /**
  * DO NOT CHANGE FUNCTION definition
  * @brief Sets the discoverability of the peripheral
  * @param mode 0 => Non Discoverable, 1 => Discoverable
  * */
 void setDiscoverability(uint8_t mode){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af02      	add	r7, sp, #8
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
	 if (mode == 1){
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d102      	bne.n	8000b36 <setDiscoverability+0x16>
		 setConnectable();
 8000b30:	f7ff fe00 	bl	8000734 <setConnectable>
		 free(rxEvent);
	 }
	 else{
		 // Do nothing
	 }
 8000b34:	e00f      	b.n	8000b56 <setDiscoverability+0x36>
	 else if (mode == 0){
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d10c      	bne.n	8000b56 <setDiscoverability+0x36>
		 if(BLE_command(ACI_GAP_SET_NON_DISCOVERABLE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE),ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE),0)==BLE_OK){
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	2307      	movs	r3, #7
 8000b42:	4a07      	ldr	r2, [pc, #28]	@ (8000b60 <setDiscoverability+0x40>)
 8000b44:	2104      	movs	r1, #4
 8000b46:	4807      	ldr	r0, [pc, #28]	@ (8000b64 <setDiscoverability+0x44>)
 8000b48:	f7ff fe74 	bl	8000834 <BLE_command>
		 free(rxEvent);
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <setDiscoverability+0x48>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f002 fde3 	bl	800371c <free>
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000110 	.word	0x20000110
 8000b64:	2000010c 	.word	0x2000010c
 8000b68:	200002f0 	.word	0x200002f0

08000b6c <i2c_init>:
 */

#include "i2c.h"


void i2c_init() {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	printf("Init I2C setup\n");
 8000b70:	4847      	ldr	r0, [pc, #284]	@ (8000c90 <i2c_init+0x124>)
 8000b72:	f002 ffb3 	bl	8003adc <puts>

	// GPIOB
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000b76:	4b47      	ldr	r3, [pc, #284]	@ (8000c94 <i2c_init+0x128>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7a:	4a46      	ldr	r2, [pc, #280]	@ (8000c94 <i2c_init+0x128>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// I2C
	RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8000b82:	4b44      	ldr	r3, [pc, #272]	@ (8000c94 <i2c_init+0x128>)
 8000b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b86:	4a43      	ldr	r2, [pc, #268]	@ (8000c94 <i2c_init+0x128>)
 8000b88:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b8c:	6593      	str	r3, [r2, #88]	@ 0x58
	//         Macro defined as RCC_APB1ENR1_I2C2EN


	// Setting up GPIO
	// Chapter 8.4 Table 39.
	GPIOB->MODER &= ~(GPIO_MODER_MODE10 | GPIO_MODER_MODE11);  // Clear mode bits
 8000b8e:	4b42      	ldr	r3, [pc, #264]	@ (8000c98 <i2c_init+0x12c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a41      	ldr	r2, [pc, #260]	@ (8000c98 <i2c_init+0x12c>)
 8000b94:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000b98:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE10_1; // Pin B10 to AF mode
 8000b9a:	4b3f      	ldr	r3, [pc, #252]	@ (8000c98 <i2c_init+0x12c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a3e      	ldr	r2, [pc, #248]	@ (8000c98 <i2c_init+0x12c>)
 8000ba0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ba4:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE11_1; // Pin B11 to AF mode
 8000ba6:	4b3c      	ldr	r3, [pc, #240]	@ (8000c98 <i2c_init+0x12c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a3b      	ldr	r2, [pc, #236]	@ (8000c98 <i2c_init+0x12c>)
 8000bac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000bb0:	6013      	str	r3, [r2, #0]

	// Explicitly set to pull up mode to increase speed
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD10 | GPIO_PUPDR_PUPD11);
 8000bb2:	4b39      	ldr	r3, [pc, #228]	@ (8000c98 <i2c_init+0x12c>)
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	4a38      	ldr	r2, [pc, #224]	@ (8000c98 <i2c_init+0x12c>)
 8000bb8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000bbc:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (GPIO_PUPDR_PUPD10_0 | GPIO_PUPDR_PUPD11_0);
 8000bbe:	4b36      	ldr	r3, [pc, #216]	@ (8000c98 <i2c_init+0x12c>)
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	4a35      	ldr	r2, [pc, #212]	@ (8000c98 <i2c_init+0x12c>)
 8000bc4:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000bc8:	60d3      	str	r3, [r2, #12]
	// Source: https://cseweb.ucsd.edu/classes/fa23/cse190-e/docs/stm32l4X-reference-manual.pdf
	//         8.5.10 GPIO alternate function high register
	//         Pin 11 is bits 15 to 12
	//         Pin 10 is bits 11 to 8
	// For pin 10 (AFR index 1, bits [11:8])
	GPIOB->AFR[1] &= ~(0xF << 8); // clear
 8000bca:	4b33      	ldr	r3, [pc, #204]	@ (8000c98 <i2c_init+0x12c>)
 8000bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bce:	4a32      	ldr	r2, [pc, #200]	@ (8000c98 <i2c_init+0x12c>)
 8000bd0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000bd4:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |=  (0x4 << 8); // set to AF4
 8000bd6:	4b30      	ldr	r3, [pc, #192]	@ (8000c98 <i2c_init+0x12c>)
 8000bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bda:	4a2f      	ldr	r2, [pc, #188]	@ (8000c98 <i2c_init+0x12c>)
 8000bdc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000be0:	6253      	str	r3, [r2, #36]	@ 0x24

	// For pin 11 (AFR index 1, bits [15:12])
	GPIOB->AFR[1] &= ~(0xF << 12); // clear
 8000be2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c98 <i2c_init+0x12c>)
 8000be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be6:	4a2c      	ldr	r2, [pc, #176]	@ (8000c98 <i2c_init+0x12c>)
 8000be8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000bec:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |=  (0x4 << 12); // set to AF4
 8000bee:	4b2a      	ldr	r3, [pc, #168]	@ (8000c98 <i2c_init+0x12c>)
 8000bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bf2:	4a29      	ldr	r2, [pc, #164]	@ (8000c98 <i2c_init+0x12c>)
 8000bf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bf8:	6253      	str	r3, [r2, #36]	@ 0x24

	I2C2->CR1 &= ~I2C_CR1_PE; // Disable I2C2 before configuration
 8000bfa:	4b28      	ldr	r3, [pc, #160]	@ (8000c9c <i2c_init+0x130>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a27      	ldr	r2, [pc, #156]	@ (8000c9c <i2c_init+0x130>)
 8000c00:	f023 0301 	bic.w	r3, r3, #1
 8000c04:	6013      	str	r3, [r2, #0]
	// Given that we have prescaler set to 1, the input I2C clock is 4MHz.
	// This means the period is 250ns
	// For 100 kHz I2C, the period is: 1 / (100KHz) = 10uS

	// t_PRESC = (1 + 1)*250ns = 500ns (0.5uS)
	I2C2->TIMINGR &= ~I2C_TIMINGR_PRESC;  // Clear bits 31:28 (PRESC field)
 8000c06:	4b25      	ldr	r3, [pc, #148]	@ (8000c9c <i2c_init+0x130>)
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	4a24      	ldr	r2, [pc, #144]	@ (8000c9c <i2c_init+0x130>)
 8000c0c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000c10:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |=  (1 << I2C_TIMINGR_PRESC_Pos);  // Set PRESC = ???
 8000c12:	4b22      	ldr	r3, [pc, #136]	@ (8000c9c <i2c_init+0x130>)
 8000c14:	691b      	ldr	r3, [r3, #16]
 8000c16:	4a21      	ldr	r2, [pc, #132]	@ (8000c9c <i2c_init+0x130>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c1c:	6113      	str	r3, [r2, #16]

	// t_SCLDEL = (SCLDEL+1) * t_PRESC
	I2C2->TIMINGR &= ~I2C_TIMINGR_SCLDEL;  // Clear SCLDEL
 8000c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c9c <i2c_init+0x130>)
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	4a1e      	ldr	r2, [pc, #120]	@ (8000c9c <i2c_init+0x130>)
 8000c24:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000c28:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |=  (2 << I2C_TIMINGR_SCLDEL_Pos);  // Set SCLDEL = 2
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c9c <i2c_init+0x130>)
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8000c9c <i2c_init+0x130>)
 8000c30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c34:	6113      	str	r3, [r2, #16]

	// t_SDADEL = SDADEL * t_PRESC
	I2C2->TIMINGR &= ~I2C_TIMINGR_SDADEL;  // Clear SDADEL
 8000c36:	4b19      	ldr	r3, [pc, #100]	@ (8000c9c <i2c_init+0x130>)
 8000c38:	691b      	ldr	r3, [r3, #16]
 8000c3a:	4a18      	ldr	r2, [pc, #96]	@ (8000c9c <i2c_init+0x130>)
 8000c3c:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000c40:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |=  (2 << I2C_TIMINGR_SDADEL_Pos);  // Set SDADEL = 2
 8000c42:	4b16      	ldr	r3, [pc, #88]	@ (8000c9c <i2c_init+0x130>)
 8000c44:	691b      	ldr	r3, [r3, #16]
 8000c46:	4a15      	ldr	r2, [pc, #84]	@ (8000c9c <i2c_init+0x130>)
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c4c:	6113      	str	r3, [r2, #16]

	// t_SCLL = (SCLL+1) * t_PRESC
	I2C2->TIMINGR &= ~I2C_TIMINGR_SCLL;  // Clear SCLL
 8000c4e:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <i2c_init+0x130>)
 8000c50:	691b      	ldr	r3, [r3, #16]
 8000c52:	4a12      	ldr	r2, [pc, #72]	@ (8000c9c <i2c_init+0x130>)
 8000c54:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000c58:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |=  (9 << I2C_TIMINGR_SCLL_Pos);  // Set SCLL = ???
 8000c5a:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <i2c_init+0x130>)
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c9c <i2c_init+0x130>)
 8000c60:	f043 0309 	orr.w	r3, r3, #9
 8000c64:	6113      	str	r3, [r2, #16]

	// t_SCLH = (SCLH+1) * t_PRESC
	I2C2->TIMINGR &= ~I2C_TIMINGR_SCLH;  // Clear SCLH
 8000c66:	4b0d      	ldr	r3, [pc, #52]	@ (8000c9c <i2c_init+0x130>)
 8000c68:	691b      	ldr	r3, [r3, #16]
 8000c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000c9c <i2c_init+0x130>)
 8000c6c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000c70:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |=  (9 << I2C_TIMINGR_SCLH_Pos);  // Set SCLH = ???
 8000c72:	4b0a      	ldr	r3, [pc, #40]	@ (8000c9c <i2c_init+0x130>)
 8000c74:	691b      	ldr	r3, [r3, #16]
 8000c76:	4a09      	ldr	r2, [pc, #36]	@ (8000c9c <i2c_init+0x130>)
 8000c78:	f443 6310 	orr.w	r3, r3, #2304	@ 0x900
 8000c7c:	6113      	str	r3, [r2, #16]

	I2C2->CR1 |= I2C_CR1_PE;  // Enable I2C2
 8000c7e:	4b07      	ldr	r3, [pc, #28]	@ (8000c9c <i2c_init+0x130>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a06      	ldr	r2, [pc, #24]	@ (8000c9c <i2c_init+0x130>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6013      	str	r3, [r2, #0]
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	08004a38 	.word	0x08004a38
 8000c94:	40021000 	.word	0x40021000
 8000c98:	48000400 	.word	0x48000400
 8000c9c:	40005800 	.word	0x40005800

08000ca0 <i2c_transaction>:


uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len) {
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	603a      	str	r2, [r7, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	71bb      	strb	r3, [r7, #6]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	717b      	strb	r3, [r7, #5]
	// printf("I2C transaction: addr: %d, dir: %d, Data: %d_%d, len: %d\n", address, dir, data[0], data[1], len);
	// Clear any previous configuration
    I2C2->ICR = I2C_ICR_STOPCF;
 8000cb6:	4b37      	ldr	r3, [pc, #220]	@ (8000d94 <i2c_transaction+0xf4>)
 8000cb8:	2220      	movs	r2, #32
 8000cba:	61da      	str	r2, [r3, #28]
    I2C2->CR2 = 0;
 8000cbc:	4b35      	ldr	r3, [pc, #212]	@ (8000d94 <i2c_transaction+0xf4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	605a      	str	r2, [r3, #4]

    // ------ setup ---------
    // Set the 7-bit slave address
    I2C2->CR2 |= ((uint32_t)address << 1) & I2C_CR2_SADD;
 8000cc2:	4b34      	ldr	r3, [pc, #208]	@ (8000d94 <i2c_transaction+0xf4>)
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cce:	4931      	ldr	r1, [pc, #196]	@ (8000d94 <i2c_transaction+0xf4>)
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	604b      	str	r3, [r1, #4]
    // Set the direction
    if (dir) {
 8000cd4:	79bb      	ldrb	r3, [r7, #6]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d005      	beq.n	8000ce6 <i2c_transaction+0x46>
        I2C2->CR2 |= I2C_CR2_RD_WRN;
 8000cda:	4b2e      	ldr	r3, [pc, #184]	@ (8000d94 <i2c_transaction+0xf4>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	4a2d      	ldr	r2, [pc, #180]	@ (8000d94 <i2c_transaction+0xf4>)
 8000ce0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ce4:	6053      	str	r3, [r2, #4]
    }
    // Set byte count
    I2C2->CR2 |= ((uint32_t)len << I2C_CR2_NBYTES_Pos);
 8000ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8000d94 <i2c_transaction+0xf4>)
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	797b      	ldrb	r3, [r7, #5]
 8000cec:	041b      	lsls	r3, r3, #16
 8000cee:	4929      	ldr	r1, [pc, #164]	@ (8000d94 <i2c_transaction+0xf4>)
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	604b      	str	r3, [r1, #4]
    // Enable auto end
    I2C2->CR2 |= I2C_CR2_AUTOEND;
 8000cf4:	4b27      	ldr	r3, [pc, #156]	@ (8000d94 <i2c_transaction+0xf4>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	4a26      	ldr	r2, [pc, #152]	@ (8000d94 <i2c_transaction+0xf4>)
 8000cfa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cfe:	6053      	str	r3, [r2, #4]
    // Start the transfer by generating a START condition.
    I2C2->CR2 |= I2C_CR2_START;
 8000d00:	4b24      	ldr	r3, [pc, #144]	@ (8000d94 <i2c_transaction+0xf4>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	4a23      	ldr	r2, [pc, #140]	@ (8000d94 <i2c_transaction+0xf4>)
 8000d06:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d0a:	6053      	str	r3, [r2, #4]
    // ------- end setup ---------

    if (dir == 0) {
 8000d0c:	79bb      	ldrb	r3, [r7, #6]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d117      	bne.n	8000d42 <i2c_transaction+0xa2>
        // writing
        for (uint8_t i = 0; i < len; i++) {
 8000d12:	2300      	movs	r3, #0
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	e00f      	b.n	8000d38 <i2c_transaction+0x98>
        	// printf("Writing Iter %d: %d\n", i, data[i]);

            // Wait for TXIS flag
            while (!(I2C2->ISR & I2C_ISR_TXIS));
 8000d18:	bf00      	nop
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d94 <i2c_transaction+0xf4>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d0f9      	beq.n	8000d1a <i2c_transaction+0x7a>
            // Send
            I2C2->TXDR = data[i];
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	781a      	ldrb	r2, [r3, #0]
 8000d2e:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <i2c_transaction+0xf4>)
 8000d30:	629a      	str	r2, [r3, #40]	@ 0x28
        for (uint8_t i = 0; i < len; i++) {
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	3301      	adds	r3, #1
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	7bfa      	ldrb	r2, [r7, #15]
 8000d3a:	797b      	ldrb	r3, [r7, #5]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d3eb      	bcc.n	8000d18 <i2c_transaction+0x78>
 8000d40:	e017      	b.n	8000d72 <i2c_transaction+0xd2>
        }
    } else {
        // reading
        for (uint8_t i = 0; i < len; i++) {
 8000d42:	2300      	movs	r3, #0
 8000d44:	73bb      	strb	r3, [r7, #14]
 8000d46:	e010      	b.n	8000d6a <i2c_transaction+0xca>
            // Wait for RXNE flag
            while (!(I2C2->ISR & I2C_ISR_RXNE));
 8000d48:	bf00      	nop
 8000d4a:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <i2c_transaction+0xf4>)
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d0f9      	beq.n	8000d4a <i2c_transaction+0xaa>
            // Receive
            data[i] = I2C2->RXDR;
 8000d56:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <i2c_transaction+0xf4>)
 8000d58:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000d5a:	7bbb      	ldrb	r3, [r7, #14]
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	b2ca      	uxtb	r2, r1
 8000d62:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < len; i++) {
 8000d64:	7bbb      	ldrb	r3, [r7, #14]
 8000d66:	3301      	adds	r3, #1
 8000d68:	73bb      	strb	r3, [r7, #14]
 8000d6a:	7bba      	ldrb	r2, [r7, #14]
 8000d6c:	797b      	ldrb	r3, [r7, #5]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d3ea      	bcc.n	8000d48 <i2c_transaction+0xa8>
        }
    }

    // Wait for Stop
    while (!(I2C2->ISR & I2C_ISR_STOPF));
 8000d72:	bf00      	nop
 8000d74:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <i2c_transaction+0xf4>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f003 0320 	and.w	r3, r3, #32
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0f9      	beq.n	8000d74 <i2c_transaction+0xd4>
    // Clear the stop flag
    I2C2->ICR = I2C_ICR_STOPCF;
 8000d80:	4b04      	ldr	r3, [pc, #16]	@ (8000d94 <i2c_transaction+0xf4>)
 8000d82:	2220      	movs	r2, #32
 8000d84:	61da      	str	r2, [r3, #28]


    return 0;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	40005800 	.word	0x40005800

08000d98 <lsm6dsl_init>:

#define LSM6DSL_ADDR   0x6A   // 7-bit I2C address
#define CTRL1_XL       0x10   // Accelerometer control register
#define OUTX_L_XL      0x28   // Starting register address for accelerometer output

void lsm6dsl_init() {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
	printf("Init accelerometer\n");
 8000d9e:	4808      	ldr	r0, [pc, #32]	@ (8000dc0 <lsm6dsl_init+0x28>)
 8000da0:	f002 fe9c 	bl	8003adc <puts>
    uint8_t data[2];

    // Write 416 Hz mode to the accelerometer control register
    data[0] = CTRL1_XL;  
 8000da4:	2310      	movs	r3, #16
 8000da6:	713b      	strb	r3, [r7, #4]
    data[1] = 0x60;      
 8000da8:	2360      	movs	r3, #96	@ 0x60
 8000daa:	717b      	strb	r3, [r7, #5]
    i2c_transaction(LSM6DSL_ADDR, 0, data, 2);
 8000dac:	1d3a      	adds	r2, r7, #4
 8000dae:	2302      	movs	r3, #2
 8000db0:	2100      	movs	r1, #0
 8000db2:	206a      	movs	r0, #106	@ 0x6a
 8000db4:	f7ff ff74 	bl	8000ca0 <i2c_transaction>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	08004a48 	.word	0x08004a48

08000dc4 <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
    // Write the starting register address
    uint8_t reg = OUTX_L_XL;
 8000dd0:	2328      	movs	r3, #40	@ 0x28
 8000dd2:	75fb      	strb	r3, [r7, #23]
    i2c_transaction(LSM6DSL_ADDR, 0, &reg, 1);
 8000dd4:	f107 0217 	add.w	r2, r7, #23
 8000dd8:	2301      	movs	r3, #1
 8000dda:	2100      	movs	r1, #0
 8000ddc:	206a      	movs	r0, #106	@ 0x6a
 8000dde:	f7ff ff5f 	bl	8000ca0 <i2c_transaction>

    // Read 6 bytes
    uint8_t buffer[6];
    i2c_transaction(LSM6DSL_ADDR, 1, buffer, 6);
 8000de2:	f107 0210 	add.w	r2, r7, #16
 8000de6:	2306      	movs	r3, #6
 8000de8:	2101      	movs	r1, #1
 8000dea:	206a      	movs	r0, #106	@ 0x6a
 8000dec:	f7ff ff58 	bl	8000ca0 <i2c_transaction>

    // Combine back (Little Indians)
    *x = (int16_t)((buffer[1] << 8) | buffer[0]);
 8000df0:	7c7b      	ldrb	r3, [r7, #17]
 8000df2:	021b      	lsls	r3, r3, #8
 8000df4:	b21a      	sxth	r2, r3
 8000df6:	7c3b      	ldrb	r3, [r7, #16]
 8000df8:	b21b      	sxth	r3, r3
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	b21a      	sxth	r2, r3
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((buffer[3] << 8) | buffer[2]);
 8000e02:	7cfb      	ldrb	r3, [r7, #19]
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	b21a      	sxth	r2, r3
 8000e08:	7cbb      	ldrb	r3, [r7, #18]
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((buffer[5] << 8) | buffer[4]);
 8000e14:	7d7b      	ldrb	r3, [r7, #21]
 8000e16:	021b      	lsls	r3, r3, #8
 8000e18:	b21a      	sxth	r2, r3
 8000e1a:	7d3b      	ldrb	r3, [r7, #20]
 8000e1c:	b21b      	sxth	r3, r3
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	b21a      	sxth	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	801a      	strh	r2, [r3, #0]
}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e36:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e3a:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d013      	beq.n	8000e6e <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e46:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e4a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000e4e:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d00b      	beq.n	8000e6e <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e56:	e000      	b.n	8000e5a <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e58:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e5a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d0f9      	beq.n	8000e58 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e64:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e6e:	687b      	ldr	r3, [r7, #4]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e7c:	b590      	push	{r4, r7, lr}
 8000e7e:	b09b      	sub	sp, #108	@ 0x6c
 8000e80:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e82:	f000 fcd0 	bl	8001826 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000e86:	f000 f93b 	bl	8001100 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8a:	f000 f9bd 	bl	8001208 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000e8e:	f000 f97d 	bl	800118c <MX_SPI3_Init>

  //RESET BLE MODULE
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e9c:	f001 f830 	bl	8001f00 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000ea0:	200a      	movs	r0, #10
 8000ea2:	f000 fd35 	bl	8001910 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000eac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb0:	f001 f826 	bl	8001f00 <HAL_GPIO_WritePin>

  ble_init();
 8000eb4:	f7ff f9e4 	bl	8000280 <ble_init>

  HAL_Delay(10);
 8000eb8:	200a      	movs	r0, #10
 8000eba:	f000 fd29 	bl	8001910 <HAL_Delay>

  uint8_t nonDiscoverable = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

  // Variables for accelerometer readings
  int16_t ax, ay, az;
  int16_t prev_ax, prev_ay, prev_az;
  // Perform an initial reading of the accelerometer
  lsm6dsl_read_xyz(&ax, &ay, &az);
 8000ec4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000ec8:	f107 0142 	add.w	r1, r7, #66	@ 0x42
 8000ecc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff77 	bl	8000dc4 <lsm6dsl_read_xyz>
  prev_ax = ax;
 8000ed6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000eda:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
  prev_ay = ay;
 8000ede:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000ee2:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
  prev_az = az;
 8000ee6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000eea:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
  // Variables for movement detection.
  uint32_t no_movement_count = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	657b      	str	r3, [r7, #84]	@ 0x54
  const uint16_t MOVEMENT_THRESHOLD = 1500; // adjustable
 8000ef2:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000ef6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
  const uint32_t NO_MOVEMENT_REQUIRED = 1200;  // (1 minute = 60000ms/50ms)
 8000efa:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8000efe:	64fb      	str	r3, [r7, #76]	@ 0x4c

  // lost mode flag
  bool lost_mode = false;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

  setDiscoverability(0);
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff fe0a 	bl	8000b20 <setDiscoverability>

  while (1)
  {
  
    // Timer interrupt event
    if (timer_event) {
 8000f0c:	4b70      	ldr	r3, [pc, #448]	@ (80010d0 <main+0x254>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0fa      	beq.n	8000f0c <main+0x90>
      // --------- Movement Tracking stuff
      timer_event = false;
 8000f16:	4b6e      	ldr	r3, [pc, #440]	@ (80010d0 <main+0x254>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
      // get change in acceleration
      lsm6dsl_read_xyz(&ax, &ay, &az);
 8000f1c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000f20:	f107 0142 	add.w	r1, r7, #66	@ 0x42
 8000f24:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff4b 	bl	8000dc4 <lsm6dsl_read_xyz>
      int16_t diff_x = (int16_t)abs(ax - prev_ax);
 8000f2e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8000f32:	461a      	mov	r2, r3
 8000f34:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	bfb8      	it	lt
 8000f3e:	425b      	neglt	r3, r3
 8000f40:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
      int16_t diff_y = (int16_t)abs(ay - prev_ay);
 8000f44:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000f48:	461a      	mov	r2, r3
 8000f4a:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	bfb8      	it	lt
 8000f54:	425b      	neglt	r3, r3
 8000f56:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
      int16_t diff_z = (int16_t)abs(az - prev_az);
 8000f5a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8000f5e:	461a      	mov	r2, r3
 8000f60:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	bfb8      	it	lt
 8000f6a:	425b      	neglt	r3, r3
 8000f6c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

      // check for no movement
      if ((diff_x < MOVEMENT_THRESHOLD) && (diff_y < MOVEMENT_THRESHOLD) && (diff_z < MOVEMENT_THRESHOLD)) {
 8000f70:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 8000f74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	da20      	bge.n	8000fbe <main+0x142>
 8000f7c:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 8000f80:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000f84:	429a      	cmp	r2, r3
 8000f86:	da1a      	bge.n	8000fbe <main+0x142>
 8000f88:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 8000f8c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000f90:	429a      	cmp	r2, r3
 8000f92:	da14      	bge.n	8000fbe <main+0x142>
        no_movement_count++;
 8000f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f96:	3301      	adds	r3, #1
 8000f98:	657b      	str	r3, [r7, #84]	@ 0x54
        if (no_movement_count % 50 == 0) {
 8000f9a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000f9c:	4b4d      	ldr	r3, [pc, #308]	@ (80010d4 <main+0x258>)
 8000f9e:	fba3 1302 	umull	r1, r3, r3, r2
 8000fa2:	091b      	lsrs	r3, r3, #4
 8000fa4:	2132      	movs	r1, #50	@ 0x32
 8000fa6:	fb01 f303 	mul.w	r3, r1, r3
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d11a      	bne.n	8000fe6 <main+0x16a>
          printf("Not moving for %ld / %d interrupts\n", no_movement_count, (int)NO_MOVEMENT_REQUIRED);
 8000fb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000fb6:	4848      	ldr	r0, [pc, #288]	@ (80010d8 <main+0x25c>)
 8000fb8:	f002 fd28 	bl	8003a0c <iprintf>
        if (no_movement_count % 50 == 0) {
 8000fbc:	e013      	b.n	8000fe6 <main+0x16a>
        }
      } else {
        if (no_movement_count >= 1200) {
 8000fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fc0:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8000fc4:	d30a      	bcc.n	8000fdc <main+0x160>
          // disconnect ble and set to non discoverable
          printf("Moving, disconnecting BLE\n");
 8000fc6:	4845      	ldr	r0, [pc, #276]	@ (80010dc <main+0x260>)
 8000fc8:	f002 fd88 	bl	8003adc <puts>
          disconnectBLE();
 8000fcc:	f7ff fd4c 	bl	8000a68 <disconnectBLE>
          printf("Setting to non discoverable\n");
 8000fd0:	4843      	ldr	r0, [pc, #268]	@ (80010e0 <main+0x264>)
 8000fd2:	f002 fd83 	bl	8003adc <puts>
          setDiscoverability(0);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff fda2 	bl	8000b20 <setDiscoverability>
        }
        no_movement_count = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	657b      	str	r3, [r7, #84]	@ 0x54
        lost_mode = false;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
      }
      prev_ax = ax;
 8000fe6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000fea:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
      prev_ay = ay;
 8000fee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000ff2:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
      prev_az = az;
 8000ff6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000ffa:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
      // check if havent been moving for a minute
      if (no_movement_count >= NO_MOVEMENT_REQUIRED) {
 8000ffe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001002:	429a      	cmp	r2, r3
 8001004:	d302      	bcc.n	800100c <main+0x190>
        lost_mode = true;
 8001006:	2301      	movs	r3, #1
 8001008:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
      }


      // ------- BLE stuff
      if (lost_mode) {
 800100c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001010:	2b00      	cmp	r3, #0
 8001012:	f43f af7b 	beq.w	8000f0c <main+0x90>
        // first time in lost mode
        if (no_movement_count == NO_MOVEMENT_REQUIRED) {
 8001016:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800101a:	429a      	cmp	r2, r3
 800101c:	d105      	bne.n	800102a <main+0x1ae>
          printf("Entering lost mode\n");
 800101e:	4831      	ldr	r0, [pc, #196]	@ (80010e4 <main+0x268>)
 8001020:	f002 fd5c 	bl	8003adc <puts>
          setDiscoverability(1);
 8001024:	2001      	movs	r0, #1
 8001026:	f7ff fd7b 	bl	8000b20 <setDiscoverability>
        }
        // ble given if statement
        if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800102a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800102e:	2b00      	cmp	r3, #0
 8001030:	d109      	bne.n	8001046 <main+0x1ca>
 8001032:	2140      	movs	r1, #64	@ 0x40
 8001034:	482c      	ldr	r0, [pc, #176]	@ (80010e8 <main+0x26c>)
 8001036:	f000 ff4b 	bl	8001ed0 <HAL_GPIO_ReadPin>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d002      	beq.n	8001046 <main+0x1ca>
          catchBLE();
 8001040:	f7ff fb34 	bl	80006ac <catchBLE>
 8001044:	e042      	b.n	80010cc <main+0x250>
        }else{
          if (no_movement_count % 200 == 0) {// 10 seconds at 50ms intervals
 8001046:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001048:	4b22      	ldr	r3, [pc, #136]	@ (80010d4 <main+0x258>)
 800104a:	fba3 1302 	umull	r1, r3, r3, r2
 800104e:	099b      	lsrs	r3, r3, #6
 8001050:	21c8      	movs	r1, #200	@ 0xc8
 8001052:	fb01 f303 	mul.w	r3, r1, r3
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	f47f af57 	bne.w	8000f0c <main+0x90>
            // Send a string to the NORDIC UART service, remember to not include the newline character
            unsigned char test_str[60];
            strcpy((char *)test_str, "PrivTag Unnamed");
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	4a22      	ldr	r2, [pc, #136]	@ (80010ec <main+0x270>)
 8001062:	461c      	mov	r4, r3
 8001064:	4613      	mov	r3, r2
 8001066:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001068:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            printf("%s\n", test_str);
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	4618      	mov	r0, r3
 8001070:	f002 fd34 	bl	8003adc <puts>
            updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, strlen((char *)test_str), test_str);
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff f8aa 	bl	80001d0 <strlen>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	4613      	mov	r3, r2
 8001086:	2200      	movs	r2, #0
 8001088:	4919      	ldr	r1, [pc, #100]	@ (80010f0 <main+0x274>)
 800108a:	481a      	ldr	r0, [pc, #104]	@ (80010f4 <main+0x278>)
 800108c:	f7ff fc98 	bl	80009c0 <updateCharValue>
  
            sprintf((char *)test_str, "Missing for %lus", (no_movement_count - 1200) / 20);
 8001090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001092:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001096:	4a18      	ldr	r2, [pc, #96]	@ (80010f8 <main+0x27c>)
 8001098:	fba2 2303 	umull	r2, r3, r2, r3
 800109c:	091a      	lsrs	r2, r3, #4
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	4916      	ldr	r1, [pc, #88]	@ (80010fc <main+0x280>)
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 fd22 	bl	8003aec <siprintf>
            printf("%s\n", test_str);
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 fd16 	bl	8003adc <puts>
            updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, strlen((char *)test_str), test_str);
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f88c 	bl	80001d0 <strlen>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	4613      	mov	r3, r2
 80010c2:	2200      	movs	r2, #0
 80010c4:	490a      	ldr	r1, [pc, #40]	@ (80010f0 <main+0x274>)
 80010c6:	480b      	ldr	r0, [pc, #44]	@ (80010f4 <main+0x278>)
 80010c8:	f7ff fc7a 	bl	80009c0 <updateCharValue>
    if (timer_event) {
 80010cc:	e71e      	b.n	8000f0c <main+0x90>
 80010ce:	bf00      	nop
 80010d0:	200002f4 	.word	0x200002f4
 80010d4:	51eb851f 	.word	0x51eb851f
 80010d8:	08004a5c 	.word	0x08004a5c
 80010dc:	08004a80 	.word	0x08004a80
 80010e0:	08004a9c 	.word	0x08004a9c
 80010e4:	08004ab8 	.word	0x08004ab8
 80010e8:	48001000 	.word	0x48001000
 80010ec:	08004acc 	.word	0x08004acc
 80010f0:	200002ec 	.word	0x200002ec
 80010f4:	200002e4 	.word	0x200002e4
 80010f8:	cccccccd 	.word	0xcccccccd
 80010fc:	08004adc 	.word	0x08004adc

08001100 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @attention This changes the System clock frequency, make sure you reflect that change in your timer
  * @retval None
  */
void SystemClock_Config(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b096      	sub	sp, #88	@ 0x58
 8001104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	2244      	movs	r2, #68	@ 0x44
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f002 fde4 	bl	8003cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001122:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001126:	f000 ff35 	bl	8001f94 <HAL_PWREx_ControlVoltageScaling>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001130:	f000 f92c 	bl	800138c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001134:	2310      	movs	r3, #16
 8001136:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001138:	2301      	movs	r3, #1
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	633b      	str	r3, [r7, #48]	@ 0x30
  // This lines changes system clock frequency
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001140:	2370      	movs	r3, #112	@ 0x70
 8001142:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001144:	2300      	movs	r3, #0
 8001146:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4618      	mov	r0, r3
 800114e:	f000 ff77 	bl	8002040 <HAL_RCC_OscConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001158:	f000 f918 	bl	800138c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115c:	230f      	movs	r3, #15
 800115e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001160:	2300      	movs	r3, #0
 8001162:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001170:	463b      	mov	r3, r7
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f001 fb3f 	bl	80027f8 <HAL_RCC_ClockConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001180:	f000 f904 	bl	800138c <Error_Handler>
  }
}
 8001184:	bf00      	nop
 8001186:	3758      	adds	r7, #88	@ 0x58
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001190:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <MX_SPI3_Init+0x74>)
 8001192:	4a1c      	ldr	r2, [pc, #112]	@ (8001204 <MX_SPI3_Init+0x78>)
 8001194:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001196:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <MX_SPI3_Init+0x74>)
 8001198:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800119c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800119e:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <MX_SPI3_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80011a4:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <MX_SPI3_Init+0x74>)
 80011a6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80011aa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ac:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <MX_SPI3_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011b2:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <MX_SPI3_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <MX_SPI3_Init+0x74>)
 80011ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011be:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <MX_SPI3_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <MX_SPI3_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <MX_SPI3_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <MX_SPI3_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80011d8:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <MX_SPI3_Init+0x74>)
 80011da:	2207      	movs	r2, #7
 80011dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011de:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <MX_SPI3_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <MX_SPI3_Init+0x74>)
 80011e6:	2208      	movs	r2, #8
 80011e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	@ (8001200 <MX_SPI3_Init+0x74>)
 80011ec:	f001 fcf0 	bl	8002bd0 <HAL_SPI_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80011f6:	f000 f8c9 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200002fc 	.word	0x200002fc
 8001204:	40003c00 	.word	0x40003c00

08001208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	@ 0x28
 800120c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

  i2c_init();
 800121e:	f7ff fca5 	bl	8000b6c <i2c_init>
  lsm6dsl_init();
 8001222:	f7ff fdb9 	bl	8000d98 <lsm6dsl_init>
  timer_init(TIM2);
 8001226:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800122a:	f000 fa73 	bl	8001714 <timer_init>
  timer_set_ms(TIM2, 100);  // 50 ms timer period -> 20 Hz
 800122e:	2164      	movs	r1, #100	@ 0x64
 8001230:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001234:	f000 fab0 	bl	8001798 <timer_set_ms>

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001238:	4b43      	ldr	r3, [pc, #268]	@ (8001348 <MX_GPIO_Init+0x140>)
 800123a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123c:	4a42      	ldr	r2, [pc, #264]	@ (8001348 <MX_GPIO_Init+0x140>)
 800123e:	f043 0310 	orr.w	r3, r3, #16
 8001242:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001244:	4b40      	ldr	r3, [pc, #256]	@ (8001348 <MX_GPIO_Init+0x140>)
 8001246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001250:	4b3d      	ldr	r3, [pc, #244]	@ (8001348 <MX_GPIO_Init+0x140>)
 8001252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001254:	4a3c      	ldr	r2, [pc, #240]	@ (8001348 <MX_GPIO_Init+0x140>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125c:	4b3a      	ldr	r3, [pc, #232]	@ (8001348 <MX_GPIO_Init+0x140>)
 800125e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001268:	4b37      	ldr	r3, [pc, #220]	@ (8001348 <MX_GPIO_Init+0x140>)
 800126a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126c:	4a36      	ldr	r2, [pc, #216]	@ (8001348 <MX_GPIO_Init+0x140>)
 800126e:	f043 0302 	orr.w	r3, r3, #2
 8001272:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001274:	4b34      	ldr	r3, [pc, #208]	@ (8001348 <MX_GPIO_Init+0x140>)
 8001276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001280:	4b31      	ldr	r3, [pc, #196]	@ (8001348 <MX_GPIO_Init+0x140>)
 8001282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001284:	4a30      	ldr	r2, [pc, #192]	@ (8001348 <MX_GPIO_Init+0x140>)
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128c:	4b2e      	ldr	r3, [pc, #184]	@ (8001348 <MX_GPIO_Init+0x140>)
 800128e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001298:	4b2b      	ldr	r3, [pc, #172]	@ (8001348 <MX_GPIO_Init+0x140>)
 800129a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129c:	4a2a      	ldr	r2, [pc, #168]	@ (8001348 <MX_GPIO_Init+0x140>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a4:	4b28      	ldr	r3, [pc, #160]	@ (8001348 <MX_GPIO_Init+0x140>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2120      	movs	r1, #32
 80012b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012b8:	f000 fe22 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012c2:	4822      	ldr	r0, [pc, #136]	@ (800134c <MX_GPIO_Init+0x144>)
 80012c4:	f000 fe1c 	bl	8001f00 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 80012c8:	2201      	movs	r2, #1
 80012ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d2:	f000 fe15 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 80012d6:	2340      	movs	r3, #64	@ 0x40
 80012d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	4819      	ldr	r0, [pc, #100]	@ (8001350 <MX_GPIO_Init+0x148>)
 80012ec:	f000 fc46 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 80012f0:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80012f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800130c:	f000 fc36 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 8001310:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4808      	ldr	r0, [pc, #32]	@ (800134c <MX_GPIO_Init+0x144>)
 800132a:	f000 fc27 	bl	8001b7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	2017      	movs	r0, #23
 8001334:	f000 fbeb 	bl	8001b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001338:	2017      	movs	r0, #23
 800133a:	f000 fc04 	bl	8001b46 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	@ 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000
 800134c:	48000c00 	.word	0x48000c00
 8001350:	48001000 	.word	0x48001000

08001354 <TIM2_IRQHandler>:

/* USER CODE BEGIN 4 */
void TIM2_IRQHandler(void) {
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  // Check if the update interrupt flag is set.
  if (TIM2->SR & TIM_SR_UIF) {
 8001358:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00a      	beq.n	800137c <TIM2_IRQHandler+0x28>
      TIM2->SR &= ~TIM_SR_UIF;
 8001366:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001370:	f023 0301 	bic.w	r3, r3, #1
 8001374:	6113      	str	r3, [r2, #16]
      timer_event = true;
 8001376:	4b04      	ldr	r3, [pc, #16]	@ (8001388 <TIM2_IRQHandler+0x34>)
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
  }
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	200002f4 	.word	0x200002f4

0800138c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001390:	b672      	cpsid	i
}
 8001392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <Error_Handler+0x8>

08001398 <_write>:
}
#endif /* USE_FULL_ASSERT */


// Redefine the libc _write() function so you can use printf in your code
int _write(int file, char *ptr, int len) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  int i = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  for (i = 0; i < len; i++) {
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	e009      	b.n	80013c2 <_write+0x2a>
      ITM_SendChar(*ptr++);
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	60ba      	str	r2, [r7, #8]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fd39 	bl	8000e2e <ITM_SendChar>
  for (i = 0; i < len; i++) {
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3301      	adds	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	dbf1      	blt.n	80013ae <_write+0x16>
  }
  return len;
 80013ca:	687b      	ldr	r3, [r7, #4]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <HAL_MspInit+0x44>)
 80013dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013de:	4a0e      	ldr	r2, [pc, #56]	@ (8001418 <HAL_MspInit+0x44>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <HAL_MspInit+0x44>)
 80013e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <HAL_MspInit+0x44>)
 80013f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f6:	4a08      	ldr	r2, [pc, #32]	@ (8001418 <HAL_MspInit+0x44>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <HAL_MspInit+0x44>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000

0800141c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	@ 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a17      	ldr	r2, [pc, #92]	@ (8001498 <HAL_SPI_MspInit+0x7c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d128      	bne.n	8001490 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800143e:	4b17      	ldr	r3, [pc, #92]	@ (800149c <HAL_SPI_MspInit+0x80>)
 8001440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001442:	4a16      	ldr	r2, [pc, #88]	@ (800149c <HAL_SPI_MspInit+0x80>)
 8001444:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001448:	6593      	str	r3, [r2, #88]	@ 0x58
 800144a:	4b14      	ldr	r3, [pc, #80]	@ (800149c <HAL_SPI_MspInit+0x80>)
 800144c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001456:	4b11      	ldr	r3, [pc, #68]	@ (800149c <HAL_SPI_MspInit+0x80>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	4a10      	ldr	r2, [pc, #64]	@ (800149c <HAL_SPI_MspInit+0x80>)
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001462:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <HAL_SPI_MspInit+0x80>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800146e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001480:	2306      	movs	r3, #6
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4619      	mov	r1, r3
 800148a:	4805      	ldr	r0, [pc, #20]	@ (80014a0 <HAL_SPI_MspInit+0x84>)
 800148c:	f000 fb76 	bl	8001b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001490:	bf00      	nop
 8001492:	3728      	adds	r7, #40	@ 0x28
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40003c00 	.word	0x40003c00
 800149c:	40021000 	.word	0x40021000
 80014a0:	48000800 	.word	0x48000800

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <NMI_Handler+0x4>

080014ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <MemManage_Handler+0x4>

080014bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <BusFault_Handler+0x4>

080014c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <UsageFault_Handler+0x4>

080014cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fa:	f000 f9e9 	bl	80018d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 8001508:	4b03      	ldr	r3, [pc, #12]	@ (8001518 <EXTI9_5_IRQHandler+0x14>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 800150e:	2040      	movs	r0, #64	@ 0x40
 8001510:	f000 fd0e 	bl	8001f30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	200002f8 	.word	0x200002f8

0800151c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	e00a      	b.n	8001544 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800152e:	f3af 8000 	nop.w
 8001532:	4601      	mov	r1, r0
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	60ba      	str	r2, [r7, #8]
 800153a:	b2ca      	uxtb	r2, r1
 800153c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3301      	adds	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	dbf0      	blt.n	800152e <_read+0x12>
	}

return len;
 800154c:	687b      	ldr	r3, [r7, #4]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001560:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <_sbrk+0x50>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d102      	bne.n	800156e <_sbrk+0x16>
		heap_end = &end;
 8001568:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <_sbrk+0x50>)
 800156a:	4a10      	ldr	r2, [pc, #64]	@ (80015ac <_sbrk+0x54>)
 800156c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800156e:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <_sbrk+0x50>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001574:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <_sbrk+0x50>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4413      	add	r3, r2
 800157c:	466a      	mov	r2, sp
 800157e:	4293      	cmp	r3, r2
 8001580:	d907      	bls.n	8001592 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001582:	f002 fc09 	bl	8003d98 <__errno>
 8001586:	4603      	mov	r3, r0
 8001588:	220c      	movs	r2, #12
 800158a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800158c:	f04f 33ff 	mov.w	r3, #4294967295
 8001590:	e006      	b.n	80015a0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001592:	4b05      	ldr	r3, [pc, #20]	@ (80015a8 <_sbrk+0x50>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	4a03      	ldr	r2, [pc, #12]	@ (80015a8 <_sbrk+0x50>)
 800159c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800159e:	68fb      	ldr	r3, [r7, #12]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000360 	.word	0x20000360
 80015ac:	200004b8 	.word	0x200004b8

080015b0 <_close>:

int _close(int file)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	return -1;
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015d8:	605a      	str	r2, [r3, #4]
	return 0;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <_isatty>:

int _isatty(int file)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	return 1;
 80015f0:	2301      	movs	r3, #1
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015fe:	b480      	push	{r7}
 8001600:	b085      	sub	sp, #20
 8001602:	af00      	add	r7, sp, #0
 8001604:	60f8      	str	r0, [r7, #12]
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
	return 0;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800161c:	4b17      	ldr	r3, [pc, #92]	@ (800167c <SystemInit+0x64>)
 800161e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001622:	4a16      	ldr	r2, [pc, #88]	@ (800167c <SystemInit+0x64>)
 8001624:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001628:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800162c:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <SystemInit+0x68>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a13      	ldr	r2, [pc, #76]	@ (8001680 <SystemInit+0x68>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <SystemInit+0x68>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <SystemInit+0x68>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a0f      	ldr	r2, [pc, #60]	@ (8001680 <SystemInit+0x68>)
 8001644:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001648:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800164c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800164e:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <SystemInit+0x68>)
 8001650:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001654:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001656:	4b0a      	ldr	r3, [pc, #40]	@ (8001680 <SystemInit+0x68>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a09      	ldr	r2, [pc, #36]	@ (8001680 <SystemInit+0x68>)
 800165c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001660:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001662:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <SystemInit+0x68>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001668:	4b04      	ldr	r3, [pc, #16]	@ (800167c <SystemInit+0x64>)
 800166a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800166e:	609a      	str	r2, [r3, #8]
#endif
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000ed00 	.word	0xe000ed00
 8001680:	40021000 	.word	0x40021000

08001684 <__NVIC_EnableIRQ>:
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db0b      	blt.n	80016ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4907      	ldr	r1, [pc, #28]	@ (80016bc <__NVIC_EnableIRQ+0x38>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_SetPriority>:
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	@ (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	@ (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <timer_init>:

#include "timer.h"


void timer_init(TIM_TypeDef* timer)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;  // Enable clock for TIM2
 800171c:	4b1d      	ldr	r3, [pc, #116]	@ (8001794 <timer_init+0x80>)
 800171e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001720:	4a1c      	ldr	r2, [pc, #112]	@ (8001794 <timer_init+0x80>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6593      	str	r3, [r2, #88]	@ 0x58
  timer->CR1 = 0x0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]

  timer->CNT = 0;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	625a      	str	r2, [r3, #36]	@ 0x24
  timer->SR = 0;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
  timer->DIER = 0;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	60da      	str	r2, [r3, #12]
  timer->PSC = 0;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	629a      	str	r2, [r3, #40]	@ 0x28
  timer->ARR = 0xFFFFFFFF;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	62da      	str	r2, [r3, #44]	@ 0x2c

  timer->DIER |= 0x1; // enable "Update Interrupt"
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	f043 0201 	orr.w	r2, r3, #1
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	60da      	str	r2, [r3, #12]

  // Configure interrupt controller (NVIC) for TIM2
  NVIC_SetPriority(TIM2_IRQn, 2);  // Set priority (lower value = higher priority)
 800175a:	2102      	movs	r1, #2
 800175c:	201c      	movs	r0, #28
 800175e:	f7ff ffaf 	bl	80016c0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);       // Enable TIM2 interrupt in NVIC
 8001762:	201c      	movs	r0, #28
 8001764:	f7ff ff8e 	bl	8001684 <__NVIC_EnableIRQ>


  TIM2->PSC = 3999;  // Set prescaler to divide clock by 4000 (because 4mhz clock -> 1ms tick rate
 8001768:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800176c:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001770:	629a      	str	r2, [r3, #40]	@ 0x28

  TIM2->ARR = 999;  // Set auto-reload value for 1-second period
 8001772:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001776:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800177a:	62da      	str	r2, [r3, #44]	@ 0x2c

  TIM2->CR1 |= TIM_CR1_CEN;  // Enable the timer
 800177c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6013      	str	r3, [r2, #0]

}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40021000 	.word	0x40021000

08001798 <timer_set_ms>:
  timer->CNT = 0;

}

void timer_set_ms(TIM_TypeDef* timer, uint16_t period_ms)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	807b      	strh	r3, [r7, #2]
	timer->CR1 = 0;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]

	// Change ARR
	timer->ARR = period_ms - 1;  // ARR counts from 0 to period_ms - 1
 80017aa:	887b      	ldrh	r3, [r7, #2]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	461a      	mov	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	62da      	str	r2, [r3, #44]	@ 0x2c

	timer->EGR = TIM_EGR_UG;  // Force an update event to load PSC and ARR
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	615a      	str	r2, [r3, #20]

	timer->CR1 |= TIM_CR1_CEN;  // Enable the timer
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f043 0201 	orr.w	r2, r3, #1
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	601a      	str	r2, [r3, #0]

}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800180c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017d8:	f7ff ff1e 	bl	8001618 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017dc:	480c      	ldr	r0, [pc, #48]	@ (8001810 <LoopForever+0x6>)
  ldr r1, =_edata
 80017de:	490d      	ldr	r1, [pc, #52]	@ (8001814 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001818 <LoopForever+0xe>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e4:	e002      	b.n	80017ec <LoopCopyDataInit>

080017e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ea:	3304      	adds	r3, #4

080017ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f0:	d3f9      	bcc.n	80017e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f2:	4a0a      	ldr	r2, [pc, #40]	@ (800181c <LoopForever+0x12>)
  ldr r4, =_ebss
 80017f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001820 <LoopForever+0x16>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f8:	e001      	b.n	80017fe <LoopFillZerobss>

080017fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017fc:	3204      	adds	r2, #4

080017fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001800:	d3fb      	bcc.n	80017fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001802:	f002 facf 	bl	8003da4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001806:	f7ff fb39 	bl	8000e7c <main>

0800180a <LoopForever>:

LoopForever:
    b LoopForever
 800180a:	e7fe      	b.n	800180a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800180c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001814:	200001bc 	.word	0x200001bc
  ldr r2, =_sidata
 8001818:	08004b74 	.word	0x08004b74
  ldr r2, =_sbss
 800181c:	200001bc 	.word	0x200001bc
  ldr r4, =_ebss
 8001820:	200004b4 	.word	0x200004b4

08001824 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001824:	e7fe      	b.n	8001824 <ADC1_2_IRQHandler>

08001826 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001830:	2003      	movs	r0, #3
 8001832:	f000 f961 	bl	8001af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001836:	2000      	movs	r0, #0
 8001838:	f000 f80e 	bl	8001858 <HAL_InitTick>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	71fb      	strb	r3, [r7, #7]
 8001846:	e001      	b.n	800184c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001848:	f7ff fdc4 	bl	80013d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800184c:	79fb      	ldrb	r3, [r7, #7]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001864:	4b17      	ldr	r3, [pc, #92]	@ (80018c4 <HAL_InitTick+0x6c>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d023      	beq.n	80018b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800186c:	4b16      	ldr	r3, [pc, #88]	@ (80018c8 <HAL_InitTick+0x70>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b14      	ldr	r3, [pc, #80]	@ (80018c4 <HAL_InitTick+0x6c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	4619      	mov	r1, r3
 8001876:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800187a:	fbb3 f3f1 	udiv	r3, r3, r1
 800187e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001882:	4618      	mov	r0, r3
 8001884:	f000 f96d 	bl	8001b62 <HAL_SYSTICK_Config>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10f      	bne.n	80018ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d809      	bhi.n	80018a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f000 f937 	bl	8001b0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018a0:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <HAL_InitTick+0x74>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e007      	b.n	80018b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
 80018ac:	e004      	b.n	80018b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	73fb      	strb	r3, [r7, #15]
 80018b2:	e001      	b.n	80018b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2000015c 	.word	0x2000015c
 80018c8:	20000154 	.word	0x20000154
 80018cc:	20000158 	.word	0x20000158

080018d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_IncTick+0x20>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <HAL_IncTick+0x24>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	4a04      	ldr	r2, [pc, #16]	@ (80018f4 <HAL_IncTick+0x24>)
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	2000015c 	.word	0x2000015c
 80018f4:	20000364 	.word	0x20000364

080018f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return uwTick;
 80018fc:	4b03      	ldr	r3, [pc, #12]	@ (800190c <HAL_GetTick+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000364 	.word	0x20000364

08001910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001918:	f7ff ffee 	bl	80018f8 <HAL_GetTick>
 800191c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001928:	d005      	beq.n	8001936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800192a:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <HAL_Delay+0x44>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4413      	add	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001936:	bf00      	nop
 8001938:	f7ff ffde 	bl	80018f8 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	429a      	cmp	r2, r3
 8001946:	d8f7      	bhi.n	8001938 <HAL_Delay+0x28>
  {
  }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	2000015c 	.word	0x2000015c

08001958 <__NVIC_SetPriorityGrouping>:
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001974:	4013      	ands	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001980:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	@ (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_GetPriorityGrouping>:
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a4:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <__NVIC_GetPriorityGrouping+0x18>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	f003 0307 	and.w	r3, r3, #7
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_EnableIRQ>:
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	db0b      	blt.n	80019e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	f003 021f 	and.w	r2, r3, #31
 80019d4:	4907      	ldr	r1, [pc, #28]	@ (80019f4 <__NVIC_EnableIRQ+0x38>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	2001      	movs	r0, #1
 80019de:	fa00 f202 	lsl.w	r2, r0, r2
 80019e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000e100 	.word	0xe000e100

080019f8 <__NVIC_SetPriority>:
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	6039      	str	r1, [r7, #0]
 8001a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	db0a      	blt.n	8001a22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	490c      	ldr	r1, [pc, #48]	@ (8001a44 <__NVIC_SetPriority+0x4c>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	0112      	lsls	r2, r2, #4
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001a20:	e00a      	b.n	8001a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4908      	ldr	r1, [pc, #32]	@ (8001a48 <__NVIC_SetPriority+0x50>)
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	3b04      	subs	r3, #4
 8001a30:	0112      	lsls	r2, r2, #4
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	440b      	add	r3, r1
 8001a36:	761a      	strb	r2, [r3, #24]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000e100 	.word	0xe000e100
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <NVIC_EncodePriority>:
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	@ 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f1c3 0307 	rsb	r3, r3, #7
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	bf28      	it	cs
 8001a6a:	2304      	movcs	r3, #4
 8001a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3304      	adds	r3, #4
 8001a72:	2b06      	cmp	r3, #6
 8001a74:	d902      	bls.n	8001a7c <NVIC_EncodePriority+0x30>
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3b03      	subs	r3, #3
 8001a7a:	e000      	b.n	8001a7e <NVIC_EncodePriority+0x32>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	401a      	ands	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	43d9      	mvns	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	4313      	orrs	r3, r2
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3724      	adds	r7, #36	@ 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <SysTick_Config>:
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ac4:	d301      	bcc.n	8001aca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00f      	b.n	8001aea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aca:	4a0a      	ldr	r2, [pc, #40]	@ (8001af4 <SysTick_Config+0x40>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad2:	210f      	movs	r1, #15
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	f7ff ff8e 	bl	80019f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001adc:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <SysTick_Config+0x40>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae2:	4b04      	ldr	r3, [pc, #16]	@ (8001af4 <SysTick_Config+0x40>)
 8001ae4:	2207      	movs	r2, #7
 8001ae6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	e000e010 	.word	0xe000e010

08001af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff29 	bl	8001958 <__NVIC_SetPriorityGrouping>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4603      	mov	r3, r0
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b20:	f7ff ff3e 	bl	80019a0 <__NVIC_GetPriorityGrouping>
 8001b24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	6978      	ldr	r0, [r7, #20]
 8001b2c:	f7ff ff8e 	bl	8001a4c <NVIC_EncodePriority>
 8001b30:	4602      	mov	r2, r0
 8001b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff5d 	bl	80019f8 <__NVIC_SetPriority>
}
 8001b3e:	bf00      	nop
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff31 	bl	80019bc <__NVIC_EnableIRQ>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ffa2 	bl	8001ab4 <SysTick_Config>
 8001b70:	4603      	mov	r3, r0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8a:	e17f      	b.n	8001e8c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	2101      	movs	r1, #1
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 8171 	beq.w	8001e86 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d005      	beq.n	8001bbc <HAL_GPIO_Init+0x40>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d130      	bne.n	8001c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	f003 0201 	and.w	r2, r3, #1
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d118      	bne.n	8001c5c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c30:	2201      	movs	r2, #1
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	08db      	lsrs	r3, r3, #3
 8001c46:	f003 0201 	and.w	r2, r3, #1
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d017      	beq.n	8001c98 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d123      	bne.n	8001cec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	08da      	lsrs	r2, r3, #3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3208      	adds	r2, #8
 8001cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	220f      	movs	r2, #15
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	08da      	lsrs	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3208      	adds	r2, #8
 8001ce6:	6939      	ldr	r1, [r7, #16]
 8001ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0203 	and.w	r2, r3, #3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80ac 	beq.w	8001e86 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2e:	4b5f      	ldr	r3, [pc, #380]	@ (8001eac <HAL_GPIO_Init+0x330>)
 8001d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d32:	4a5e      	ldr	r2, [pc, #376]	@ (8001eac <HAL_GPIO_Init+0x330>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d3a:	4b5c      	ldr	r3, [pc, #368]	@ (8001eac <HAL_GPIO_Init+0x330>)
 8001d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d46:	4a5a      	ldr	r2, [pc, #360]	@ (8001eb0 <HAL_GPIO_Init+0x334>)
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	089b      	lsrs	r3, r3, #2
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d70:	d025      	beq.n	8001dbe <HAL_GPIO_Init+0x242>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4f      	ldr	r2, [pc, #316]	@ (8001eb4 <HAL_GPIO_Init+0x338>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d01f      	beq.n	8001dba <HAL_GPIO_Init+0x23e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4e      	ldr	r2, [pc, #312]	@ (8001eb8 <HAL_GPIO_Init+0x33c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d019      	beq.n	8001db6 <HAL_GPIO_Init+0x23a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4d      	ldr	r2, [pc, #308]	@ (8001ebc <HAL_GPIO_Init+0x340>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_GPIO_Init+0x236>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4c      	ldr	r2, [pc, #304]	@ (8001ec0 <HAL_GPIO_Init+0x344>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00d      	beq.n	8001dae <HAL_GPIO_Init+0x232>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4b      	ldr	r2, [pc, #300]	@ (8001ec4 <HAL_GPIO_Init+0x348>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d007      	beq.n	8001daa <HAL_GPIO_Init+0x22e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4a      	ldr	r2, [pc, #296]	@ (8001ec8 <HAL_GPIO_Init+0x34c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d101      	bne.n	8001da6 <HAL_GPIO_Init+0x22a>
 8001da2:	2306      	movs	r3, #6
 8001da4:	e00c      	b.n	8001dc0 <HAL_GPIO_Init+0x244>
 8001da6:	2307      	movs	r3, #7
 8001da8:	e00a      	b.n	8001dc0 <HAL_GPIO_Init+0x244>
 8001daa:	2305      	movs	r3, #5
 8001dac:	e008      	b.n	8001dc0 <HAL_GPIO_Init+0x244>
 8001dae:	2304      	movs	r3, #4
 8001db0:	e006      	b.n	8001dc0 <HAL_GPIO_Init+0x244>
 8001db2:	2303      	movs	r3, #3
 8001db4:	e004      	b.n	8001dc0 <HAL_GPIO_Init+0x244>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e002      	b.n	8001dc0 <HAL_GPIO_Init+0x244>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <HAL_GPIO_Init+0x244>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	f002 0203 	and.w	r2, r2, #3
 8001dc6:	0092      	lsls	r2, r2, #2
 8001dc8:	4093      	lsls	r3, r2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dd0:	4937      	ldr	r1, [pc, #220]	@ (8001eb0 <HAL_GPIO_Init+0x334>)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dde:	4b3b      	ldr	r3, [pc, #236]	@ (8001ecc <HAL_GPIO_Init+0x350>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e02:	4a32      	ldr	r2, [pc, #200]	@ (8001ecc <HAL_GPIO_Init+0x350>)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e08:	4b30      	ldr	r3, [pc, #192]	@ (8001ecc <HAL_GPIO_Init+0x350>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e2c:	4a27      	ldr	r2, [pc, #156]	@ (8001ecc <HAL_GPIO_Init+0x350>)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e32:	4b26      	ldr	r3, [pc, #152]	@ (8001ecc <HAL_GPIO_Init+0x350>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e56:	4a1d      	ldr	r2, [pc, #116]	@ (8001ecc <HAL_GPIO_Init+0x350>)
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ecc <HAL_GPIO_Init+0x350>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e80:	4a12      	ldr	r2, [pc, #72]	@ (8001ecc <HAL_GPIO_Init+0x350>)
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa22 f303 	lsr.w	r3, r2, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f47f ae78 	bne.w	8001b8c <HAL_GPIO_Init+0x10>
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	371c      	adds	r7, #28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40010000 	.word	0x40010000
 8001eb4:	48000400 	.word	0x48000400
 8001eb8:	48000800 	.word	0x48000800
 8001ebc:	48000c00 	.word	0x48000c00
 8001ec0:	48001000 	.word	0x48001000
 8001ec4:	48001400 	.word	0x48001400
 8001ec8:	48001800 	.word	0x48001800
 8001ecc:	40010400 	.word	0x40010400

08001ed0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	887b      	ldrh	r3, [r7, #2]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	e001      	b.n	8001ef2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f10:	787b      	ldrb	r3, [r7, #1]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f16:	887a      	ldrh	r2, [r7, #2]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f1c:	e002      	b.n	8001f24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f3a:	4b08      	ldr	r3, [pc, #32]	@ (8001f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d006      	beq.n	8001f54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f46:	4a05      	ldr	r2, [pc, #20]	@ (8001f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 f806 	bl	8001f60 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40010400 	.word	0x40010400

08001f60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f7c:	4b04      	ldr	r3, [pc, #16]	@ (8001f90 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40007000 	.word	0x40007000

08001f94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fa2:	d130      	bne.n	8002006 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa4:	4b23      	ldr	r3, [pc, #140]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fb0:	d038      	beq.n	8002024 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fb2:	4b20      	ldr	r3, [pc, #128]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fba:	4a1e      	ldr	r2, [pc, #120]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8002038 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2232      	movs	r2, #50	@ 0x32
 8001fc8:	fb02 f303 	mul.w	r3, r2, r3
 8001fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800203c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	0c9b      	lsrs	r3, r3, #18
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fd8:	e002      	b.n	8001fe0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fe0:	4b14      	ldr	r3, [pc, #80]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fec:	d102      	bne.n	8001ff4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f2      	bne.n	8001fda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ffc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002000:	d110      	bne.n	8002024 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e00f      	b.n	8002026 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002006:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800200e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002012:	d007      	beq.n	8002024 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002014:	4b07      	ldr	r3, [pc, #28]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800201c:	4a05      	ldr	r2, [pc, #20]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002022:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40007000 	.word	0x40007000
 8002038:	20000154 	.word	0x20000154
 800203c:	431bde83 	.word	0x431bde83

08002040 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e3ca      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002052:	4b97      	ldr	r3, [pc, #604]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800205c:	4b94      	ldr	r3, [pc, #592]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0310 	and.w	r3, r3, #16
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 80e4 	beq.w	800223c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d007      	beq.n	800208a <HAL_RCC_OscConfig+0x4a>
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	2b0c      	cmp	r3, #12
 800207e:	f040 808b 	bne.w	8002198 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2b01      	cmp	r3, #1
 8002086:	f040 8087 	bne.w	8002198 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800208a:	4b89      	ldr	r3, [pc, #548]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d005      	beq.n	80020a2 <HAL_RCC_OscConfig+0x62>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e3a2      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1a      	ldr	r2, [r3, #32]
 80020a6:	4b82      	ldr	r3, [pc, #520]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d004      	beq.n	80020bc <HAL_RCC_OscConfig+0x7c>
 80020b2:	4b7f      	ldr	r3, [pc, #508]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020ba:	e005      	b.n	80020c8 <HAL_RCC_OscConfig+0x88>
 80020bc:	4b7c      	ldr	r3, [pc, #496]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020c2:	091b      	lsrs	r3, r3, #4
 80020c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d223      	bcs.n	8002114 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 fd1d 	bl	8002b10 <RCC_SetFlashLatencyFromMSIRange>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e383      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020e0:	4b73      	ldr	r3, [pc, #460]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a72      	ldr	r2, [pc, #456]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020e6:	f043 0308 	orr.w	r3, r3, #8
 80020ea:	6013      	str	r3, [r2, #0]
 80020ec:	4b70      	ldr	r3, [pc, #448]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	496d      	ldr	r1, [pc, #436]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020fe:	4b6c      	ldr	r3, [pc, #432]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	4968      	ldr	r1, [pc, #416]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 800210e:	4313      	orrs	r3, r2
 8002110:	604b      	str	r3, [r1, #4]
 8002112:	e025      	b.n	8002160 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002114:	4b66      	ldr	r3, [pc, #408]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a65      	ldr	r2, [pc, #404]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 800211a:	f043 0308 	orr.w	r3, r3, #8
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	4b63      	ldr	r3, [pc, #396]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	4960      	ldr	r1, [pc, #384]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002132:	4b5f      	ldr	r3, [pc, #380]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	495b      	ldr	r1, [pc, #364]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002142:	4313      	orrs	r3, r2
 8002144:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d109      	bne.n	8002160 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	4618      	mov	r0, r3
 8002152:	f000 fcdd 	bl	8002b10 <RCC_SetFlashLatencyFromMSIRange>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e343      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002160:	f000 fc4a 	bl	80029f8 <HAL_RCC_GetSysClockFreq>
 8002164:	4602      	mov	r2, r0
 8002166:	4b52      	ldr	r3, [pc, #328]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	091b      	lsrs	r3, r3, #4
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	4950      	ldr	r1, [pc, #320]	@ (80022b4 <HAL_RCC_OscConfig+0x274>)
 8002172:	5ccb      	ldrb	r3, [r1, r3]
 8002174:	f003 031f 	and.w	r3, r3, #31
 8002178:	fa22 f303 	lsr.w	r3, r2, r3
 800217c:	4a4e      	ldr	r2, [pc, #312]	@ (80022b8 <HAL_RCC_OscConfig+0x278>)
 800217e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002180:	4b4e      	ldr	r3, [pc, #312]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fb67 	bl	8001858 <HAL_InitTick>
 800218a:	4603      	mov	r3, r0
 800218c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d052      	beq.n	800223a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	e327      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d032      	beq.n	8002206 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021a0:	4b43      	ldr	r3, [pc, #268]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a42      	ldr	r2, [pc, #264]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ac:	f7ff fba4 	bl	80018f8 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021b4:	f7ff fba0 	bl	80018f8 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e310      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021c6:	4b3a      	ldr	r3, [pc, #232]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021d2:	4b37      	ldr	r3, [pc, #220]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a36      	ldr	r2, [pc, #216]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021d8:	f043 0308 	orr.w	r3, r3, #8
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	4b34      	ldr	r3, [pc, #208]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	4931      	ldr	r1, [pc, #196]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f0:	4b2f      	ldr	r3, [pc, #188]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	021b      	lsls	r3, r3, #8
 80021fe:	492c      	ldr	r1, [pc, #176]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
 8002204:	e01a      	b.n	800223c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002206:	4b2a      	ldr	r3, [pc, #168]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a29      	ldr	r2, [pc, #164]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 800220c:	f023 0301 	bic.w	r3, r3, #1
 8002210:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002212:	f7ff fb71 	bl	80018f8 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800221a:	f7ff fb6d 	bl	80018f8 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e2dd      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800222c:	4b20      	ldr	r3, [pc, #128]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f0      	bne.n	800221a <HAL_RCC_OscConfig+0x1da>
 8002238:	e000      	b.n	800223c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800223a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d074      	beq.n	8002332 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	2b08      	cmp	r3, #8
 800224c:	d005      	beq.n	800225a <HAL_RCC_OscConfig+0x21a>
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b0c      	cmp	r3, #12
 8002252:	d10e      	bne.n	8002272 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2b03      	cmp	r3, #3
 8002258:	d10b      	bne.n	8002272 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225a:	4b15      	ldr	r3, [pc, #84]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d064      	beq.n	8002330 <HAL_RCC_OscConfig+0x2f0>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d160      	bne.n	8002330 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e2ba      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800227a:	d106      	bne.n	800228a <HAL_RCC_OscConfig+0x24a>
 800227c:	4b0c      	ldr	r3, [pc, #48]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0b      	ldr	r2, [pc, #44]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002282:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	e026      	b.n	80022d8 <HAL_RCC_OscConfig+0x298>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002292:	d115      	bne.n	80022c0 <HAL_RCC_OscConfig+0x280>
 8002294:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a05      	ldr	r2, [pc, #20]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 800229a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	4b03      	ldr	r3, [pc, #12]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a02      	ldr	r2, [pc, #8]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 80022a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	e014      	b.n	80022d8 <HAL_RCC_OscConfig+0x298>
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08004af0 	.word	0x08004af0
 80022b8:	20000154 	.word	0x20000154
 80022bc:	20000158 	.word	0x20000158
 80022c0:	4ba0      	ldr	r3, [pc, #640]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a9f      	ldr	r2, [pc, #636]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 80022c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b9d      	ldr	r3, [pc, #628]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a9c      	ldr	r2, [pc, #624]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 80022d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d013      	beq.n	8002308 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7ff fb0a 	bl	80018f8 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e8:	f7ff fb06 	bl	80018f8 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	@ 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e276      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022fa:	4b92      	ldr	r3, [pc, #584]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x2a8>
 8002306:	e014      	b.n	8002332 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002308:	f7ff faf6 	bl	80018f8 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002310:	f7ff faf2 	bl	80018f8 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	@ 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e262      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002322:	4b88      	ldr	r3, [pc, #544]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x2d0>
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d060      	beq.n	8002400 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	2b04      	cmp	r3, #4
 8002342:	d005      	beq.n	8002350 <HAL_RCC_OscConfig+0x310>
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	2b0c      	cmp	r3, #12
 8002348:	d119      	bne.n	800237e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d116      	bne.n	800237e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002350:	4b7c      	ldr	r3, [pc, #496]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_OscConfig+0x328>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e23f      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002368:	4b76      	ldr	r3, [pc, #472]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	061b      	lsls	r3, r3, #24
 8002376:	4973      	ldr	r1, [pc, #460]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800237c:	e040      	b.n	8002400 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d023      	beq.n	80023ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002386:	4b6f      	ldr	r3, [pc, #444]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a6e      	ldr	r2, [pc, #440]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 800238c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7ff fab1 	bl	80018f8 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239a:	f7ff faad 	bl	80018f8 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e21d      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ac:	4b65      	ldr	r3, [pc, #404]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b8:	4b62      	ldr	r3, [pc, #392]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	061b      	lsls	r3, r3, #24
 80023c6:	495f      	ldr	r1, [pc, #380]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
 80023cc:	e018      	b.n	8002400 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a5c      	ldr	r2, [pc, #368]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 80023d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023da:	f7ff fa8d 	bl	80018f8 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e2:	f7ff fa89 	bl	80018f8 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e1f9      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023f4:	4b53      	ldr	r3, [pc, #332]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f0      	bne.n	80023e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d03c      	beq.n	8002486 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01c      	beq.n	800244e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002414:	4b4b      	ldr	r3, [pc, #300]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 8002416:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800241a:	4a4a      	ldr	r2, [pc, #296]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002424:	f7ff fa68 	bl	80018f8 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242c:	f7ff fa64 	bl	80018f8 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e1d4      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800243e:	4b41      	ldr	r3, [pc, #260]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 8002440:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ef      	beq.n	800242c <HAL_RCC_OscConfig+0x3ec>
 800244c:	e01b      	b.n	8002486 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800244e:	4b3d      	ldr	r3, [pc, #244]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 8002450:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002454:	4a3b      	ldr	r2, [pc, #236]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 8002456:	f023 0301 	bic.w	r3, r3, #1
 800245a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245e:	f7ff fa4b 	bl	80018f8 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002466:	f7ff fa47 	bl	80018f8 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e1b7      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002478:	4b32      	ldr	r3, [pc, #200]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 800247a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1ef      	bne.n	8002466 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80a6 	beq.w	80025e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002494:	2300      	movs	r3, #0
 8002496:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002498:	4b2a      	ldr	r3, [pc, #168]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 800249a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10d      	bne.n	80024c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a4:	4b27      	ldr	r3, [pc, #156]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 80024a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a8:	4a26      	ldr	r2, [pc, #152]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 80024aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80024b0:	4b24      	ldr	r3, [pc, #144]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 80024b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024bc:	2301      	movs	r3, #1
 80024be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c0:	4b21      	ldr	r3, [pc, #132]	@ (8002548 <HAL_RCC_OscConfig+0x508>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d118      	bne.n	80024fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002548 <HAL_RCC_OscConfig+0x508>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002548 <HAL_RCC_OscConfig+0x508>)
 80024d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d8:	f7ff fa0e 	bl	80018f8 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e0:	f7ff fa0a 	bl	80018f8 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e17a      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f2:	4b15      	ldr	r3, [pc, #84]	@ (8002548 <HAL_RCC_OscConfig+0x508>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d108      	bne.n	8002518 <HAL_RCC_OscConfig+0x4d8>
 8002506:	4b0f      	ldr	r3, [pc, #60]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800250c:	4a0d      	ldr	r2, [pc, #52]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002516:	e029      	b.n	800256c <HAL_RCC_OscConfig+0x52c>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b05      	cmp	r3, #5
 800251e:	d115      	bne.n	800254c <HAL_RCC_OscConfig+0x50c>
 8002520:	4b08      	ldr	r3, [pc, #32]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002526:	4a07      	ldr	r2, [pc, #28]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002530:	4b04      	ldr	r3, [pc, #16]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 8002532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002536:	4a03      	ldr	r2, [pc, #12]	@ (8002544 <HAL_RCC_OscConfig+0x504>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002540:	e014      	b.n	800256c <HAL_RCC_OscConfig+0x52c>
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000
 8002548:	40007000 	.word	0x40007000
 800254c:	4b9c      	ldr	r3, [pc, #624]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 800254e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002552:	4a9b      	ldr	r2, [pc, #620]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800255c:	4b98      	ldr	r3, [pc, #608]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002562:	4a97      	ldr	r2, [pc, #604]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 8002564:	f023 0304 	bic.w	r3, r3, #4
 8002568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d016      	beq.n	80025a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002574:	f7ff f9c0 	bl	80018f8 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257a:	e00a      	b.n	8002592 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7ff f9bc 	bl	80018f8 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e12a      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002592:	4b8b      	ldr	r3, [pc, #556]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0ed      	beq.n	800257c <HAL_RCC_OscConfig+0x53c>
 80025a0:	e015      	b.n	80025ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a2:	f7ff f9a9 	bl	80018f8 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025a8:	e00a      	b.n	80025c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025aa:	f7ff f9a5 	bl	80018f8 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e113      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025c0:	4b7f      	ldr	r3, [pc, #508]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 80025c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1ed      	bne.n	80025aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ce:	7ffb      	ldrb	r3, [r7, #31]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d105      	bne.n	80025e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d4:	4b7a      	ldr	r3, [pc, #488]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 80025d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d8:	4a79      	ldr	r2, [pc, #484]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 80025da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025de:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80fe 	beq.w	80027e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	f040 80d0 	bne.w	8002794 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025f4:	4b72      	ldr	r3, [pc, #456]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f003 0203 	and.w	r2, r3, #3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002604:	429a      	cmp	r2, r3
 8002606:	d130      	bne.n	800266a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002612:	3b01      	subs	r3, #1
 8002614:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d127      	bne.n	800266a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002624:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d11f      	bne.n	800266a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002634:	2a07      	cmp	r2, #7
 8002636:	bf14      	ite	ne
 8002638:	2201      	movne	r2, #1
 800263a:	2200      	moveq	r2, #0
 800263c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800263e:	4293      	cmp	r3, r2
 8002640:	d113      	bne.n	800266a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800264c:	085b      	lsrs	r3, r3, #1
 800264e:	3b01      	subs	r3, #1
 8002650:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d109      	bne.n	800266a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002660:	085b      	lsrs	r3, r3, #1
 8002662:	3b01      	subs	r3, #1
 8002664:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002666:	429a      	cmp	r2, r3
 8002668:	d06e      	beq.n	8002748 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	2b0c      	cmp	r3, #12
 800266e:	d069      	beq.n	8002744 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002670:	4b53      	ldr	r3, [pc, #332]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d105      	bne.n	8002688 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800267c:	4b50      	ldr	r3, [pc, #320]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0ad      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800268c:	4b4c      	ldr	r3, [pc, #304]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a4b      	ldr	r2, [pc, #300]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 8002692:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002696:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002698:	f7ff f92e 	bl	80018f8 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a0:	f7ff f92a 	bl	80018f8 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e09a      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b2:	4b43      	ldr	r3, [pc, #268]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026be:	4b40      	ldr	r3, [pc, #256]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	4b40      	ldr	r3, [pc, #256]	@ (80027c4 <HAL_RCC_OscConfig+0x784>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026ce:	3a01      	subs	r2, #1
 80026d0:	0112      	lsls	r2, r2, #4
 80026d2:	4311      	orrs	r1, r2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026d8:	0212      	lsls	r2, r2, #8
 80026da:	4311      	orrs	r1, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026e0:	0852      	lsrs	r2, r2, #1
 80026e2:	3a01      	subs	r2, #1
 80026e4:	0552      	lsls	r2, r2, #21
 80026e6:	4311      	orrs	r1, r2
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026ec:	0852      	lsrs	r2, r2, #1
 80026ee:	3a01      	subs	r2, #1
 80026f0:	0652      	lsls	r2, r2, #25
 80026f2:	4311      	orrs	r1, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026f8:	0912      	lsrs	r2, r2, #4
 80026fa:	0452      	lsls	r2, r2, #17
 80026fc:	430a      	orrs	r2, r1
 80026fe:	4930      	ldr	r1, [pc, #192]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 8002700:	4313      	orrs	r3, r2
 8002702:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002704:	4b2e      	ldr	r3, [pc, #184]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a2d      	ldr	r2, [pc, #180]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 800270a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800270e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002710:	4b2b      	ldr	r3, [pc, #172]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4a2a      	ldr	r2, [pc, #168]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 8002716:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800271a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800271c:	f7ff f8ec 	bl	80018f8 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002724:	f7ff f8e8 	bl	80018f8 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e058      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002736:	4b22      	ldr	r3, [pc, #136]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002742:	e050      	b.n	80027e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e04f      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002748:	4b1d      	ldr	r3, [pc, #116]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d148      	bne.n	80027e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002754:	4b1a      	ldr	r3, [pc, #104]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a19      	ldr	r2, [pc, #100]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 800275a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800275e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002760:	4b17      	ldr	r3, [pc, #92]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4a16      	ldr	r2, [pc, #88]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 8002766:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800276a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800276c:	f7ff f8c4 	bl	80018f8 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002774:	f7ff f8c0 	bl	80018f8 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e030      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002786:	4b0e      	ldr	r3, [pc, #56]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x734>
 8002792:	e028      	b.n	80027e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	2b0c      	cmp	r3, #12
 8002798:	d023      	beq.n	80027e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279a:	4b09      	ldr	r3, [pc, #36]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a08      	ldr	r2, [pc, #32]	@ (80027c0 <HAL_RCC_OscConfig+0x780>)
 80027a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a6:	f7ff f8a7 	bl	80018f8 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ac:	e00c      	b.n	80027c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ae:	f7ff f8a3 	bl	80018f8 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d905      	bls.n	80027c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e013      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
 80027c0:	40021000 	.word	0x40021000
 80027c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c8:	4b09      	ldr	r3, [pc, #36]	@ (80027f0 <HAL_RCC_OscConfig+0x7b0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1ec      	bne.n	80027ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027d4:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <HAL_RCC_OscConfig+0x7b0>)
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	4905      	ldr	r1, [pc, #20]	@ (80027f0 <HAL_RCC_OscConfig+0x7b0>)
 80027da:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <HAL_RCC_OscConfig+0x7b4>)
 80027dc:	4013      	ands	r3, r2
 80027de:	60cb      	str	r3, [r1, #12]
 80027e0:	e001      	b.n	80027e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3720      	adds	r7, #32
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40021000 	.word	0x40021000
 80027f4:	feeefffc 	.word	0xfeeefffc

080027f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0e7      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800280c:	4b75      	ldr	r3, [pc, #468]	@ (80029e4 <HAL_RCC_ClockConfig+0x1ec>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d910      	bls.n	800283c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281a:	4b72      	ldr	r3, [pc, #456]	@ (80029e4 <HAL_RCC_ClockConfig+0x1ec>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 0207 	bic.w	r2, r3, #7
 8002822:	4970      	ldr	r1, [pc, #448]	@ (80029e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b6e      	ldr	r3, [pc, #440]	@ (80029e4 <HAL_RCC_ClockConfig+0x1ec>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0cf      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d010      	beq.n	800286a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	4b66      	ldr	r3, [pc, #408]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002854:	429a      	cmp	r2, r3
 8002856:	d908      	bls.n	800286a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002858:	4b63      	ldr	r3, [pc, #396]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4960      	ldr	r1, [pc, #384]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d04c      	beq.n	8002910 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b03      	cmp	r3, #3
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287e:	4b5a      	ldr	r3, [pc, #360]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d121      	bne.n	80028ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0a6      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d107      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002896:	4b54      	ldr	r3, [pc, #336]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d115      	bne.n	80028ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e09a      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d107      	bne.n	80028be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ae:	4b4e      	ldr	r3, [pc, #312]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d109      	bne.n	80028ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e08e      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028be:	4b4a      	ldr	r3, [pc, #296]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e086      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028ce:	4b46      	ldr	r3, [pc, #280]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f023 0203 	bic.w	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4943      	ldr	r1, [pc, #268]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e0:	f7ff f80a 	bl	80018f8 <HAL_GetTick>
 80028e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	e00a      	b.n	80028fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e8:	f7ff f806 	bl	80018f8 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e06e      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fe:	4b3a      	ldr	r3, [pc, #232]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 020c 	and.w	r2, r3, #12
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	429a      	cmp	r2, r3
 800290e:	d1eb      	bne.n	80028e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d010      	beq.n	800293e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	4b31      	ldr	r3, [pc, #196]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002928:	429a      	cmp	r2, r3
 800292a:	d208      	bcs.n	800293e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800292c:	4b2e      	ldr	r3, [pc, #184]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	492b      	ldr	r1, [pc, #172]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800293e:	4b29      	ldr	r3, [pc, #164]	@ (80029e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d210      	bcs.n	800296e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294c:	4b25      	ldr	r3, [pc, #148]	@ (80029e4 <HAL_RCC_ClockConfig+0x1ec>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f023 0207 	bic.w	r2, r3, #7
 8002954:	4923      	ldr	r1, [pc, #140]	@ (80029e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	4313      	orrs	r3, r2
 800295a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295c:	4b21      	ldr	r3, [pc, #132]	@ (80029e4 <HAL_RCC_ClockConfig+0x1ec>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d001      	beq.n	800296e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e036      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b00      	cmp	r3, #0
 8002978:	d008      	beq.n	800298c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800297a:	4b1b      	ldr	r3, [pc, #108]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	4918      	ldr	r1, [pc, #96]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002988:	4313      	orrs	r3, r2
 800298a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d009      	beq.n	80029ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002998:	4b13      	ldr	r3, [pc, #76]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4910      	ldr	r1, [pc, #64]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029ac:	f000 f824 	bl	80029f8 <HAL_RCC_GetSysClockFreq>
 80029b0:	4602      	mov	r2, r0
 80029b2:	4b0d      	ldr	r3, [pc, #52]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	091b      	lsrs	r3, r3, #4
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	490b      	ldr	r1, [pc, #44]	@ (80029ec <HAL_RCC_ClockConfig+0x1f4>)
 80029be:	5ccb      	ldrb	r3, [r1, r3]
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	fa22 f303 	lsr.w	r3, r2, r3
 80029c8:	4a09      	ldr	r2, [pc, #36]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f8>)
 80029ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029cc:	4b09      	ldr	r3, [pc, #36]	@ (80029f4 <HAL_RCC_ClockConfig+0x1fc>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fe ff41 	bl	8001858 <HAL_InitTick>
 80029d6:	4603      	mov	r3, r0
 80029d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80029da:	7afb      	ldrb	r3, [r7, #11]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40022000 	.word	0x40022000
 80029e8:	40021000 	.word	0x40021000
 80029ec:	08004af0 	.word	0x08004af0
 80029f0:	20000154 	.word	0x20000154
 80029f4:	20000158 	.word	0x20000158

080029f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b089      	sub	sp, #36	@ 0x24
 80029fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a06:	4b3e      	ldr	r3, [pc, #248]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a10:	4b3b      	ldr	r3, [pc, #236]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_RCC_GetSysClockFreq+0x34>
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	2b0c      	cmp	r3, #12
 8002a24:	d121      	bne.n	8002a6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d11e      	bne.n	8002a6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a2c:	4b34      	ldr	r3, [pc, #208]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d107      	bne.n	8002a48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a38:	4b31      	ldr	r3, [pc, #196]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a3e:	0a1b      	lsrs	r3, r3, #8
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	e005      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a48:	4b2d      	ldr	r3, [pc, #180]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a54:	4a2b      	ldr	r2, [pc, #172]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10d      	bne.n	8002a80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a68:	e00a      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d102      	bne.n	8002a76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a70:	4b25      	ldr	r3, [pc, #148]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a72:	61bb      	str	r3, [r7, #24]
 8002a74:	e004      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d101      	bne.n	8002a80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a7c:	4b23      	ldr	r3, [pc, #140]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x114>)
 8002a7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	2b0c      	cmp	r3, #12
 8002a84:	d134      	bne.n	8002af0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a86:	4b1e      	ldr	r3, [pc, #120]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d003      	beq.n	8002a9e <HAL_RCC_GetSysClockFreq+0xa6>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d003      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0xac>
 8002a9c:	e005      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x110>)
 8002aa0:	617b      	str	r3, [r7, #20]
      break;
 8002aa2:	e005      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002aa4:	4b19      	ldr	r3, [pc, #100]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x114>)
 8002aa6:	617b      	str	r3, [r7, #20]
      break;
 8002aa8:	e002      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	617b      	str	r3, [r7, #20]
      break;
 8002aae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ab0:	4b13      	ldr	r3, [pc, #76]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	3301      	adds	r3, #1
 8002abc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002abe:	4b10      	ldr	r3, [pc, #64]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	fb03 f202 	mul.w	r2, r3, r2
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	0e5b      	lsrs	r3, r3, #25
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002af0:	69bb      	ldr	r3, [r7, #24]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3724      	adds	r7, #36	@ 0x24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000
 8002b04:	08004b00 	.word	0x08004b00
 8002b08:	00f42400 	.word	0x00f42400
 8002b0c:	007a1200 	.word	0x007a1200

08002b10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b28:	f7ff fa26 	bl	8001f78 <HAL_PWREx_GetVoltageRange>
 8002b2c:	6178      	str	r0, [r7, #20]
 8002b2e:	e014      	b.n	8002b5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b30:	4b25      	ldr	r3, [pc, #148]	@ (8002bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b34:	4a24      	ldr	r2, [pc, #144]	@ (8002bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b3c:	4b22      	ldr	r3, [pc, #136]	@ (8002bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b48:	f7ff fa16 	bl	8001f78 <HAL_PWREx_GetVoltageRange>
 8002b4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b52:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b58:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b60:	d10b      	bne.n	8002b7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b80      	cmp	r3, #128	@ 0x80
 8002b66:	d919      	bls.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b6c:	d902      	bls.n	8002b74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b6e:	2302      	movs	r3, #2
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	e013      	b.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b74:	2301      	movs	r3, #1
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	e010      	b.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b80      	cmp	r3, #128	@ 0x80
 8002b7e:	d902      	bls.n	8002b86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b80:	2303      	movs	r3, #3
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	e00a      	b.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b80      	cmp	r3, #128	@ 0x80
 8002b8a:	d102      	bne.n	8002b92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	e004      	b.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b70      	cmp	r3, #112	@ 0x70
 8002b96:	d101      	bne.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b98:	2301      	movs	r3, #1
 8002b9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 0207 	bic.w	r2, r3, #7
 8002ba4:	4909      	ldr	r1, [pc, #36]	@ (8002bcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bac:	4b07      	ldr	r3, [pc, #28]	@ (8002bcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d001      	beq.n	8002bbe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40022000 	.word	0x40022000

08002bd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e095      	b.n	8002d0e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d108      	bne.n	8002bfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bf2:	d009      	beq.n	8002c08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	61da      	str	r2, [r3, #28]
 8002bfa:	e005      	b.n	8002c08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fe fbfa 	bl	800141c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c48:	d902      	bls.n	8002c50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	e002      	b.n	8002c56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002c5e:	d007      	beq.n	8002c70 <HAL_SPI_Init+0xa0>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c68:	d002      	beq.n	8002c70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c80:	431a      	orrs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb2:	ea42 0103 	orr.w	r1, r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	0c1b      	lsrs	r3, r3, #16
 8002ccc:	f003 0204 	and.w	r2, r3, #4
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002cec:	ea42 0103 	orr.w	r1, r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b088      	sub	sp, #32
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	603b      	str	r3, [r7, #0]
 8002d22:	4613      	mov	r3, r2
 8002d24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_SPI_Transmit+0x22>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e15f      	b.n	8002ff8 <HAL_SPI_Transmit+0x2e2>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d40:	f7fe fdda 	bl	80018f8 <HAL_GetTick>
 8002d44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d002      	beq.n	8002d5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d56:	2302      	movs	r3, #2
 8002d58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d5a:	e148      	b.n	8002fee <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <HAL_SPI_Transmit+0x52>
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d102      	bne.n	8002d6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d6c:	e13f      	b.n	8002fee <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2203      	movs	r2, #3
 8002d72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	88fa      	ldrh	r2, [r7, #6]
 8002d86:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	88fa      	ldrh	r2, [r7, #6]
 8002d8c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002db8:	d10f      	bne.n	8002dda <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de4:	2b40      	cmp	r3, #64	@ 0x40
 8002de6:	d007      	beq.n	8002df8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002df6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e00:	d94f      	bls.n	8002ea2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <HAL_SPI_Transmit+0xfa>
 8002e0a:	8afb      	ldrh	r3, [r7, #22]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d142      	bne.n	8002e96 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e14:	881a      	ldrh	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e20:	1c9a      	adds	r2, r3, #2
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e34:	e02f      	b.n	8002e96 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d112      	bne.n	8002e6a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e48:	881a      	ldrh	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e54:	1c9a      	adds	r2, r3, #2
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e68:	e015      	b.n	8002e96 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e6a:	f7fe fd45 	bl	80018f8 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d803      	bhi.n	8002e82 <HAL_SPI_Transmit+0x16c>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e80:	d102      	bne.n	8002e88 <HAL_SPI_Transmit+0x172>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d106      	bne.n	8002e96 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002e94:	e0ab      	b.n	8002fee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1ca      	bne.n	8002e36 <HAL_SPI_Transmit+0x120>
 8002ea0:	e080      	b.n	8002fa4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <HAL_SPI_Transmit+0x19a>
 8002eaa:	8afb      	ldrh	r3, [r7, #22]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d174      	bne.n	8002f9a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d912      	bls.n	8002ee0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ebe:	881a      	ldrh	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eca:	1c9a      	adds	r2, r3, #2
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	3b02      	subs	r3, #2
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ede:	e05c      	b.n	8002f9a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	330c      	adds	r3, #12
 8002eea:	7812      	ldrb	r2, [r2, #0]
 8002eec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002f06:	e048      	b.n	8002f9a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d12b      	bne.n	8002f6e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d912      	bls.n	8002f46 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f24:	881a      	ldrh	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f30:	1c9a      	adds	r2, r3, #2
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b02      	subs	r3, #2
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f44:	e029      	b.n	8002f9a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	330c      	adds	r3, #12
 8002f50:	7812      	ldrb	r2, [r2, #0]
 8002f52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f6c:	e015      	b.n	8002f9a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f6e:	f7fe fcc3 	bl	80018f8 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d803      	bhi.n	8002f86 <HAL_SPI_Transmit+0x270>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f84:	d102      	bne.n	8002f8c <HAL_SPI_Transmit+0x276>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d106      	bne.n	8002f9a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002f98:	e029      	b.n	8002fee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1b1      	bne.n	8002f08 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	6839      	ldr	r1, [r7, #0]
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 fb69 	bl	8003680 <SPI_EndRxTxTransaction>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10a      	bne.n	8002fd8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	77fb      	strb	r3, [r7, #31]
 8002fe4:	e003      	b.n	8002fee <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002ff6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3720      	adds	r7, #32
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08a      	sub	sp, #40	@ 0x28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
 800300c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800300e:	2301      	movs	r3, #1
 8003010:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_SPI_TransmitReceive+0x26>
 8003022:	2302      	movs	r3, #2
 8003024:	e20a      	b.n	800343c <HAL_SPI_TransmitReceive+0x43c>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800302e:	f7fe fc63 	bl	80018f8 <HAL_GetTick>
 8003032:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800303a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003042:	887b      	ldrh	r3, [r7, #2]
 8003044:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003046:	887b      	ldrh	r3, [r7, #2]
 8003048:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800304a:	7efb      	ldrb	r3, [r7, #27]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d00e      	beq.n	800306e <HAL_SPI_TransmitReceive+0x6e>
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003056:	d106      	bne.n	8003066 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d102      	bne.n	8003066 <HAL_SPI_TransmitReceive+0x66>
 8003060:	7efb      	ldrb	r3, [r7, #27]
 8003062:	2b04      	cmp	r3, #4
 8003064:	d003      	beq.n	800306e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003066:	2302      	movs	r3, #2
 8003068:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800306c:	e1e0      	b.n	8003430 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_SPI_TransmitReceive+0x80>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_SPI_TransmitReceive+0x80>
 800307a:	887b      	ldrh	r3, [r7, #2]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d103      	bne.n	8003088 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003086:	e1d3      	b.n	8003430 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b04      	cmp	r3, #4
 8003092:	d003      	beq.n	800309c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2205      	movs	r2, #5
 8003098:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	887a      	ldrh	r2, [r7, #2]
 80030ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	887a      	ldrh	r2, [r7, #2]
 80030c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	887a      	ldrh	r2, [r7, #2]
 80030c8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030de:	d802      	bhi.n	80030e6 <HAL_SPI_TransmitReceive+0xe6>
 80030e0:	8a3b      	ldrh	r3, [r7, #16]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d908      	bls.n	80030f8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	e007      	b.n	8003108 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003106:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003112:	2b40      	cmp	r3, #64	@ 0x40
 8003114:	d007      	beq.n	8003126 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003124:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800312e:	f240 8081 	bls.w	8003234 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <HAL_SPI_TransmitReceive+0x140>
 800313a:	8a7b      	ldrh	r3, [r7, #18]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d16d      	bne.n	800321c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003144:	881a      	ldrh	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003150:	1c9a      	adds	r2, r3, #2
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800315a:	b29b      	uxth	r3, r3
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003164:	e05a      	b.n	800321c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b02      	cmp	r3, #2
 8003172:	d11b      	bne.n	80031ac <HAL_SPI_TransmitReceive+0x1ac>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d016      	beq.n	80031ac <HAL_SPI_TransmitReceive+0x1ac>
 800317e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003180:	2b01      	cmp	r3, #1
 8003182:	d113      	bne.n	80031ac <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003188:	881a      	ldrh	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003194:	1c9a      	adds	r2, r3, #2
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d11c      	bne.n	80031f4 <HAL_SPI_TransmitReceive+0x1f4>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d016      	beq.n	80031f4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d0:	b292      	uxth	r2, r2
 80031d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d8:	1c9a      	adds	r2, r3, #2
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031f0:	2301      	movs	r3, #1
 80031f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031f4:	f7fe fb80 	bl	80018f8 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003200:	429a      	cmp	r2, r3
 8003202:	d80b      	bhi.n	800321c <HAL_SPI_TransmitReceive+0x21c>
 8003204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320a:	d007      	beq.n	800321c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800321a:	e109      	b.n	8003430 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d19f      	bne.n	8003166 <HAL_SPI_TransmitReceive+0x166>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800322c:	b29b      	uxth	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d199      	bne.n	8003166 <HAL_SPI_TransmitReceive+0x166>
 8003232:	e0e3      	b.n	80033fc <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_SPI_TransmitReceive+0x244>
 800323c:	8a7b      	ldrh	r3, [r7, #18]
 800323e:	2b01      	cmp	r3, #1
 8003240:	f040 80cf 	bne.w	80033e2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003248:	b29b      	uxth	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d912      	bls.n	8003274 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003252:	881a      	ldrh	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325e:	1c9a      	adds	r2, r3, #2
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003268:	b29b      	uxth	r3, r3
 800326a:	3b02      	subs	r3, #2
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003272:	e0b6      	b.n	80033e2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	330c      	adds	r3, #12
 800327e:	7812      	ldrb	r2, [r2, #0]
 8003280:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800329a:	e0a2      	b.n	80033e2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d134      	bne.n	8003314 <HAL_SPI_TransmitReceive+0x314>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d02f      	beq.n	8003314 <HAL_SPI_TransmitReceive+0x314>
 80032b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d12c      	bne.n	8003314 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032be:	b29b      	uxth	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d912      	bls.n	80032ea <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c8:	881a      	ldrh	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d4:	1c9a      	adds	r2, r3, #2
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b02      	subs	r3, #2
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032e8:	e012      	b.n	8003310 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	330c      	adds	r3, #12
 80032f4:	7812      	ldrb	r2, [r2, #0]
 80032f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b01      	cmp	r3, #1
 8003320:	d148      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x3b4>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d042      	beq.n	80033b4 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b01      	cmp	r3, #1
 8003338:	d923      	bls.n	8003382 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003344:	b292      	uxth	r2, r2
 8003346:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334c:	1c9a      	adds	r2, r3, #2
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b02      	subs	r3, #2
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b01      	cmp	r3, #1
 800336e:	d81f      	bhi.n	80033b0 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800337e:	605a      	str	r2, [r3, #4]
 8003380:	e016      	b.n	80033b0 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f103 020c 	add.w	r2, r3, #12
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338e:	7812      	ldrb	r2, [r2, #0]
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033b0:	2301      	movs	r3, #1
 80033b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033b4:	f7fe faa0 	bl	80018f8 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d803      	bhi.n	80033cc <HAL_SPI_TransmitReceive+0x3cc>
 80033c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ca:	d102      	bne.n	80033d2 <HAL_SPI_TransmitReceive+0x3d2>
 80033cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d107      	bne.n	80033e2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80033e0:	e026      	b.n	8003430 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f47f af57 	bne.w	800329c <HAL_SPI_TransmitReceive+0x29c>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f47f af50 	bne.w	800329c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 f93d 	bl	8003680 <SPI_EndRxTxTransaction>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2220      	movs	r2, #32
 8003416:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003426:	e003      	b.n	8003430 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003438:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800343c:	4618      	mov	r0, r3
 800343e:	3728      	adds	r7, #40	@ 0x28
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	4613      	mov	r3, r2
 8003452:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003454:	f7fe fa50 	bl	80018f8 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345c:	1a9b      	subs	r3, r3, r2
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	4413      	add	r3, r2
 8003462:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003464:	f7fe fa48 	bl	80018f8 <HAL_GetTick>
 8003468:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800346a:	4b39      	ldr	r3, [pc, #228]	@ (8003550 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	015b      	lsls	r3, r3, #5
 8003470:	0d1b      	lsrs	r3, r3, #20
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	fb02 f303 	mul.w	r3, r2, r3
 8003478:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800347a:	e054      	b.n	8003526 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003482:	d050      	beq.n	8003526 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003484:	f7fe fa38 	bl	80018f8 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	69fa      	ldr	r2, [r7, #28]
 8003490:	429a      	cmp	r2, r3
 8003492:	d902      	bls.n	800349a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d13d      	bne.n	8003516 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80034a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034b2:	d111      	bne.n	80034d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034bc:	d004      	beq.n	80034c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034c6:	d107      	bne.n	80034d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034e0:	d10f      	bne.n	8003502 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003500:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e017      	b.n	8003546 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	3b01      	subs	r3, #1
 8003524:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4013      	ands	r3, r2
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	429a      	cmp	r2, r3
 8003534:	bf0c      	ite	eq
 8003536:	2301      	moveq	r3, #1
 8003538:	2300      	movne	r3, #0
 800353a:	b2db      	uxtb	r3, r3
 800353c:	461a      	mov	r2, r3
 800353e:	79fb      	ldrb	r3, [r7, #7]
 8003540:	429a      	cmp	r2, r3
 8003542:	d19b      	bne.n	800347c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3720      	adds	r7, #32
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000154 	.word	0x20000154

08003554 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	@ 0x28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003566:	f7fe f9c7 	bl	80018f8 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	4413      	add	r3, r2
 8003574:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003576:	f7fe f9bf 	bl	80018f8 <HAL_GetTick>
 800357a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	330c      	adds	r3, #12
 8003582:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003584:	4b3d      	ldr	r3, [pc, #244]	@ (800367c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	00da      	lsls	r2, r3, #3
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	0d1b      	lsrs	r3, r3, #20
 8003594:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003596:	fb02 f303 	mul.w	r3, r2, r3
 800359a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800359c:	e060      	b.n	8003660 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80035a4:	d107      	bne.n	80035b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d104      	bne.n	80035b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80035b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035bc:	d050      	beq.n	8003660 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035be:	f7fe f99b 	bl	80018f8 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d902      	bls.n	80035d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80035ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d13d      	bne.n	8003650 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035ec:	d111      	bne.n	8003612 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035f6:	d004      	beq.n	8003602 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003600:	d107      	bne.n	8003612 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003610:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003616:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800361a:	d10f      	bne.n	800363c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800363a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e010      	b.n	8003672 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	3b01      	subs	r3, #1
 800365e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	4013      	ands	r3, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	429a      	cmp	r2, r3
 800366e:	d196      	bne.n	800359e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3728      	adds	r7, #40	@ 0x28
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000154 	.word	0x20000154

08003680 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af02      	add	r7, sp, #8
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2200      	movs	r2, #0
 8003694:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f7ff ff5b 	bl	8003554 <SPI_WaitFifoStateUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d007      	beq.n	80036b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a8:	f043 0220 	orr.w	r2, r3, #32
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e027      	b.n	8003704 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2200      	movs	r2, #0
 80036bc:	2180      	movs	r1, #128	@ 0x80
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f7ff fec0 	bl	8003444 <SPI_WaitFlagStateUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d007      	beq.n	80036da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ce:	f043 0220 	orr.w	r2, r3, #32
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e014      	b.n	8003704 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f7ff ff34 	bl	8003554 <SPI_WaitFifoStateUntilTimeout>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f6:	f043 0220 	orr.w	r2, r3, #32
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e000      	b.n	8003704 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <malloc>:
 800370c:	4b02      	ldr	r3, [pc, #8]	@ (8003718 <malloc+0xc>)
 800370e:	4601      	mov	r1, r0
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	f000 b82d 	b.w	8003770 <_malloc_r>
 8003716:	bf00      	nop
 8003718:	2000016c 	.word	0x2000016c

0800371c <free>:
 800371c:	4b02      	ldr	r3, [pc, #8]	@ (8003728 <free+0xc>)
 800371e:	4601      	mov	r1, r0
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	f000 bb75 	b.w	8003e10 <_free_r>
 8003726:	bf00      	nop
 8003728:	2000016c 	.word	0x2000016c

0800372c <sbrk_aligned>:
 800372c:	b570      	push	{r4, r5, r6, lr}
 800372e:	4e0f      	ldr	r6, [pc, #60]	@ (800376c <sbrk_aligned+0x40>)
 8003730:	460c      	mov	r4, r1
 8003732:	6831      	ldr	r1, [r6, #0]
 8003734:	4605      	mov	r5, r0
 8003736:	b911      	cbnz	r1, 800373e <sbrk_aligned+0x12>
 8003738:	f000 fb0c 	bl	8003d54 <_sbrk_r>
 800373c:	6030      	str	r0, [r6, #0]
 800373e:	4621      	mov	r1, r4
 8003740:	4628      	mov	r0, r5
 8003742:	f000 fb07 	bl	8003d54 <_sbrk_r>
 8003746:	1c43      	adds	r3, r0, #1
 8003748:	d103      	bne.n	8003752 <sbrk_aligned+0x26>
 800374a:	f04f 34ff 	mov.w	r4, #4294967295
 800374e:	4620      	mov	r0, r4
 8003750:	bd70      	pop	{r4, r5, r6, pc}
 8003752:	1cc4      	adds	r4, r0, #3
 8003754:	f024 0403 	bic.w	r4, r4, #3
 8003758:	42a0      	cmp	r0, r4
 800375a:	d0f8      	beq.n	800374e <sbrk_aligned+0x22>
 800375c:	1a21      	subs	r1, r4, r0
 800375e:	4628      	mov	r0, r5
 8003760:	f000 faf8 	bl	8003d54 <_sbrk_r>
 8003764:	3001      	adds	r0, #1
 8003766:	d1f2      	bne.n	800374e <sbrk_aligned+0x22>
 8003768:	e7ef      	b.n	800374a <sbrk_aligned+0x1e>
 800376a:	bf00      	nop
 800376c:	20000368 	.word	0x20000368

08003770 <_malloc_r>:
 8003770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003774:	1ccd      	adds	r5, r1, #3
 8003776:	f025 0503 	bic.w	r5, r5, #3
 800377a:	3508      	adds	r5, #8
 800377c:	2d0c      	cmp	r5, #12
 800377e:	bf38      	it	cc
 8003780:	250c      	movcc	r5, #12
 8003782:	2d00      	cmp	r5, #0
 8003784:	4606      	mov	r6, r0
 8003786:	db01      	blt.n	800378c <_malloc_r+0x1c>
 8003788:	42a9      	cmp	r1, r5
 800378a:	d904      	bls.n	8003796 <_malloc_r+0x26>
 800378c:	230c      	movs	r3, #12
 800378e:	6033      	str	r3, [r6, #0]
 8003790:	2000      	movs	r0, #0
 8003792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003796:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800386c <_malloc_r+0xfc>
 800379a:	f000 f869 	bl	8003870 <__malloc_lock>
 800379e:	f8d8 3000 	ldr.w	r3, [r8]
 80037a2:	461c      	mov	r4, r3
 80037a4:	bb44      	cbnz	r4, 80037f8 <_malloc_r+0x88>
 80037a6:	4629      	mov	r1, r5
 80037a8:	4630      	mov	r0, r6
 80037aa:	f7ff ffbf 	bl	800372c <sbrk_aligned>
 80037ae:	1c43      	adds	r3, r0, #1
 80037b0:	4604      	mov	r4, r0
 80037b2:	d158      	bne.n	8003866 <_malloc_r+0xf6>
 80037b4:	f8d8 4000 	ldr.w	r4, [r8]
 80037b8:	4627      	mov	r7, r4
 80037ba:	2f00      	cmp	r7, #0
 80037bc:	d143      	bne.n	8003846 <_malloc_r+0xd6>
 80037be:	2c00      	cmp	r4, #0
 80037c0:	d04b      	beq.n	800385a <_malloc_r+0xea>
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	4639      	mov	r1, r7
 80037c6:	4630      	mov	r0, r6
 80037c8:	eb04 0903 	add.w	r9, r4, r3
 80037cc:	f000 fac2 	bl	8003d54 <_sbrk_r>
 80037d0:	4581      	cmp	r9, r0
 80037d2:	d142      	bne.n	800385a <_malloc_r+0xea>
 80037d4:	6821      	ldr	r1, [r4, #0]
 80037d6:	1a6d      	subs	r5, r5, r1
 80037d8:	4629      	mov	r1, r5
 80037da:	4630      	mov	r0, r6
 80037dc:	f7ff ffa6 	bl	800372c <sbrk_aligned>
 80037e0:	3001      	adds	r0, #1
 80037e2:	d03a      	beq.n	800385a <_malloc_r+0xea>
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	442b      	add	r3, r5
 80037e8:	6023      	str	r3, [r4, #0]
 80037ea:	f8d8 3000 	ldr.w	r3, [r8]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	bb62      	cbnz	r2, 800384c <_malloc_r+0xdc>
 80037f2:	f8c8 7000 	str.w	r7, [r8]
 80037f6:	e00f      	b.n	8003818 <_malloc_r+0xa8>
 80037f8:	6822      	ldr	r2, [r4, #0]
 80037fa:	1b52      	subs	r2, r2, r5
 80037fc:	d420      	bmi.n	8003840 <_malloc_r+0xd0>
 80037fe:	2a0b      	cmp	r2, #11
 8003800:	d917      	bls.n	8003832 <_malloc_r+0xc2>
 8003802:	1961      	adds	r1, r4, r5
 8003804:	42a3      	cmp	r3, r4
 8003806:	6025      	str	r5, [r4, #0]
 8003808:	bf18      	it	ne
 800380a:	6059      	strne	r1, [r3, #4]
 800380c:	6863      	ldr	r3, [r4, #4]
 800380e:	bf08      	it	eq
 8003810:	f8c8 1000 	streq.w	r1, [r8]
 8003814:	5162      	str	r2, [r4, r5]
 8003816:	604b      	str	r3, [r1, #4]
 8003818:	4630      	mov	r0, r6
 800381a:	f000 f82f 	bl	800387c <__malloc_unlock>
 800381e:	f104 000b 	add.w	r0, r4, #11
 8003822:	1d23      	adds	r3, r4, #4
 8003824:	f020 0007 	bic.w	r0, r0, #7
 8003828:	1ac2      	subs	r2, r0, r3
 800382a:	bf1c      	itt	ne
 800382c:	1a1b      	subne	r3, r3, r0
 800382e:	50a3      	strne	r3, [r4, r2]
 8003830:	e7af      	b.n	8003792 <_malloc_r+0x22>
 8003832:	6862      	ldr	r2, [r4, #4]
 8003834:	42a3      	cmp	r3, r4
 8003836:	bf0c      	ite	eq
 8003838:	f8c8 2000 	streq.w	r2, [r8]
 800383c:	605a      	strne	r2, [r3, #4]
 800383e:	e7eb      	b.n	8003818 <_malloc_r+0xa8>
 8003840:	4623      	mov	r3, r4
 8003842:	6864      	ldr	r4, [r4, #4]
 8003844:	e7ae      	b.n	80037a4 <_malloc_r+0x34>
 8003846:	463c      	mov	r4, r7
 8003848:	687f      	ldr	r7, [r7, #4]
 800384a:	e7b6      	b.n	80037ba <_malloc_r+0x4a>
 800384c:	461a      	mov	r2, r3
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	42a3      	cmp	r3, r4
 8003852:	d1fb      	bne.n	800384c <_malloc_r+0xdc>
 8003854:	2300      	movs	r3, #0
 8003856:	6053      	str	r3, [r2, #4]
 8003858:	e7de      	b.n	8003818 <_malloc_r+0xa8>
 800385a:	230c      	movs	r3, #12
 800385c:	6033      	str	r3, [r6, #0]
 800385e:	4630      	mov	r0, r6
 8003860:	f000 f80c 	bl	800387c <__malloc_unlock>
 8003864:	e794      	b.n	8003790 <_malloc_r+0x20>
 8003866:	6005      	str	r5, [r0, #0]
 8003868:	e7d6      	b.n	8003818 <_malloc_r+0xa8>
 800386a:	bf00      	nop
 800386c:	2000036c 	.word	0x2000036c

08003870 <__malloc_lock>:
 8003870:	4801      	ldr	r0, [pc, #4]	@ (8003878 <__malloc_lock+0x8>)
 8003872:	f000 babc 	b.w	8003dee <__retarget_lock_acquire_recursive>
 8003876:	bf00      	nop
 8003878:	200004b0 	.word	0x200004b0

0800387c <__malloc_unlock>:
 800387c:	4801      	ldr	r0, [pc, #4]	@ (8003884 <__malloc_unlock+0x8>)
 800387e:	f000 bab7 	b.w	8003df0 <__retarget_lock_release_recursive>
 8003882:	bf00      	nop
 8003884:	200004b0 	.word	0x200004b0

08003888 <std>:
 8003888:	2300      	movs	r3, #0
 800388a:	b510      	push	{r4, lr}
 800388c:	4604      	mov	r4, r0
 800388e:	e9c0 3300 	strd	r3, r3, [r0]
 8003892:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003896:	6083      	str	r3, [r0, #8]
 8003898:	8181      	strh	r1, [r0, #12]
 800389a:	6643      	str	r3, [r0, #100]	@ 0x64
 800389c:	81c2      	strh	r2, [r0, #14]
 800389e:	6183      	str	r3, [r0, #24]
 80038a0:	4619      	mov	r1, r3
 80038a2:	2208      	movs	r2, #8
 80038a4:	305c      	adds	r0, #92	@ 0x5c
 80038a6:	f000 fa19 	bl	8003cdc <memset>
 80038aa:	4b0d      	ldr	r3, [pc, #52]	@ (80038e0 <std+0x58>)
 80038ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80038ae:	4b0d      	ldr	r3, [pc, #52]	@ (80038e4 <std+0x5c>)
 80038b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80038b2:	4b0d      	ldr	r3, [pc, #52]	@ (80038e8 <std+0x60>)
 80038b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80038b6:	4b0d      	ldr	r3, [pc, #52]	@ (80038ec <std+0x64>)
 80038b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80038ba:	4b0d      	ldr	r3, [pc, #52]	@ (80038f0 <std+0x68>)
 80038bc:	6224      	str	r4, [r4, #32]
 80038be:	429c      	cmp	r4, r3
 80038c0:	d006      	beq.n	80038d0 <std+0x48>
 80038c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80038c6:	4294      	cmp	r4, r2
 80038c8:	d002      	beq.n	80038d0 <std+0x48>
 80038ca:	33d0      	adds	r3, #208	@ 0xd0
 80038cc:	429c      	cmp	r4, r3
 80038ce:	d105      	bne.n	80038dc <std+0x54>
 80038d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80038d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038d8:	f000 ba88 	b.w	8003dec <__retarget_lock_init_recursive>
 80038dc:	bd10      	pop	{r4, pc}
 80038de:	bf00      	nop
 80038e0:	08003b2d 	.word	0x08003b2d
 80038e4:	08003b4f 	.word	0x08003b4f
 80038e8:	08003b87 	.word	0x08003b87
 80038ec:	08003bab 	.word	0x08003bab
 80038f0:	20000370 	.word	0x20000370

080038f4 <stdio_exit_handler>:
 80038f4:	4a02      	ldr	r2, [pc, #8]	@ (8003900 <stdio_exit_handler+0xc>)
 80038f6:	4903      	ldr	r1, [pc, #12]	@ (8003904 <stdio_exit_handler+0x10>)
 80038f8:	4803      	ldr	r0, [pc, #12]	@ (8003908 <stdio_exit_handler+0x14>)
 80038fa:	f000 b869 	b.w	80039d0 <_fwalk_sglue>
 80038fe:	bf00      	nop
 8003900:	20000160 	.word	0x20000160
 8003904:	080047fd 	.word	0x080047fd
 8003908:	20000170 	.word	0x20000170

0800390c <cleanup_stdio>:
 800390c:	6841      	ldr	r1, [r0, #4]
 800390e:	4b0c      	ldr	r3, [pc, #48]	@ (8003940 <cleanup_stdio+0x34>)
 8003910:	4299      	cmp	r1, r3
 8003912:	b510      	push	{r4, lr}
 8003914:	4604      	mov	r4, r0
 8003916:	d001      	beq.n	800391c <cleanup_stdio+0x10>
 8003918:	f000 ff70 	bl	80047fc <_fflush_r>
 800391c:	68a1      	ldr	r1, [r4, #8]
 800391e:	4b09      	ldr	r3, [pc, #36]	@ (8003944 <cleanup_stdio+0x38>)
 8003920:	4299      	cmp	r1, r3
 8003922:	d002      	beq.n	800392a <cleanup_stdio+0x1e>
 8003924:	4620      	mov	r0, r4
 8003926:	f000 ff69 	bl	80047fc <_fflush_r>
 800392a:	68e1      	ldr	r1, [r4, #12]
 800392c:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <cleanup_stdio+0x3c>)
 800392e:	4299      	cmp	r1, r3
 8003930:	d004      	beq.n	800393c <cleanup_stdio+0x30>
 8003932:	4620      	mov	r0, r4
 8003934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003938:	f000 bf60 	b.w	80047fc <_fflush_r>
 800393c:	bd10      	pop	{r4, pc}
 800393e:	bf00      	nop
 8003940:	20000370 	.word	0x20000370
 8003944:	200003d8 	.word	0x200003d8
 8003948:	20000440 	.word	0x20000440

0800394c <global_stdio_init.part.0>:
 800394c:	b510      	push	{r4, lr}
 800394e:	4b0b      	ldr	r3, [pc, #44]	@ (800397c <global_stdio_init.part.0+0x30>)
 8003950:	4c0b      	ldr	r4, [pc, #44]	@ (8003980 <global_stdio_init.part.0+0x34>)
 8003952:	4a0c      	ldr	r2, [pc, #48]	@ (8003984 <global_stdio_init.part.0+0x38>)
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	4620      	mov	r0, r4
 8003958:	2200      	movs	r2, #0
 800395a:	2104      	movs	r1, #4
 800395c:	f7ff ff94 	bl	8003888 <std>
 8003960:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003964:	2201      	movs	r2, #1
 8003966:	2109      	movs	r1, #9
 8003968:	f7ff ff8e 	bl	8003888 <std>
 800396c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003970:	2202      	movs	r2, #2
 8003972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003976:	2112      	movs	r1, #18
 8003978:	f7ff bf86 	b.w	8003888 <std>
 800397c:	200004a8 	.word	0x200004a8
 8003980:	20000370 	.word	0x20000370
 8003984:	080038f5 	.word	0x080038f5

08003988 <__sfp_lock_acquire>:
 8003988:	4801      	ldr	r0, [pc, #4]	@ (8003990 <__sfp_lock_acquire+0x8>)
 800398a:	f000 ba30 	b.w	8003dee <__retarget_lock_acquire_recursive>
 800398e:	bf00      	nop
 8003990:	200004b1 	.word	0x200004b1

08003994 <__sfp_lock_release>:
 8003994:	4801      	ldr	r0, [pc, #4]	@ (800399c <__sfp_lock_release+0x8>)
 8003996:	f000 ba2b 	b.w	8003df0 <__retarget_lock_release_recursive>
 800399a:	bf00      	nop
 800399c:	200004b1 	.word	0x200004b1

080039a0 <__sinit>:
 80039a0:	b510      	push	{r4, lr}
 80039a2:	4604      	mov	r4, r0
 80039a4:	f7ff fff0 	bl	8003988 <__sfp_lock_acquire>
 80039a8:	6a23      	ldr	r3, [r4, #32]
 80039aa:	b11b      	cbz	r3, 80039b4 <__sinit+0x14>
 80039ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039b0:	f7ff bff0 	b.w	8003994 <__sfp_lock_release>
 80039b4:	4b04      	ldr	r3, [pc, #16]	@ (80039c8 <__sinit+0x28>)
 80039b6:	6223      	str	r3, [r4, #32]
 80039b8:	4b04      	ldr	r3, [pc, #16]	@ (80039cc <__sinit+0x2c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1f5      	bne.n	80039ac <__sinit+0xc>
 80039c0:	f7ff ffc4 	bl	800394c <global_stdio_init.part.0>
 80039c4:	e7f2      	b.n	80039ac <__sinit+0xc>
 80039c6:	bf00      	nop
 80039c8:	0800390d 	.word	0x0800390d
 80039cc:	200004a8 	.word	0x200004a8

080039d0 <_fwalk_sglue>:
 80039d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039d4:	4607      	mov	r7, r0
 80039d6:	4688      	mov	r8, r1
 80039d8:	4614      	mov	r4, r2
 80039da:	2600      	movs	r6, #0
 80039dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039e0:	f1b9 0901 	subs.w	r9, r9, #1
 80039e4:	d505      	bpl.n	80039f2 <_fwalk_sglue+0x22>
 80039e6:	6824      	ldr	r4, [r4, #0]
 80039e8:	2c00      	cmp	r4, #0
 80039ea:	d1f7      	bne.n	80039dc <_fwalk_sglue+0xc>
 80039ec:	4630      	mov	r0, r6
 80039ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039f2:	89ab      	ldrh	r3, [r5, #12]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d907      	bls.n	8003a08 <_fwalk_sglue+0x38>
 80039f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039fc:	3301      	adds	r3, #1
 80039fe:	d003      	beq.n	8003a08 <_fwalk_sglue+0x38>
 8003a00:	4629      	mov	r1, r5
 8003a02:	4638      	mov	r0, r7
 8003a04:	47c0      	blx	r8
 8003a06:	4306      	orrs	r6, r0
 8003a08:	3568      	adds	r5, #104	@ 0x68
 8003a0a:	e7e9      	b.n	80039e0 <_fwalk_sglue+0x10>

08003a0c <iprintf>:
 8003a0c:	b40f      	push	{r0, r1, r2, r3}
 8003a0e:	b507      	push	{r0, r1, r2, lr}
 8003a10:	4906      	ldr	r1, [pc, #24]	@ (8003a2c <iprintf+0x20>)
 8003a12:	ab04      	add	r3, sp, #16
 8003a14:	6808      	ldr	r0, [r1, #0]
 8003a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a1a:	6881      	ldr	r1, [r0, #8]
 8003a1c:	9301      	str	r3, [sp, #4]
 8003a1e:	f000 fbc3 	bl	80041a8 <_vfiprintf_r>
 8003a22:	b003      	add	sp, #12
 8003a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a28:	b004      	add	sp, #16
 8003a2a:	4770      	bx	lr
 8003a2c:	2000016c 	.word	0x2000016c

08003a30 <_puts_r>:
 8003a30:	6a03      	ldr	r3, [r0, #32]
 8003a32:	b570      	push	{r4, r5, r6, lr}
 8003a34:	6884      	ldr	r4, [r0, #8]
 8003a36:	4605      	mov	r5, r0
 8003a38:	460e      	mov	r6, r1
 8003a3a:	b90b      	cbnz	r3, 8003a40 <_puts_r+0x10>
 8003a3c:	f7ff ffb0 	bl	80039a0 <__sinit>
 8003a40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a42:	07db      	lsls	r3, r3, #31
 8003a44:	d405      	bmi.n	8003a52 <_puts_r+0x22>
 8003a46:	89a3      	ldrh	r3, [r4, #12]
 8003a48:	0598      	lsls	r0, r3, #22
 8003a4a:	d402      	bmi.n	8003a52 <_puts_r+0x22>
 8003a4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a4e:	f000 f9ce 	bl	8003dee <__retarget_lock_acquire_recursive>
 8003a52:	89a3      	ldrh	r3, [r4, #12]
 8003a54:	0719      	lsls	r1, r3, #28
 8003a56:	d502      	bpl.n	8003a5e <_puts_r+0x2e>
 8003a58:	6923      	ldr	r3, [r4, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d135      	bne.n	8003aca <_puts_r+0x9a>
 8003a5e:	4621      	mov	r1, r4
 8003a60:	4628      	mov	r0, r5
 8003a62:	f000 f8e5 	bl	8003c30 <__swsetup_r>
 8003a66:	b380      	cbz	r0, 8003aca <_puts_r+0x9a>
 8003a68:	f04f 35ff 	mov.w	r5, #4294967295
 8003a6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a6e:	07da      	lsls	r2, r3, #31
 8003a70:	d405      	bmi.n	8003a7e <_puts_r+0x4e>
 8003a72:	89a3      	ldrh	r3, [r4, #12]
 8003a74:	059b      	lsls	r3, r3, #22
 8003a76:	d402      	bmi.n	8003a7e <_puts_r+0x4e>
 8003a78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a7a:	f000 f9b9 	bl	8003df0 <__retarget_lock_release_recursive>
 8003a7e:	4628      	mov	r0, r5
 8003a80:	bd70      	pop	{r4, r5, r6, pc}
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	da04      	bge.n	8003a90 <_puts_r+0x60>
 8003a86:	69a2      	ldr	r2, [r4, #24]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	dc17      	bgt.n	8003abc <_puts_r+0x8c>
 8003a8c:	290a      	cmp	r1, #10
 8003a8e:	d015      	beq.n	8003abc <_puts_r+0x8c>
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	6022      	str	r2, [r4, #0]
 8003a96:	7019      	strb	r1, [r3, #0]
 8003a98:	68a3      	ldr	r3, [r4, #8]
 8003a9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	60a3      	str	r3, [r4, #8]
 8003aa2:	2900      	cmp	r1, #0
 8003aa4:	d1ed      	bne.n	8003a82 <_puts_r+0x52>
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	da11      	bge.n	8003ace <_puts_r+0x9e>
 8003aaa:	4622      	mov	r2, r4
 8003aac:	210a      	movs	r1, #10
 8003aae:	4628      	mov	r0, r5
 8003ab0:	f000 f87f 	bl	8003bb2 <__swbuf_r>
 8003ab4:	3001      	adds	r0, #1
 8003ab6:	d0d7      	beq.n	8003a68 <_puts_r+0x38>
 8003ab8:	250a      	movs	r5, #10
 8003aba:	e7d7      	b.n	8003a6c <_puts_r+0x3c>
 8003abc:	4622      	mov	r2, r4
 8003abe:	4628      	mov	r0, r5
 8003ac0:	f000 f877 	bl	8003bb2 <__swbuf_r>
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	d1e7      	bne.n	8003a98 <_puts_r+0x68>
 8003ac8:	e7ce      	b.n	8003a68 <_puts_r+0x38>
 8003aca:	3e01      	subs	r6, #1
 8003acc:	e7e4      	b.n	8003a98 <_puts_r+0x68>
 8003ace:	6823      	ldr	r3, [r4, #0]
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	6022      	str	r2, [r4, #0]
 8003ad4:	220a      	movs	r2, #10
 8003ad6:	701a      	strb	r2, [r3, #0]
 8003ad8:	e7ee      	b.n	8003ab8 <_puts_r+0x88>
	...

08003adc <puts>:
 8003adc:	4b02      	ldr	r3, [pc, #8]	@ (8003ae8 <puts+0xc>)
 8003ade:	4601      	mov	r1, r0
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	f7ff bfa5 	b.w	8003a30 <_puts_r>
 8003ae6:	bf00      	nop
 8003ae8:	2000016c 	.word	0x2000016c

08003aec <siprintf>:
 8003aec:	b40e      	push	{r1, r2, r3}
 8003aee:	b500      	push	{lr}
 8003af0:	b09c      	sub	sp, #112	@ 0x70
 8003af2:	ab1d      	add	r3, sp, #116	@ 0x74
 8003af4:	9002      	str	r0, [sp, #8]
 8003af6:	9006      	str	r0, [sp, #24]
 8003af8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003afc:	4809      	ldr	r0, [pc, #36]	@ (8003b24 <siprintf+0x38>)
 8003afe:	9107      	str	r1, [sp, #28]
 8003b00:	9104      	str	r1, [sp, #16]
 8003b02:	4909      	ldr	r1, [pc, #36]	@ (8003b28 <siprintf+0x3c>)
 8003b04:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b08:	9105      	str	r1, [sp, #20]
 8003b0a:	6800      	ldr	r0, [r0, #0]
 8003b0c:	9301      	str	r3, [sp, #4]
 8003b0e:	a902      	add	r1, sp, #8
 8003b10:	f000 fa24 	bl	8003f5c <_svfiprintf_r>
 8003b14:	9b02      	ldr	r3, [sp, #8]
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	b01c      	add	sp, #112	@ 0x70
 8003b1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b20:	b003      	add	sp, #12
 8003b22:	4770      	bx	lr
 8003b24:	2000016c 	.word	0x2000016c
 8003b28:	ffff0208 	.word	0xffff0208

08003b2c <__sread>:
 8003b2c:	b510      	push	{r4, lr}
 8003b2e:	460c      	mov	r4, r1
 8003b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b34:	f000 f8fc 	bl	8003d30 <_read_r>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	bfab      	itete	ge
 8003b3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003b3e:	89a3      	ldrhlt	r3, [r4, #12]
 8003b40:	181b      	addge	r3, r3, r0
 8003b42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003b46:	bfac      	ite	ge
 8003b48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003b4a:	81a3      	strhlt	r3, [r4, #12]
 8003b4c:	bd10      	pop	{r4, pc}

08003b4e <__swrite>:
 8003b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b52:	461f      	mov	r7, r3
 8003b54:	898b      	ldrh	r3, [r1, #12]
 8003b56:	05db      	lsls	r3, r3, #23
 8003b58:	4605      	mov	r5, r0
 8003b5a:	460c      	mov	r4, r1
 8003b5c:	4616      	mov	r6, r2
 8003b5e:	d505      	bpl.n	8003b6c <__swrite+0x1e>
 8003b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b64:	2302      	movs	r3, #2
 8003b66:	2200      	movs	r2, #0
 8003b68:	f000 f8d0 	bl	8003d0c <_lseek_r>
 8003b6c:	89a3      	ldrh	r3, [r4, #12]
 8003b6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b76:	81a3      	strh	r3, [r4, #12]
 8003b78:	4632      	mov	r2, r6
 8003b7a:	463b      	mov	r3, r7
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b82:	f000 b8f7 	b.w	8003d74 <_write_r>

08003b86 <__sseek>:
 8003b86:	b510      	push	{r4, lr}
 8003b88:	460c      	mov	r4, r1
 8003b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b8e:	f000 f8bd 	bl	8003d0c <_lseek_r>
 8003b92:	1c43      	adds	r3, r0, #1
 8003b94:	89a3      	ldrh	r3, [r4, #12]
 8003b96:	bf15      	itete	ne
 8003b98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003b9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003b9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003ba2:	81a3      	strheq	r3, [r4, #12]
 8003ba4:	bf18      	it	ne
 8003ba6:	81a3      	strhne	r3, [r4, #12]
 8003ba8:	bd10      	pop	{r4, pc}

08003baa <__sclose>:
 8003baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bae:	f000 b89d 	b.w	8003cec <_close_r>

08003bb2 <__swbuf_r>:
 8003bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb4:	460e      	mov	r6, r1
 8003bb6:	4614      	mov	r4, r2
 8003bb8:	4605      	mov	r5, r0
 8003bba:	b118      	cbz	r0, 8003bc4 <__swbuf_r+0x12>
 8003bbc:	6a03      	ldr	r3, [r0, #32]
 8003bbe:	b90b      	cbnz	r3, 8003bc4 <__swbuf_r+0x12>
 8003bc0:	f7ff feee 	bl	80039a0 <__sinit>
 8003bc4:	69a3      	ldr	r3, [r4, #24]
 8003bc6:	60a3      	str	r3, [r4, #8]
 8003bc8:	89a3      	ldrh	r3, [r4, #12]
 8003bca:	071a      	lsls	r2, r3, #28
 8003bcc:	d501      	bpl.n	8003bd2 <__swbuf_r+0x20>
 8003bce:	6923      	ldr	r3, [r4, #16]
 8003bd0:	b943      	cbnz	r3, 8003be4 <__swbuf_r+0x32>
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	f000 f82b 	bl	8003c30 <__swsetup_r>
 8003bda:	b118      	cbz	r0, 8003be4 <__swbuf_r+0x32>
 8003bdc:	f04f 37ff 	mov.w	r7, #4294967295
 8003be0:	4638      	mov	r0, r7
 8003be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	6922      	ldr	r2, [r4, #16]
 8003be8:	1a98      	subs	r0, r3, r2
 8003bea:	6963      	ldr	r3, [r4, #20]
 8003bec:	b2f6      	uxtb	r6, r6
 8003bee:	4283      	cmp	r3, r0
 8003bf0:	4637      	mov	r7, r6
 8003bf2:	dc05      	bgt.n	8003c00 <__swbuf_r+0x4e>
 8003bf4:	4621      	mov	r1, r4
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	f000 fe00 	bl	80047fc <_fflush_r>
 8003bfc:	2800      	cmp	r0, #0
 8003bfe:	d1ed      	bne.n	8003bdc <__swbuf_r+0x2a>
 8003c00:	68a3      	ldr	r3, [r4, #8]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	60a3      	str	r3, [r4, #8]
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	6022      	str	r2, [r4, #0]
 8003c0c:	701e      	strb	r6, [r3, #0]
 8003c0e:	6962      	ldr	r2, [r4, #20]
 8003c10:	1c43      	adds	r3, r0, #1
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d004      	beq.n	8003c20 <__swbuf_r+0x6e>
 8003c16:	89a3      	ldrh	r3, [r4, #12]
 8003c18:	07db      	lsls	r3, r3, #31
 8003c1a:	d5e1      	bpl.n	8003be0 <__swbuf_r+0x2e>
 8003c1c:	2e0a      	cmp	r6, #10
 8003c1e:	d1df      	bne.n	8003be0 <__swbuf_r+0x2e>
 8003c20:	4621      	mov	r1, r4
 8003c22:	4628      	mov	r0, r5
 8003c24:	f000 fdea 	bl	80047fc <_fflush_r>
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	d0d9      	beq.n	8003be0 <__swbuf_r+0x2e>
 8003c2c:	e7d6      	b.n	8003bdc <__swbuf_r+0x2a>
	...

08003c30 <__swsetup_r>:
 8003c30:	b538      	push	{r3, r4, r5, lr}
 8003c32:	4b29      	ldr	r3, [pc, #164]	@ (8003cd8 <__swsetup_r+0xa8>)
 8003c34:	4605      	mov	r5, r0
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	460c      	mov	r4, r1
 8003c3a:	b118      	cbz	r0, 8003c44 <__swsetup_r+0x14>
 8003c3c:	6a03      	ldr	r3, [r0, #32]
 8003c3e:	b90b      	cbnz	r3, 8003c44 <__swsetup_r+0x14>
 8003c40:	f7ff feae 	bl	80039a0 <__sinit>
 8003c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c48:	0719      	lsls	r1, r3, #28
 8003c4a:	d422      	bmi.n	8003c92 <__swsetup_r+0x62>
 8003c4c:	06da      	lsls	r2, r3, #27
 8003c4e:	d407      	bmi.n	8003c60 <__swsetup_r+0x30>
 8003c50:	2209      	movs	r2, #9
 8003c52:	602a      	str	r2, [r5, #0]
 8003c54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c58:	81a3      	strh	r3, [r4, #12]
 8003c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c5e:	e033      	b.n	8003cc8 <__swsetup_r+0x98>
 8003c60:	0758      	lsls	r0, r3, #29
 8003c62:	d512      	bpl.n	8003c8a <__swsetup_r+0x5a>
 8003c64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c66:	b141      	cbz	r1, 8003c7a <__swsetup_r+0x4a>
 8003c68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c6c:	4299      	cmp	r1, r3
 8003c6e:	d002      	beq.n	8003c76 <__swsetup_r+0x46>
 8003c70:	4628      	mov	r0, r5
 8003c72:	f000 f8cd 	bl	8003e10 <_free_r>
 8003c76:	2300      	movs	r3, #0
 8003c78:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c7a:	89a3      	ldrh	r3, [r4, #12]
 8003c7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003c80:	81a3      	strh	r3, [r4, #12]
 8003c82:	2300      	movs	r3, #0
 8003c84:	6063      	str	r3, [r4, #4]
 8003c86:	6923      	ldr	r3, [r4, #16]
 8003c88:	6023      	str	r3, [r4, #0]
 8003c8a:	89a3      	ldrh	r3, [r4, #12]
 8003c8c:	f043 0308 	orr.w	r3, r3, #8
 8003c90:	81a3      	strh	r3, [r4, #12]
 8003c92:	6923      	ldr	r3, [r4, #16]
 8003c94:	b94b      	cbnz	r3, 8003caa <__swsetup_r+0x7a>
 8003c96:	89a3      	ldrh	r3, [r4, #12]
 8003c98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003c9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ca0:	d003      	beq.n	8003caa <__swsetup_r+0x7a>
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	f000 fdf7 	bl	8004898 <__smakebuf_r>
 8003caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cae:	f013 0201 	ands.w	r2, r3, #1
 8003cb2:	d00a      	beq.n	8003cca <__swsetup_r+0x9a>
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	60a2      	str	r2, [r4, #8]
 8003cb8:	6962      	ldr	r2, [r4, #20]
 8003cba:	4252      	negs	r2, r2
 8003cbc:	61a2      	str	r2, [r4, #24]
 8003cbe:	6922      	ldr	r2, [r4, #16]
 8003cc0:	b942      	cbnz	r2, 8003cd4 <__swsetup_r+0xa4>
 8003cc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003cc6:	d1c5      	bne.n	8003c54 <__swsetup_r+0x24>
 8003cc8:	bd38      	pop	{r3, r4, r5, pc}
 8003cca:	0799      	lsls	r1, r3, #30
 8003ccc:	bf58      	it	pl
 8003cce:	6962      	ldrpl	r2, [r4, #20]
 8003cd0:	60a2      	str	r2, [r4, #8]
 8003cd2:	e7f4      	b.n	8003cbe <__swsetup_r+0x8e>
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	e7f7      	b.n	8003cc8 <__swsetup_r+0x98>
 8003cd8:	2000016c 	.word	0x2000016c

08003cdc <memset>:
 8003cdc:	4402      	add	r2, r0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d100      	bne.n	8003ce6 <memset+0xa>
 8003ce4:	4770      	bx	lr
 8003ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cea:	e7f9      	b.n	8003ce0 <memset+0x4>

08003cec <_close_r>:
 8003cec:	b538      	push	{r3, r4, r5, lr}
 8003cee:	4d06      	ldr	r5, [pc, #24]	@ (8003d08 <_close_r+0x1c>)
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	4604      	mov	r4, r0
 8003cf4:	4608      	mov	r0, r1
 8003cf6:	602b      	str	r3, [r5, #0]
 8003cf8:	f7fd fc5a 	bl	80015b0 <_close>
 8003cfc:	1c43      	adds	r3, r0, #1
 8003cfe:	d102      	bne.n	8003d06 <_close_r+0x1a>
 8003d00:	682b      	ldr	r3, [r5, #0]
 8003d02:	b103      	cbz	r3, 8003d06 <_close_r+0x1a>
 8003d04:	6023      	str	r3, [r4, #0]
 8003d06:	bd38      	pop	{r3, r4, r5, pc}
 8003d08:	200004ac 	.word	0x200004ac

08003d0c <_lseek_r>:
 8003d0c:	b538      	push	{r3, r4, r5, lr}
 8003d0e:	4d07      	ldr	r5, [pc, #28]	@ (8003d2c <_lseek_r+0x20>)
 8003d10:	4604      	mov	r4, r0
 8003d12:	4608      	mov	r0, r1
 8003d14:	4611      	mov	r1, r2
 8003d16:	2200      	movs	r2, #0
 8003d18:	602a      	str	r2, [r5, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f7fd fc6f 	bl	80015fe <_lseek>
 8003d20:	1c43      	adds	r3, r0, #1
 8003d22:	d102      	bne.n	8003d2a <_lseek_r+0x1e>
 8003d24:	682b      	ldr	r3, [r5, #0]
 8003d26:	b103      	cbz	r3, 8003d2a <_lseek_r+0x1e>
 8003d28:	6023      	str	r3, [r4, #0]
 8003d2a:	bd38      	pop	{r3, r4, r5, pc}
 8003d2c:	200004ac 	.word	0x200004ac

08003d30 <_read_r>:
 8003d30:	b538      	push	{r3, r4, r5, lr}
 8003d32:	4d07      	ldr	r5, [pc, #28]	@ (8003d50 <_read_r+0x20>)
 8003d34:	4604      	mov	r4, r0
 8003d36:	4608      	mov	r0, r1
 8003d38:	4611      	mov	r1, r2
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	602a      	str	r2, [r5, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f7fd fbec 	bl	800151c <_read>
 8003d44:	1c43      	adds	r3, r0, #1
 8003d46:	d102      	bne.n	8003d4e <_read_r+0x1e>
 8003d48:	682b      	ldr	r3, [r5, #0]
 8003d4a:	b103      	cbz	r3, 8003d4e <_read_r+0x1e>
 8003d4c:	6023      	str	r3, [r4, #0]
 8003d4e:	bd38      	pop	{r3, r4, r5, pc}
 8003d50:	200004ac 	.word	0x200004ac

08003d54 <_sbrk_r>:
 8003d54:	b538      	push	{r3, r4, r5, lr}
 8003d56:	4d06      	ldr	r5, [pc, #24]	@ (8003d70 <_sbrk_r+0x1c>)
 8003d58:	2300      	movs	r3, #0
 8003d5a:	4604      	mov	r4, r0
 8003d5c:	4608      	mov	r0, r1
 8003d5e:	602b      	str	r3, [r5, #0]
 8003d60:	f7fd fbfa 	bl	8001558 <_sbrk>
 8003d64:	1c43      	adds	r3, r0, #1
 8003d66:	d102      	bne.n	8003d6e <_sbrk_r+0x1a>
 8003d68:	682b      	ldr	r3, [r5, #0]
 8003d6a:	b103      	cbz	r3, 8003d6e <_sbrk_r+0x1a>
 8003d6c:	6023      	str	r3, [r4, #0]
 8003d6e:	bd38      	pop	{r3, r4, r5, pc}
 8003d70:	200004ac 	.word	0x200004ac

08003d74 <_write_r>:
 8003d74:	b538      	push	{r3, r4, r5, lr}
 8003d76:	4d07      	ldr	r5, [pc, #28]	@ (8003d94 <_write_r+0x20>)
 8003d78:	4604      	mov	r4, r0
 8003d7a:	4608      	mov	r0, r1
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	2200      	movs	r2, #0
 8003d80:	602a      	str	r2, [r5, #0]
 8003d82:	461a      	mov	r2, r3
 8003d84:	f7fd fb08 	bl	8001398 <_write>
 8003d88:	1c43      	adds	r3, r0, #1
 8003d8a:	d102      	bne.n	8003d92 <_write_r+0x1e>
 8003d8c:	682b      	ldr	r3, [r5, #0]
 8003d8e:	b103      	cbz	r3, 8003d92 <_write_r+0x1e>
 8003d90:	6023      	str	r3, [r4, #0]
 8003d92:	bd38      	pop	{r3, r4, r5, pc}
 8003d94:	200004ac 	.word	0x200004ac

08003d98 <__errno>:
 8003d98:	4b01      	ldr	r3, [pc, #4]	@ (8003da0 <__errno+0x8>)
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	2000016c 	.word	0x2000016c

08003da4 <__libc_init_array>:
 8003da4:	b570      	push	{r4, r5, r6, lr}
 8003da6:	4d0d      	ldr	r5, [pc, #52]	@ (8003ddc <__libc_init_array+0x38>)
 8003da8:	4c0d      	ldr	r4, [pc, #52]	@ (8003de0 <__libc_init_array+0x3c>)
 8003daa:	1b64      	subs	r4, r4, r5
 8003dac:	10a4      	asrs	r4, r4, #2
 8003dae:	2600      	movs	r6, #0
 8003db0:	42a6      	cmp	r6, r4
 8003db2:	d109      	bne.n	8003dc8 <__libc_init_array+0x24>
 8003db4:	4d0b      	ldr	r5, [pc, #44]	@ (8003de4 <__libc_init_array+0x40>)
 8003db6:	4c0c      	ldr	r4, [pc, #48]	@ (8003de8 <__libc_init_array+0x44>)
 8003db8:	f000 fe1c 	bl	80049f4 <_init>
 8003dbc:	1b64      	subs	r4, r4, r5
 8003dbe:	10a4      	asrs	r4, r4, #2
 8003dc0:	2600      	movs	r6, #0
 8003dc2:	42a6      	cmp	r6, r4
 8003dc4:	d105      	bne.n	8003dd2 <__libc_init_array+0x2e>
 8003dc6:	bd70      	pop	{r4, r5, r6, pc}
 8003dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dcc:	4798      	blx	r3
 8003dce:	3601      	adds	r6, #1
 8003dd0:	e7ee      	b.n	8003db0 <__libc_init_array+0xc>
 8003dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dd6:	4798      	blx	r3
 8003dd8:	3601      	adds	r6, #1
 8003dda:	e7f2      	b.n	8003dc2 <__libc_init_array+0x1e>
 8003ddc:	08004b6c 	.word	0x08004b6c
 8003de0:	08004b6c 	.word	0x08004b6c
 8003de4:	08004b6c 	.word	0x08004b6c
 8003de8:	08004b70 	.word	0x08004b70

08003dec <__retarget_lock_init_recursive>:
 8003dec:	4770      	bx	lr

08003dee <__retarget_lock_acquire_recursive>:
 8003dee:	4770      	bx	lr

08003df0 <__retarget_lock_release_recursive>:
 8003df0:	4770      	bx	lr

08003df2 <memcpy>:
 8003df2:	440a      	add	r2, r1
 8003df4:	4291      	cmp	r1, r2
 8003df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8003dfa:	d100      	bne.n	8003dfe <memcpy+0xc>
 8003dfc:	4770      	bx	lr
 8003dfe:	b510      	push	{r4, lr}
 8003e00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e08:	4291      	cmp	r1, r2
 8003e0a:	d1f9      	bne.n	8003e00 <memcpy+0xe>
 8003e0c:	bd10      	pop	{r4, pc}
	...

08003e10 <_free_r>:
 8003e10:	b538      	push	{r3, r4, r5, lr}
 8003e12:	4605      	mov	r5, r0
 8003e14:	2900      	cmp	r1, #0
 8003e16:	d041      	beq.n	8003e9c <_free_r+0x8c>
 8003e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e1c:	1f0c      	subs	r4, r1, #4
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	bfb8      	it	lt
 8003e22:	18e4      	addlt	r4, r4, r3
 8003e24:	f7ff fd24 	bl	8003870 <__malloc_lock>
 8003e28:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea0 <_free_r+0x90>)
 8003e2a:	6813      	ldr	r3, [r2, #0]
 8003e2c:	b933      	cbnz	r3, 8003e3c <_free_r+0x2c>
 8003e2e:	6063      	str	r3, [r4, #4]
 8003e30:	6014      	str	r4, [r2, #0]
 8003e32:	4628      	mov	r0, r5
 8003e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e38:	f7ff bd20 	b.w	800387c <__malloc_unlock>
 8003e3c:	42a3      	cmp	r3, r4
 8003e3e:	d908      	bls.n	8003e52 <_free_r+0x42>
 8003e40:	6820      	ldr	r0, [r4, #0]
 8003e42:	1821      	adds	r1, r4, r0
 8003e44:	428b      	cmp	r3, r1
 8003e46:	bf01      	itttt	eq
 8003e48:	6819      	ldreq	r1, [r3, #0]
 8003e4a:	685b      	ldreq	r3, [r3, #4]
 8003e4c:	1809      	addeq	r1, r1, r0
 8003e4e:	6021      	streq	r1, [r4, #0]
 8003e50:	e7ed      	b.n	8003e2e <_free_r+0x1e>
 8003e52:	461a      	mov	r2, r3
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	b10b      	cbz	r3, 8003e5c <_free_r+0x4c>
 8003e58:	42a3      	cmp	r3, r4
 8003e5a:	d9fa      	bls.n	8003e52 <_free_r+0x42>
 8003e5c:	6811      	ldr	r1, [r2, #0]
 8003e5e:	1850      	adds	r0, r2, r1
 8003e60:	42a0      	cmp	r0, r4
 8003e62:	d10b      	bne.n	8003e7c <_free_r+0x6c>
 8003e64:	6820      	ldr	r0, [r4, #0]
 8003e66:	4401      	add	r1, r0
 8003e68:	1850      	adds	r0, r2, r1
 8003e6a:	4283      	cmp	r3, r0
 8003e6c:	6011      	str	r1, [r2, #0]
 8003e6e:	d1e0      	bne.n	8003e32 <_free_r+0x22>
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	6053      	str	r3, [r2, #4]
 8003e76:	4408      	add	r0, r1
 8003e78:	6010      	str	r0, [r2, #0]
 8003e7a:	e7da      	b.n	8003e32 <_free_r+0x22>
 8003e7c:	d902      	bls.n	8003e84 <_free_r+0x74>
 8003e7e:	230c      	movs	r3, #12
 8003e80:	602b      	str	r3, [r5, #0]
 8003e82:	e7d6      	b.n	8003e32 <_free_r+0x22>
 8003e84:	6820      	ldr	r0, [r4, #0]
 8003e86:	1821      	adds	r1, r4, r0
 8003e88:	428b      	cmp	r3, r1
 8003e8a:	bf04      	itt	eq
 8003e8c:	6819      	ldreq	r1, [r3, #0]
 8003e8e:	685b      	ldreq	r3, [r3, #4]
 8003e90:	6063      	str	r3, [r4, #4]
 8003e92:	bf04      	itt	eq
 8003e94:	1809      	addeq	r1, r1, r0
 8003e96:	6021      	streq	r1, [r4, #0]
 8003e98:	6054      	str	r4, [r2, #4]
 8003e9a:	e7ca      	b.n	8003e32 <_free_r+0x22>
 8003e9c:	bd38      	pop	{r3, r4, r5, pc}
 8003e9e:	bf00      	nop
 8003ea0:	2000036c 	.word	0x2000036c

08003ea4 <__ssputs_r>:
 8003ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea8:	688e      	ldr	r6, [r1, #8]
 8003eaa:	461f      	mov	r7, r3
 8003eac:	42be      	cmp	r6, r7
 8003eae:	680b      	ldr	r3, [r1, #0]
 8003eb0:	4682      	mov	sl, r0
 8003eb2:	460c      	mov	r4, r1
 8003eb4:	4690      	mov	r8, r2
 8003eb6:	d82d      	bhi.n	8003f14 <__ssputs_r+0x70>
 8003eb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ebc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003ec0:	d026      	beq.n	8003f10 <__ssputs_r+0x6c>
 8003ec2:	6965      	ldr	r5, [r4, #20]
 8003ec4:	6909      	ldr	r1, [r1, #16]
 8003ec6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003eca:	eba3 0901 	sub.w	r9, r3, r1
 8003ece:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ed2:	1c7b      	adds	r3, r7, #1
 8003ed4:	444b      	add	r3, r9
 8003ed6:	106d      	asrs	r5, r5, #1
 8003ed8:	429d      	cmp	r5, r3
 8003eda:	bf38      	it	cc
 8003edc:	461d      	movcc	r5, r3
 8003ede:	0553      	lsls	r3, r2, #21
 8003ee0:	d527      	bpl.n	8003f32 <__ssputs_r+0x8e>
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	f7ff fc44 	bl	8003770 <_malloc_r>
 8003ee8:	4606      	mov	r6, r0
 8003eea:	b360      	cbz	r0, 8003f46 <__ssputs_r+0xa2>
 8003eec:	6921      	ldr	r1, [r4, #16]
 8003eee:	464a      	mov	r2, r9
 8003ef0:	f7ff ff7f 	bl	8003df2 <memcpy>
 8003ef4:	89a3      	ldrh	r3, [r4, #12]
 8003ef6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003efe:	81a3      	strh	r3, [r4, #12]
 8003f00:	6126      	str	r6, [r4, #16]
 8003f02:	6165      	str	r5, [r4, #20]
 8003f04:	444e      	add	r6, r9
 8003f06:	eba5 0509 	sub.w	r5, r5, r9
 8003f0a:	6026      	str	r6, [r4, #0]
 8003f0c:	60a5      	str	r5, [r4, #8]
 8003f0e:	463e      	mov	r6, r7
 8003f10:	42be      	cmp	r6, r7
 8003f12:	d900      	bls.n	8003f16 <__ssputs_r+0x72>
 8003f14:	463e      	mov	r6, r7
 8003f16:	6820      	ldr	r0, [r4, #0]
 8003f18:	4632      	mov	r2, r6
 8003f1a:	4641      	mov	r1, r8
 8003f1c:	f000 fcf8 	bl	8004910 <memmove>
 8003f20:	68a3      	ldr	r3, [r4, #8]
 8003f22:	1b9b      	subs	r3, r3, r6
 8003f24:	60a3      	str	r3, [r4, #8]
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	4433      	add	r3, r6
 8003f2a:	6023      	str	r3, [r4, #0]
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f32:	462a      	mov	r2, r5
 8003f34:	f000 fd28 	bl	8004988 <_realloc_r>
 8003f38:	4606      	mov	r6, r0
 8003f3a:	2800      	cmp	r0, #0
 8003f3c:	d1e0      	bne.n	8003f00 <__ssputs_r+0x5c>
 8003f3e:	6921      	ldr	r1, [r4, #16]
 8003f40:	4650      	mov	r0, sl
 8003f42:	f7ff ff65 	bl	8003e10 <_free_r>
 8003f46:	230c      	movs	r3, #12
 8003f48:	f8ca 3000 	str.w	r3, [sl]
 8003f4c:	89a3      	ldrh	r3, [r4, #12]
 8003f4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f52:	81a3      	strh	r3, [r4, #12]
 8003f54:	f04f 30ff 	mov.w	r0, #4294967295
 8003f58:	e7e9      	b.n	8003f2e <__ssputs_r+0x8a>
	...

08003f5c <_svfiprintf_r>:
 8003f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f60:	4698      	mov	r8, r3
 8003f62:	898b      	ldrh	r3, [r1, #12]
 8003f64:	061b      	lsls	r3, r3, #24
 8003f66:	b09d      	sub	sp, #116	@ 0x74
 8003f68:	4607      	mov	r7, r0
 8003f6a:	460d      	mov	r5, r1
 8003f6c:	4614      	mov	r4, r2
 8003f6e:	d510      	bpl.n	8003f92 <_svfiprintf_r+0x36>
 8003f70:	690b      	ldr	r3, [r1, #16]
 8003f72:	b973      	cbnz	r3, 8003f92 <_svfiprintf_r+0x36>
 8003f74:	2140      	movs	r1, #64	@ 0x40
 8003f76:	f7ff fbfb 	bl	8003770 <_malloc_r>
 8003f7a:	6028      	str	r0, [r5, #0]
 8003f7c:	6128      	str	r0, [r5, #16]
 8003f7e:	b930      	cbnz	r0, 8003f8e <_svfiprintf_r+0x32>
 8003f80:	230c      	movs	r3, #12
 8003f82:	603b      	str	r3, [r7, #0]
 8003f84:	f04f 30ff 	mov.w	r0, #4294967295
 8003f88:	b01d      	add	sp, #116	@ 0x74
 8003f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f8e:	2340      	movs	r3, #64	@ 0x40
 8003f90:	616b      	str	r3, [r5, #20]
 8003f92:	2300      	movs	r3, #0
 8003f94:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f96:	2320      	movs	r3, #32
 8003f98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fa0:	2330      	movs	r3, #48	@ 0x30
 8003fa2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004140 <_svfiprintf_r+0x1e4>
 8003fa6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003faa:	f04f 0901 	mov.w	r9, #1
 8003fae:	4623      	mov	r3, r4
 8003fb0:	469a      	mov	sl, r3
 8003fb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fb6:	b10a      	cbz	r2, 8003fbc <_svfiprintf_r+0x60>
 8003fb8:	2a25      	cmp	r2, #37	@ 0x25
 8003fba:	d1f9      	bne.n	8003fb0 <_svfiprintf_r+0x54>
 8003fbc:	ebba 0b04 	subs.w	fp, sl, r4
 8003fc0:	d00b      	beq.n	8003fda <_svfiprintf_r+0x7e>
 8003fc2:	465b      	mov	r3, fp
 8003fc4:	4622      	mov	r2, r4
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	4638      	mov	r0, r7
 8003fca:	f7ff ff6b 	bl	8003ea4 <__ssputs_r>
 8003fce:	3001      	adds	r0, #1
 8003fd0:	f000 80a7 	beq.w	8004122 <_svfiprintf_r+0x1c6>
 8003fd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003fd6:	445a      	add	r2, fp
 8003fd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8003fda:	f89a 3000 	ldrb.w	r3, [sl]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 809f 	beq.w	8004122 <_svfiprintf_r+0x1c6>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fee:	f10a 0a01 	add.w	sl, sl, #1
 8003ff2:	9304      	str	r3, [sp, #16]
 8003ff4:	9307      	str	r3, [sp, #28]
 8003ff6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ffa:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ffc:	4654      	mov	r4, sl
 8003ffe:	2205      	movs	r2, #5
 8004000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004004:	484e      	ldr	r0, [pc, #312]	@ (8004140 <_svfiprintf_r+0x1e4>)
 8004006:	f7fc f8eb 	bl	80001e0 <memchr>
 800400a:	9a04      	ldr	r2, [sp, #16]
 800400c:	b9d8      	cbnz	r0, 8004046 <_svfiprintf_r+0xea>
 800400e:	06d0      	lsls	r0, r2, #27
 8004010:	bf44      	itt	mi
 8004012:	2320      	movmi	r3, #32
 8004014:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004018:	0711      	lsls	r1, r2, #28
 800401a:	bf44      	itt	mi
 800401c:	232b      	movmi	r3, #43	@ 0x2b
 800401e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004022:	f89a 3000 	ldrb.w	r3, [sl]
 8004026:	2b2a      	cmp	r3, #42	@ 0x2a
 8004028:	d015      	beq.n	8004056 <_svfiprintf_r+0xfa>
 800402a:	9a07      	ldr	r2, [sp, #28]
 800402c:	4654      	mov	r4, sl
 800402e:	2000      	movs	r0, #0
 8004030:	f04f 0c0a 	mov.w	ip, #10
 8004034:	4621      	mov	r1, r4
 8004036:	f811 3b01 	ldrb.w	r3, [r1], #1
 800403a:	3b30      	subs	r3, #48	@ 0x30
 800403c:	2b09      	cmp	r3, #9
 800403e:	d94b      	bls.n	80040d8 <_svfiprintf_r+0x17c>
 8004040:	b1b0      	cbz	r0, 8004070 <_svfiprintf_r+0x114>
 8004042:	9207      	str	r2, [sp, #28]
 8004044:	e014      	b.n	8004070 <_svfiprintf_r+0x114>
 8004046:	eba0 0308 	sub.w	r3, r0, r8
 800404a:	fa09 f303 	lsl.w	r3, r9, r3
 800404e:	4313      	orrs	r3, r2
 8004050:	9304      	str	r3, [sp, #16]
 8004052:	46a2      	mov	sl, r4
 8004054:	e7d2      	b.n	8003ffc <_svfiprintf_r+0xa0>
 8004056:	9b03      	ldr	r3, [sp, #12]
 8004058:	1d19      	adds	r1, r3, #4
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	9103      	str	r1, [sp, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	bfbb      	ittet	lt
 8004062:	425b      	neglt	r3, r3
 8004064:	f042 0202 	orrlt.w	r2, r2, #2
 8004068:	9307      	strge	r3, [sp, #28]
 800406a:	9307      	strlt	r3, [sp, #28]
 800406c:	bfb8      	it	lt
 800406e:	9204      	strlt	r2, [sp, #16]
 8004070:	7823      	ldrb	r3, [r4, #0]
 8004072:	2b2e      	cmp	r3, #46	@ 0x2e
 8004074:	d10a      	bne.n	800408c <_svfiprintf_r+0x130>
 8004076:	7863      	ldrb	r3, [r4, #1]
 8004078:	2b2a      	cmp	r3, #42	@ 0x2a
 800407a:	d132      	bne.n	80040e2 <_svfiprintf_r+0x186>
 800407c:	9b03      	ldr	r3, [sp, #12]
 800407e:	1d1a      	adds	r2, r3, #4
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	9203      	str	r2, [sp, #12]
 8004084:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004088:	3402      	adds	r4, #2
 800408a:	9305      	str	r3, [sp, #20]
 800408c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004150 <_svfiprintf_r+0x1f4>
 8004090:	7821      	ldrb	r1, [r4, #0]
 8004092:	2203      	movs	r2, #3
 8004094:	4650      	mov	r0, sl
 8004096:	f7fc f8a3 	bl	80001e0 <memchr>
 800409a:	b138      	cbz	r0, 80040ac <_svfiprintf_r+0x150>
 800409c:	9b04      	ldr	r3, [sp, #16]
 800409e:	eba0 000a 	sub.w	r0, r0, sl
 80040a2:	2240      	movs	r2, #64	@ 0x40
 80040a4:	4082      	lsls	r2, r0
 80040a6:	4313      	orrs	r3, r2
 80040a8:	3401      	adds	r4, #1
 80040aa:	9304      	str	r3, [sp, #16]
 80040ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040b0:	4824      	ldr	r0, [pc, #144]	@ (8004144 <_svfiprintf_r+0x1e8>)
 80040b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80040b6:	2206      	movs	r2, #6
 80040b8:	f7fc f892 	bl	80001e0 <memchr>
 80040bc:	2800      	cmp	r0, #0
 80040be:	d036      	beq.n	800412e <_svfiprintf_r+0x1d2>
 80040c0:	4b21      	ldr	r3, [pc, #132]	@ (8004148 <_svfiprintf_r+0x1ec>)
 80040c2:	bb1b      	cbnz	r3, 800410c <_svfiprintf_r+0x1b0>
 80040c4:	9b03      	ldr	r3, [sp, #12]
 80040c6:	3307      	adds	r3, #7
 80040c8:	f023 0307 	bic.w	r3, r3, #7
 80040cc:	3308      	adds	r3, #8
 80040ce:	9303      	str	r3, [sp, #12]
 80040d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040d2:	4433      	add	r3, r6
 80040d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80040d6:	e76a      	b.n	8003fae <_svfiprintf_r+0x52>
 80040d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80040dc:	460c      	mov	r4, r1
 80040de:	2001      	movs	r0, #1
 80040e0:	e7a8      	b.n	8004034 <_svfiprintf_r+0xd8>
 80040e2:	2300      	movs	r3, #0
 80040e4:	3401      	adds	r4, #1
 80040e6:	9305      	str	r3, [sp, #20]
 80040e8:	4619      	mov	r1, r3
 80040ea:	f04f 0c0a 	mov.w	ip, #10
 80040ee:	4620      	mov	r0, r4
 80040f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040f4:	3a30      	subs	r2, #48	@ 0x30
 80040f6:	2a09      	cmp	r2, #9
 80040f8:	d903      	bls.n	8004102 <_svfiprintf_r+0x1a6>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0c6      	beq.n	800408c <_svfiprintf_r+0x130>
 80040fe:	9105      	str	r1, [sp, #20]
 8004100:	e7c4      	b.n	800408c <_svfiprintf_r+0x130>
 8004102:	fb0c 2101 	mla	r1, ip, r1, r2
 8004106:	4604      	mov	r4, r0
 8004108:	2301      	movs	r3, #1
 800410a:	e7f0      	b.n	80040ee <_svfiprintf_r+0x192>
 800410c:	ab03      	add	r3, sp, #12
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	462a      	mov	r2, r5
 8004112:	4b0e      	ldr	r3, [pc, #56]	@ (800414c <_svfiprintf_r+0x1f0>)
 8004114:	a904      	add	r1, sp, #16
 8004116:	4638      	mov	r0, r7
 8004118:	f3af 8000 	nop.w
 800411c:	1c42      	adds	r2, r0, #1
 800411e:	4606      	mov	r6, r0
 8004120:	d1d6      	bne.n	80040d0 <_svfiprintf_r+0x174>
 8004122:	89ab      	ldrh	r3, [r5, #12]
 8004124:	065b      	lsls	r3, r3, #25
 8004126:	f53f af2d 	bmi.w	8003f84 <_svfiprintf_r+0x28>
 800412a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800412c:	e72c      	b.n	8003f88 <_svfiprintf_r+0x2c>
 800412e:	ab03      	add	r3, sp, #12
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	462a      	mov	r2, r5
 8004134:	4b05      	ldr	r3, [pc, #20]	@ (800414c <_svfiprintf_r+0x1f0>)
 8004136:	a904      	add	r1, sp, #16
 8004138:	4638      	mov	r0, r7
 800413a:	f000 f9bb 	bl	80044b4 <_printf_i>
 800413e:	e7ed      	b.n	800411c <_svfiprintf_r+0x1c0>
 8004140:	08004b30 	.word	0x08004b30
 8004144:	08004b3a 	.word	0x08004b3a
 8004148:	00000000 	.word	0x00000000
 800414c:	08003ea5 	.word	0x08003ea5
 8004150:	08004b36 	.word	0x08004b36

08004154 <__sfputc_r>:
 8004154:	6893      	ldr	r3, [r2, #8]
 8004156:	3b01      	subs	r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	b410      	push	{r4}
 800415c:	6093      	str	r3, [r2, #8]
 800415e:	da08      	bge.n	8004172 <__sfputc_r+0x1e>
 8004160:	6994      	ldr	r4, [r2, #24]
 8004162:	42a3      	cmp	r3, r4
 8004164:	db01      	blt.n	800416a <__sfputc_r+0x16>
 8004166:	290a      	cmp	r1, #10
 8004168:	d103      	bne.n	8004172 <__sfputc_r+0x1e>
 800416a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800416e:	f7ff bd20 	b.w	8003bb2 <__swbuf_r>
 8004172:	6813      	ldr	r3, [r2, #0]
 8004174:	1c58      	adds	r0, r3, #1
 8004176:	6010      	str	r0, [r2, #0]
 8004178:	7019      	strb	r1, [r3, #0]
 800417a:	4608      	mov	r0, r1
 800417c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004180:	4770      	bx	lr

08004182 <__sfputs_r>:
 8004182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004184:	4606      	mov	r6, r0
 8004186:	460f      	mov	r7, r1
 8004188:	4614      	mov	r4, r2
 800418a:	18d5      	adds	r5, r2, r3
 800418c:	42ac      	cmp	r4, r5
 800418e:	d101      	bne.n	8004194 <__sfputs_r+0x12>
 8004190:	2000      	movs	r0, #0
 8004192:	e007      	b.n	80041a4 <__sfputs_r+0x22>
 8004194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004198:	463a      	mov	r2, r7
 800419a:	4630      	mov	r0, r6
 800419c:	f7ff ffda 	bl	8004154 <__sfputc_r>
 80041a0:	1c43      	adds	r3, r0, #1
 80041a2:	d1f3      	bne.n	800418c <__sfputs_r+0xa>
 80041a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080041a8 <_vfiprintf_r>:
 80041a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ac:	460d      	mov	r5, r1
 80041ae:	b09d      	sub	sp, #116	@ 0x74
 80041b0:	4614      	mov	r4, r2
 80041b2:	4698      	mov	r8, r3
 80041b4:	4606      	mov	r6, r0
 80041b6:	b118      	cbz	r0, 80041c0 <_vfiprintf_r+0x18>
 80041b8:	6a03      	ldr	r3, [r0, #32]
 80041ba:	b90b      	cbnz	r3, 80041c0 <_vfiprintf_r+0x18>
 80041bc:	f7ff fbf0 	bl	80039a0 <__sinit>
 80041c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041c2:	07d9      	lsls	r1, r3, #31
 80041c4:	d405      	bmi.n	80041d2 <_vfiprintf_r+0x2a>
 80041c6:	89ab      	ldrh	r3, [r5, #12]
 80041c8:	059a      	lsls	r2, r3, #22
 80041ca:	d402      	bmi.n	80041d2 <_vfiprintf_r+0x2a>
 80041cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041ce:	f7ff fe0e 	bl	8003dee <__retarget_lock_acquire_recursive>
 80041d2:	89ab      	ldrh	r3, [r5, #12]
 80041d4:	071b      	lsls	r3, r3, #28
 80041d6:	d501      	bpl.n	80041dc <_vfiprintf_r+0x34>
 80041d8:	692b      	ldr	r3, [r5, #16]
 80041da:	b99b      	cbnz	r3, 8004204 <_vfiprintf_r+0x5c>
 80041dc:	4629      	mov	r1, r5
 80041de:	4630      	mov	r0, r6
 80041e0:	f7ff fd26 	bl	8003c30 <__swsetup_r>
 80041e4:	b170      	cbz	r0, 8004204 <_vfiprintf_r+0x5c>
 80041e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041e8:	07dc      	lsls	r4, r3, #31
 80041ea:	d504      	bpl.n	80041f6 <_vfiprintf_r+0x4e>
 80041ec:	f04f 30ff 	mov.w	r0, #4294967295
 80041f0:	b01d      	add	sp, #116	@ 0x74
 80041f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f6:	89ab      	ldrh	r3, [r5, #12]
 80041f8:	0598      	lsls	r0, r3, #22
 80041fa:	d4f7      	bmi.n	80041ec <_vfiprintf_r+0x44>
 80041fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041fe:	f7ff fdf7 	bl	8003df0 <__retarget_lock_release_recursive>
 8004202:	e7f3      	b.n	80041ec <_vfiprintf_r+0x44>
 8004204:	2300      	movs	r3, #0
 8004206:	9309      	str	r3, [sp, #36]	@ 0x24
 8004208:	2320      	movs	r3, #32
 800420a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800420e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004212:	2330      	movs	r3, #48	@ 0x30
 8004214:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80043c4 <_vfiprintf_r+0x21c>
 8004218:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800421c:	f04f 0901 	mov.w	r9, #1
 8004220:	4623      	mov	r3, r4
 8004222:	469a      	mov	sl, r3
 8004224:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004228:	b10a      	cbz	r2, 800422e <_vfiprintf_r+0x86>
 800422a:	2a25      	cmp	r2, #37	@ 0x25
 800422c:	d1f9      	bne.n	8004222 <_vfiprintf_r+0x7a>
 800422e:	ebba 0b04 	subs.w	fp, sl, r4
 8004232:	d00b      	beq.n	800424c <_vfiprintf_r+0xa4>
 8004234:	465b      	mov	r3, fp
 8004236:	4622      	mov	r2, r4
 8004238:	4629      	mov	r1, r5
 800423a:	4630      	mov	r0, r6
 800423c:	f7ff ffa1 	bl	8004182 <__sfputs_r>
 8004240:	3001      	adds	r0, #1
 8004242:	f000 80a7 	beq.w	8004394 <_vfiprintf_r+0x1ec>
 8004246:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004248:	445a      	add	r2, fp
 800424a:	9209      	str	r2, [sp, #36]	@ 0x24
 800424c:	f89a 3000 	ldrb.w	r3, [sl]
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 809f 	beq.w	8004394 <_vfiprintf_r+0x1ec>
 8004256:	2300      	movs	r3, #0
 8004258:	f04f 32ff 	mov.w	r2, #4294967295
 800425c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004260:	f10a 0a01 	add.w	sl, sl, #1
 8004264:	9304      	str	r3, [sp, #16]
 8004266:	9307      	str	r3, [sp, #28]
 8004268:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800426c:	931a      	str	r3, [sp, #104]	@ 0x68
 800426e:	4654      	mov	r4, sl
 8004270:	2205      	movs	r2, #5
 8004272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004276:	4853      	ldr	r0, [pc, #332]	@ (80043c4 <_vfiprintf_r+0x21c>)
 8004278:	f7fb ffb2 	bl	80001e0 <memchr>
 800427c:	9a04      	ldr	r2, [sp, #16]
 800427e:	b9d8      	cbnz	r0, 80042b8 <_vfiprintf_r+0x110>
 8004280:	06d1      	lsls	r1, r2, #27
 8004282:	bf44      	itt	mi
 8004284:	2320      	movmi	r3, #32
 8004286:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800428a:	0713      	lsls	r3, r2, #28
 800428c:	bf44      	itt	mi
 800428e:	232b      	movmi	r3, #43	@ 0x2b
 8004290:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004294:	f89a 3000 	ldrb.w	r3, [sl]
 8004298:	2b2a      	cmp	r3, #42	@ 0x2a
 800429a:	d015      	beq.n	80042c8 <_vfiprintf_r+0x120>
 800429c:	9a07      	ldr	r2, [sp, #28]
 800429e:	4654      	mov	r4, sl
 80042a0:	2000      	movs	r0, #0
 80042a2:	f04f 0c0a 	mov.w	ip, #10
 80042a6:	4621      	mov	r1, r4
 80042a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042ac:	3b30      	subs	r3, #48	@ 0x30
 80042ae:	2b09      	cmp	r3, #9
 80042b0:	d94b      	bls.n	800434a <_vfiprintf_r+0x1a2>
 80042b2:	b1b0      	cbz	r0, 80042e2 <_vfiprintf_r+0x13a>
 80042b4:	9207      	str	r2, [sp, #28]
 80042b6:	e014      	b.n	80042e2 <_vfiprintf_r+0x13a>
 80042b8:	eba0 0308 	sub.w	r3, r0, r8
 80042bc:	fa09 f303 	lsl.w	r3, r9, r3
 80042c0:	4313      	orrs	r3, r2
 80042c2:	9304      	str	r3, [sp, #16]
 80042c4:	46a2      	mov	sl, r4
 80042c6:	e7d2      	b.n	800426e <_vfiprintf_r+0xc6>
 80042c8:	9b03      	ldr	r3, [sp, #12]
 80042ca:	1d19      	adds	r1, r3, #4
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	9103      	str	r1, [sp, #12]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bfbb      	ittet	lt
 80042d4:	425b      	neglt	r3, r3
 80042d6:	f042 0202 	orrlt.w	r2, r2, #2
 80042da:	9307      	strge	r3, [sp, #28]
 80042dc:	9307      	strlt	r3, [sp, #28]
 80042de:	bfb8      	it	lt
 80042e0:	9204      	strlt	r2, [sp, #16]
 80042e2:	7823      	ldrb	r3, [r4, #0]
 80042e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80042e6:	d10a      	bne.n	80042fe <_vfiprintf_r+0x156>
 80042e8:	7863      	ldrb	r3, [r4, #1]
 80042ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80042ec:	d132      	bne.n	8004354 <_vfiprintf_r+0x1ac>
 80042ee:	9b03      	ldr	r3, [sp, #12]
 80042f0:	1d1a      	adds	r2, r3, #4
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	9203      	str	r2, [sp, #12]
 80042f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80042fa:	3402      	adds	r4, #2
 80042fc:	9305      	str	r3, [sp, #20]
 80042fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80043d4 <_vfiprintf_r+0x22c>
 8004302:	7821      	ldrb	r1, [r4, #0]
 8004304:	2203      	movs	r2, #3
 8004306:	4650      	mov	r0, sl
 8004308:	f7fb ff6a 	bl	80001e0 <memchr>
 800430c:	b138      	cbz	r0, 800431e <_vfiprintf_r+0x176>
 800430e:	9b04      	ldr	r3, [sp, #16]
 8004310:	eba0 000a 	sub.w	r0, r0, sl
 8004314:	2240      	movs	r2, #64	@ 0x40
 8004316:	4082      	lsls	r2, r0
 8004318:	4313      	orrs	r3, r2
 800431a:	3401      	adds	r4, #1
 800431c:	9304      	str	r3, [sp, #16]
 800431e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004322:	4829      	ldr	r0, [pc, #164]	@ (80043c8 <_vfiprintf_r+0x220>)
 8004324:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004328:	2206      	movs	r2, #6
 800432a:	f7fb ff59 	bl	80001e0 <memchr>
 800432e:	2800      	cmp	r0, #0
 8004330:	d03f      	beq.n	80043b2 <_vfiprintf_r+0x20a>
 8004332:	4b26      	ldr	r3, [pc, #152]	@ (80043cc <_vfiprintf_r+0x224>)
 8004334:	bb1b      	cbnz	r3, 800437e <_vfiprintf_r+0x1d6>
 8004336:	9b03      	ldr	r3, [sp, #12]
 8004338:	3307      	adds	r3, #7
 800433a:	f023 0307 	bic.w	r3, r3, #7
 800433e:	3308      	adds	r3, #8
 8004340:	9303      	str	r3, [sp, #12]
 8004342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004344:	443b      	add	r3, r7
 8004346:	9309      	str	r3, [sp, #36]	@ 0x24
 8004348:	e76a      	b.n	8004220 <_vfiprintf_r+0x78>
 800434a:	fb0c 3202 	mla	r2, ip, r2, r3
 800434e:	460c      	mov	r4, r1
 8004350:	2001      	movs	r0, #1
 8004352:	e7a8      	b.n	80042a6 <_vfiprintf_r+0xfe>
 8004354:	2300      	movs	r3, #0
 8004356:	3401      	adds	r4, #1
 8004358:	9305      	str	r3, [sp, #20]
 800435a:	4619      	mov	r1, r3
 800435c:	f04f 0c0a 	mov.w	ip, #10
 8004360:	4620      	mov	r0, r4
 8004362:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004366:	3a30      	subs	r2, #48	@ 0x30
 8004368:	2a09      	cmp	r2, #9
 800436a:	d903      	bls.n	8004374 <_vfiprintf_r+0x1cc>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0c6      	beq.n	80042fe <_vfiprintf_r+0x156>
 8004370:	9105      	str	r1, [sp, #20]
 8004372:	e7c4      	b.n	80042fe <_vfiprintf_r+0x156>
 8004374:	fb0c 2101 	mla	r1, ip, r1, r2
 8004378:	4604      	mov	r4, r0
 800437a:	2301      	movs	r3, #1
 800437c:	e7f0      	b.n	8004360 <_vfiprintf_r+0x1b8>
 800437e:	ab03      	add	r3, sp, #12
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	462a      	mov	r2, r5
 8004384:	4b12      	ldr	r3, [pc, #72]	@ (80043d0 <_vfiprintf_r+0x228>)
 8004386:	a904      	add	r1, sp, #16
 8004388:	4630      	mov	r0, r6
 800438a:	f3af 8000 	nop.w
 800438e:	4607      	mov	r7, r0
 8004390:	1c78      	adds	r0, r7, #1
 8004392:	d1d6      	bne.n	8004342 <_vfiprintf_r+0x19a>
 8004394:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004396:	07d9      	lsls	r1, r3, #31
 8004398:	d405      	bmi.n	80043a6 <_vfiprintf_r+0x1fe>
 800439a:	89ab      	ldrh	r3, [r5, #12]
 800439c:	059a      	lsls	r2, r3, #22
 800439e:	d402      	bmi.n	80043a6 <_vfiprintf_r+0x1fe>
 80043a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043a2:	f7ff fd25 	bl	8003df0 <__retarget_lock_release_recursive>
 80043a6:	89ab      	ldrh	r3, [r5, #12]
 80043a8:	065b      	lsls	r3, r3, #25
 80043aa:	f53f af1f 	bmi.w	80041ec <_vfiprintf_r+0x44>
 80043ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80043b0:	e71e      	b.n	80041f0 <_vfiprintf_r+0x48>
 80043b2:	ab03      	add	r3, sp, #12
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	462a      	mov	r2, r5
 80043b8:	4b05      	ldr	r3, [pc, #20]	@ (80043d0 <_vfiprintf_r+0x228>)
 80043ba:	a904      	add	r1, sp, #16
 80043bc:	4630      	mov	r0, r6
 80043be:	f000 f879 	bl	80044b4 <_printf_i>
 80043c2:	e7e4      	b.n	800438e <_vfiprintf_r+0x1e6>
 80043c4:	08004b30 	.word	0x08004b30
 80043c8:	08004b3a 	.word	0x08004b3a
 80043cc:	00000000 	.word	0x00000000
 80043d0:	08004183 	.word	0x08004183
 80043d4:	08004b36 	.word	0x08004b36

080043d8 <_printf_common>:
 80043d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043dc:	4616      	mov	r6, r2
 80043de:	4698      	mov	r8, r3
 80043e0:	688a      	ldr	r2, [r1, #8]
 80043e2:	690b      	ldr	r3, [r1, #16]
 80043e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043e8:	4293      	cmp	r3, r2
 80043ea:	bfb8      	it	lt
 80043ec:	4613      	movlt	r3, r2
 80043ee:	6033      	str	r3, [r6, #0]
 80043f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043f4:	4607      	mov	r7, r0
 80043f6:	460c      	mov	r4, r1
 80043f8:	b10a      	cbz	r2, 80043fe <_printf_common+0x26>
 80043fa:	3301      	adds	r3, #1
 80043fc:	6033      	str	r3, [r6, #0]
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	0699      	lsls	r1, r3, #26
 8004402:	bf42      	ittt	mi
 8004404:	6833      	ldrmi	r3, [r6, #0]
 8004406:	3302      	addmi	r3, #2
 8004408:	6033      	strmi	r3, [r6, #0]
 800440a:	6825      	ldr	r5, [r4, #0]
 800440c:	f015 0506 	ands.w	r5, r5, #6
 8004410:	d106      	bne.n	8004420 <_printf_common+0x48>
 8004412:	f104 0a19 	add.w	sl, r4, #25
 8004416:	68e3      	ldr	r3, [r4, #12]
 8004418:	6832      	ldr	r2, [r6, #0]
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	42ab      	cmp	r3, r5
 800441e:	dc26      	bgt.n	800446e <_printf_common+0x96>
 8004420:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004424:	6822      	ldr	r2, [r4, #0]
 8004426:	3b00      	subs	r3, #0
 8004428:	bf18      	it	ne
 800442a:	2301      	movne	r3, #1
 800442c:	0692      	lsls	r2, r2, #26
 800442e:	d42b      	bmi.n	8004488 <_printf_common+0xb0>
 8004430:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004434:	4641      	mov	r1, r8
 8004436:	4638      	mov	r0, r7
 8004438:	47c8      	blx	r9
 800443a:	3001      	adds	r0, #1
 800443c:	d01e      	beq.n	800447c <_printf_common+0xa4>
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	6922      	ldr	r2, [r4, #16]
 8004442:	f003 0306 	and.w	r3, r3, #6
 8004446:	2b04      	cmp	r3, #4
 8004448:	bf02      	ittt	eq
 800444a:	68e5      	ldreq	r5, [r4, #12]
 800444c:	6833      	ldreq	r3, [r6, #0]
 800444e:	1aed      	subeq	r5, r5, r3
 8004450:	68a3      	ldr	r3, [r4, #8]
 8004452:	bf0c      	ite	eq
 8004454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004458:	2500      	movne	r5, #0
 800445a:	4293      	cmp	r3, r2
 800445c:	bfc4      	itt	gt
 800445e:	1a9b      	subgt	r3, r3, r2
 8004460:	18ed      	addgt	r5, r5, r3
 8004462:	2600      	movs	r6, #0
 8004464:	341a      	adds	r4, #26
 8004466:	42b5      	cmp	r5, r6
 8004468:	d11a      	bne.n	80044a0 <_printf_common+0xc8>
 800446a:	2000      	movs	r0, #0
 800446c:	e008      	b.n	8004480 <_printf_common+0xa8>
 800446e:	2301      	movs	r3, #1
 8004470:	4652      	mov	r2, sl
 8004472:	4641      	mov	r1, r8
 8004474:	4638      	mov	r0, r7
 8004476:	47c8      	blx	r9
 8004478:	3001      	adds	r0, #1
 800447a:	d103      	bne.n	8004484 <_printf_common+0xac>
 800447c:	f04f 30ff 	mov.w	r0, #4294967295
 8004480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004484:	3501      	adds	r5, #1
 8004486:	e7c6      	b.n	8004416 <_printf_common+0x3e>
 8004488:	18e1      	adds	r1, r4, r3
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	2030      	movs	r0, #48	@ 0x30
 800448e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004492:	4422      	add	r2, r4
 8004494:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004498:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800449c:	3302      	adds	r3, #2
 800449e:	e7c7      	b.n	8004430 <_printf_common+0x58>
 80044a0:	2301      	movs	r3, #1
 80044a2:	4622      	mov	r2, r4
 80044a4:	4641      	mov	r1, r8
 80044a6:	4638      	mov	r0, r7
 80044a8:	47c8      	blx	r9
 80044aa:	3001      	adds	r0, #1
 80044ac:	d0e6      	beq.n	800447c <_printf_common+0xa4>
 80044ae:	3601      	adds	r6, #1
 80044b0:	e7d9      	b.n	8004466 <_printf_common+0x8e>
	...

080044b4 <_printf_i>:
 80044b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044b8:	7e0f      	ldrb	r7, [r1, #24]
 80044ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80044bc:	2f78      	cmp	r7, #120	@ 0x78
 80044be:	4691      	mov	r9, r2
 80044c0:	4680      	mov	r8, r0
 80044c2:	460c      	mov	r4, r1
 80044c4:	469a      	mov	sl, r3
 80044c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80044ca:	d807      	bhi.n	80044dc <_printf_i+0x28>
 80044cc:	2f62      	cmp	r7, #98	@ 0x62
 80044ce:	d80a      	bhi.n	80044e6 <_printf_i+0x32>
 80044d0:	2f00      	cmp	r7, #0
 80044d2:	f000 80d2 	beq.w	800467a <_printf_i+0x1c6>
 80044d6:	2f58      	cmp	r7, #88	@ 0x58
 80044d8:	f000 80b9 	beq.w	800464e <_printf_i+0x19a>
 80044dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044e4:	e03a      	b.n	800455c <_printf_i+0xa8>
 80044e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044ea:	2b15      	cmp	r3, #21
 80044ec:	d8f6      	bhi.n	80044dc <_printf_i+0x28>
 80044ee:	a101      	add	r1, pc, #4	@ (adr r1, 80044f4 <_printf_i+0x40>)
 80044f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044f4:	0800454d 	.word	0x0800454d
 80044f8:	08004561 	.word	0x08004561
 80044fc:	080044dd 	.word	0x080044dd
 8004500:	080044dd 	.word	0x080044dd
 8004504:	080044dd 	.word	0x080044dd
 8004508:	080044dd 	.word	0x080044dd
 800450c:	08004561 	.word	0x08004561
 8004510:	080044dd 	.word	0x080044dd
 8004514:	080044dd 	.word	0x080044dd
 8004518:	080044dd 	.word	0x080044dd
 800451c:	080044dd 	.word	0x080044dd
 8004520:	08004661 	.word	0x08004661
 8004524:	0800458b 	.word	0x0800458b
 8004528:	0800461b 	.word	0x0800461b
 800452c:	080044dd 	.word	0x080044dd
 8004530:	080044dd 	.word	0x080044dd
 8004534:	08004683 	.word	0x08004683
 8004538:	080044dd 	.word	0x080044dd
 800453c:	0800458b 	.word	0x0800458b
 8004540:	080044dd 	.word	0x080044dd
 8004544:	080044dd 	.word	0x080044dd
 8004548:	08004623 	.word	0x08004623
 800454c:	6833      	ldr	r3, [r6, #0]
 800454e:	1d1a      	adds	r2, r3, #4
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6032      	str	r2, [r6, #0]
 8004554:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004558:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800455c:	2301      	movs	r3, #1
 800455e:	e09d      	b.n	800469c <_printf_i+0x1e8>
 8004560:	6833      	ldr	r3, [r6, #0]
 8004562:	6820      	ldr	r0, [r4, #0]
 8004564:	1d19      	adds	r1, r3, #4
 8004566:	6031      	str	r1, [r6, #0]
 8004568:	0606      	lsls	r6, r0, #24
 800456a:	d501      	bpl.n	8004570 <_printf_i+0xbc>
 800456c:	681d      	ldr	r5, [r3, #0]
 800456e:	e003      	b.n	8004578 <_printf_i+0xc4>
 8004570:	0645      	lsls	r5, r0, #25
 8004572:	d5fb      	bpl.n	800456c <_printf_i+0xb8>
 8004574:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004578:	2d00      	cmp	r5, #0
 800457a:	da03      	bge.n	8004584 <_printf_i+0xd0>
 800457c:	232d      	movs	r3, #45	@ 0x2d
 800457e:	426d      	negs	r5, r5
 8004580:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004584:	4859      	ldr	r0, [pc, #356]	@ (80046ec <_printf_i+0x238>)
 8004586:	230a      	movs	r3, #10
 8004588:	e011      	b.n	80045ae <_printf_i+0xfa>
 800458a:	6821      	ldr	r1, [r4, #0]
 800458c:	6833      	ldr	r3, [r6, #0]
 800458e:	0608      	lsls	r0, r1, #24
 8004590:	f853 5b04 	ldr.w	r5, [r3], #4
 8004594:	d402      	bmi.n	800459c <_printf_i+0xe8>
 8004596:	0649      	lsls	r1, r1, #25
 8004598:	bf48      	it	mi
 800459a:	b2ad      	uxthmi	r5, r5
 800459c:	2f6f      	cmp	r7, #111	@ 0x6f
 800459e:	4853      	ldr	r0, [pc, #332]	@ (80046ec <_printf_i+0x238>)
 80045a0:	6033      	str	r3, [r6, #0]
 80045a2:	bf14      	ite	ne
 80045a4:	230a      	movne	r3, #10
 80045a6:	2308      	moveq	r3, #8
 80045a8:	2100      	movs	r1, #0
 80045aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80045ae:	6866      	ldr	r6, [r4, #4]
 80045b0:	60a6      	str	r6, [r4, #8]
 80045b2:	2e00      	cmp	r6, #0
 80045b4:	bfa2      	ittt	ge
 80045b6:	6821      	ldrge	r1, [r4, #0]
 80045b8:	f021 0104 	bicge.w	r1, r1, #4
 80045bc:	6021      	strge	r1, [r4, #0]
 80045be:	b90d      	cbnz	r5, 80045c4 <_printf_i+0x110>
 80045c0:	2e00      	cmp	r6, #0
 80045c2:	d04b      	beq.n	800465c <_printf_i+0x1a8>
 80045c4:	4616      	mov	r6, r2
 80045c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80045ca:	fb03 5711 	mls	r7, r3, r1, r5
 80045ce:	5dc7      	ldrb	r7, [r0, r7]
 80045d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045d4:	462f      	mov	r7, r5
 80045d6:	42bb      	cmp	r3, r7
 80045d8:	460d      	mov	r5, r1
 80045da:	d9f4      	bls.n	80045c6 <_printf_i+0x112>
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d10b      	bne.n	80045f8 <_printf_i+0x144>
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	07df      	lsls	r7, r3, #31
 80045e4:	d508      	bpl.n	80045f8 <_printf_i+0x144>
 80045e6:	6923      	ldr	r3, [r4, #16]
 80045e8:	6861      	ldr	r1, [r4, #4]
 80045ea:	4299      	cmp	r1, r3
 80045ec:	bfde      	ittt	le
 80045ee:	2330      	movle	r3, #48	@ 0x30
 80045f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045f8:	1b92      	subs	r2, r2, r6
 80045fa:	6122      	str	r2, [r4, #16]
 80045fc:	f8cd a000 	str.w	sl, [sp]
 8004600:	464b      	mov	r3, r9
 8004602:	aa03      	add	r2, sp, #12
 8004604:	4621      	mov	r1, r4
 8004606:	4640      	mov	r0, r8
 8004608:	f7ff fee6 	bl	80043d8 <_printf_common>
 800460c:	3001      	adds	r0, #1
 800460e:	d14a      	bne.n	80046a6 <_printf_i+0x1f2>
 8004610:	f04f 30ff 	mov.w	r0, #4294967295
 8004614:	b004      	add	sp, #16
 8004616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	f043 0320 	orr.w	r3, r3, #32
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	4833      	ldr	r0, [pc, #204]	@ (80046f0 <_printf_i+0x23c>)
 8004624:	2778      	movs	r7, #120	@ 0x78
 8004626:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	6831      	ldr	r1, [r6, #0]
 800462e:	061f      	lsls	r7, r3, #24
 8004630:	f851 5b04 	ldr.w	r5, [r1], #4
 8004634:	d402      	bmi.n	800463c <_printf_i+0x188>
 8004636:	065f      	lsls	r7, r3, #25
 8004638:	bf48      	it	mi
 800463a:	b2ad      	uxthmi	r5, r5
 800463c:	6031      	str	r1, [r6, #0]
 800463e:	07d9      	lsls	r1, r3, #31
 8004640:	bf44      	itt	mi
 8004642:	f043 0320 	orrmi.w	r3, r3, #32
 8004646:	6023      	strmi	r3, [r4, #0]
 8004648:	b11d      	cbz	r5, 8004652 <_printf_i+0x19e>
 800464a:	2310      	movs	r3, #16
 800464c:	e7ac      	b.n	80045a8 <_printf_i+0xf4>
 800464e:	4827      	ldr	r0, [pc, #156]	@ (80046ec <_printf_i+0x238>)
 8004650:	e7e9      	b.n	8004626 <_printf_i+0x172>
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	f023 0320 	bic.w	r3, r3, #32
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	e7f6      	b.n	800464a <_printf_i+0x196>
 800465c:	4616      	mov	r6, r2
 800465e:	e7bd      	b.n	80045dc <_printf_i+0x128>
 8004660:	6833      	ldr	r3, [r6, #0]
 8004662:	6825      	ldr	r5, [r4, #0]
 8004664:	6961      	ldr	r1, [r4, #20]
 8004666:	1d18      	adds	r0, r3, #4
 8004668:	6030      	str	r0, [r6, #0]
 800466a:	062e      	lsls	r6, r5, #24
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	d501      	bpl.n	8004674 <_printf_i+0x1c0>
 8004670:	6019      	str	r1, [r3, #0]
 8004672:	e002      	b.n	800467a <_printf_i+0x1c6>
 8004674:	0668      	lsls	r0, r5, #25
 8004676:	d5fb      	bpl.n	8004670 <_printf_i+0x1bc>
 8004678:	8019      	strh	r1, [r3, #0]
 800467a:	2300      	movs	r3, #0
 800467c:	6123      	str	r3, [r4, #16]
 800467e:	4616      	mov	r6, r2
 8004680:	e7bc      	b.n	80045fc <_printf_i+0x148>
 8004682:	6833      	ldr	r3, [r6, #0]
 8004684:	1d1a      	adds	r2, r3, #4
 8004686:	6032      	str	r2, [r6, #0]
 8004688:	681e      	ldr	r6, [r3, #0]
 800468a:	6862      	ldr	r2, [r4, #4]
 800468c:	2100      	movs	r1, #0
 800468e:	4630      	mov	r0, r6
 8004690:	f7fb fda6 	bl	80001e0 <memchr>
 8004694:	b108      	cbz	r0, 800469a <_printf_i+0x1e6>
 8004696:	1b80      	subs	r0, r0, r6
 8004698:	6060      	str	r0, [r4, #4]
 800469a:	6863      	ldr	r3, [r4, #4]
 800469c:	6123      	str	r3, [r4, #16]
 800469e:	2300      	movs	r3, #0
 80046a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046a4:	e7aa      	b.n	80045fc <_printf_i+0x148>
 80046a6:	6923      	ldr	r3, [r4, #16]
 80046a8:	4632      	mov	r2, r6
 80046aa:	4649      	mov	r1, r9
 80046ac:	4640      	mov	r0, r8
 80046ae:	47d0      	blx	sl
 80046b0:	3001      	adds	r0, #1
 80046b2:	d0ad      	beq.n	8004610 <_printf_i+0x15c>
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	079b      	lsls	r3, r3, #30
 80046b8:	d413      	bmi.n	80046e2 <_printf_i+0x22e>
 80046ba:	68e0      	ldr	r0, [r4, #12]
 80046bc:	9b03      	ldr	r3, [sp, #12]
 80046be:	4298      	cmp	r0, r3
 80046c0:	bfb8      	it	lt
 80046c2:	4618      	movlt	r0, r3
 80046c4:	e7a6      	b.n	8004614 <_printf_i+0x160>
 80046c6:	2301      	movs	r3, #1
 80046c8:	4632      	mov	r2, r6
 80046ca:	4649      	mov	r1, r9
 80046cc:	4640      	mov	r0, r8
 80046ce:	47d0      	blx	sl
 80046d0:	3001      	adds	r0, #1
 80046d2:	d09d      	beq.n	8004610 <_printf_i+0x15c>
 80046d4:	3501      	adds	r5, #1
 80046d6:	68e3      	ldr	r3, [r4, #12]
 80046d8:	9903      	ldr	r1, [sp, #12]
 80046da:	1a5b      	subs	r3, r3, r1
 80046dc:	42ab      	cmp	r3, r5
 80046de:	dcf2      	bgt.n	80046c6 <_printf_i+0x212>
 80046e0:	e7eb      	b.n	80046ba <_printf_i+0x206>
 80046e2:	2500      	movs	r5, #0
 80046e4:	f104 0619 	add.w	r6, r4, #25
 80046e8:	e7f5      	b.n	80046d6 <_printf_i+0x222>
 80046ea:	bf00      	nop
 80046ec:	08004b41 	.word	0x08004b41
 80046f0:	08004b52 	.word	0x08004b52

080046f4 <__sflush_r>:
 80046f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046fc:	0716      	lsls	r6, r2, #28
 80046fe:	4605      	mov	r5, r0
 8004700:	460c      	mov	r4, r1
 8004702:	d454      	bmi.n	80047ae <__sflush_r+0xba>
 8004704:	684b      	ldr	r3, [r1, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	dc02      	bgt.n	8004710 <__sflush_r+0x1c>
 800470a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800470c:	2b00      	cmp	r3, #0
 800470e:	dd48      	ble.n	80047a2 <__sflush_r+0xae>
 8004710:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004712:	2e00      	cmp	r6, #0
 8004714:	d045      	beq.n	80047a2 <__sflush_r+0xae>
 8004716:	2300      	movs	r3, #0
 8004718:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800471c:	682f      	ldr	r7, [r5, #0]
 800471e:	6a21      	ldr	r1, [r4, #32]
 8004720:	602b      	str	r3, [r5, #0]
 8004722:	d030      	beq.n	8004786 <__sflush_r+0x92>
 8004724:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004726:	89a3      	ldrh	r3, [r4, #12]
 8004728:	0759      	lsls	r1, r3, #29
 800472a:	d505      	bpl.n	8004738 <__sflush_r+0x44>
 800472c:	6863      	ldr	r3, [r4, #4]
 800472e:	1ad2      	subs	r2, r2, r3
 8004730:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004732:	b10b      	cbz	r3, 8004738 <__sflush_r+0x44>
 8004734:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004736:	1ad2      	subs	r2, r2, r3
 8004738:	2300      	movs	r3, #0
 800473a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800473c:	6a21      	ldr	r1, [r4, #32]
 800473e:	4628      	mov	r0, r5
 8004740:	47b0      	blx	r6
 8004742:	1c43      	adds	r3, r0, #1
 8004744:	89a3      	ldrh	r3, [r4, #12]
 8004746:	d106      	bne.n	8004756 <__sflush_r+0x62>
 8004748:	6829      	ldr	r1, [r5, #0]
 800474a:	291d      	cmp	r1, #29
 800474c:	d82b      	bhi.n	80047a6 <__sflush_r+0xb2>
 800474e:	4a2a      	ldr	r2, [pc, #168]	@ (80047f8 <__sflush_r+0x104>)
 8004750:	410a      	asrs	r2, r1
 8004752:	07d6      	lsls	r6, r2, #31
 8004754:	d427      	bmi.n	80047a6 <__sflush_r+0xb2>
 8004756:	2200      	movs	r2, #0
 8004758:	6062      	str	r2, [r4, #4]
 800475a:	04d9      	lsls	r1, r3, #19
 800475c:	6922      	ldr	r2, [r4, #16]
 800475e:	6022      	str	r2, [r4, #0]
 8004760:	d504      	bpl.n	800476c <__sflush_r+0x78>
 8004762:	1c42      	adds	r2, r0, #1
 8004764:	d101      	bne.n	800476a <__sflush_r+0x76>
 8004766:	682b      	ldr	r3, [r5, #0]
 8004768:	b903      	cbnz	r3, 800476c <__sflush_r+0x78>
 800476a:	6560      	str	r0, [r4, #84]	@ 0x54
 800476c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800476e:	602f      	str	r7, [r5, #0]
 8004770:	b1b9      	cbz	r1, 80047a2 <__sflush_r+0xae>
 8004772:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004776:	4299      	cmp	r1, r3
 8004778:	d002      	beq.n	8004780 <__sflush_r+0x8c>
 800477a:	4628      	mov	r0, r5
 800477c:	f7ff fb48 	bl	8003e10 <_free_r>
 8004780:	2300      	movs	r3, #0
 8004782:	6363      	str	r3, [r4, #52]	@ 0x34
 8004784:	e00d      	b.n	80047a2 <__sflush_r+0xae>
 8004786:	2301      	movs	r3, #1
 8004788:	4628      	mov	r0, r5
 800478a:	47b0      	blx	r6
 800478c:	4602      	mov	r2, r0
 800478e:	1c50      	adds	r0, r2, #1
 8004790:	d1c9      	bne.n	8004726 <__sflush_r+0x32>
 8004792:	682b      	ldr	r3, [r5, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0c6      	beq.n	8004726 <__sflush_r+0x32>
 8004798:	2b1d      	cmp	r3, #29
 800479a:	d001      	beq.n	80047a0 <__sflush_r+0xac>
 800479c:	2b16      	cmp	r3, #22
 800479e:	d11e      	bne.n	80047de <__sflush_r+0xea>
 80047a0:	602f      	str	r7, [r5, #0]
 80047a2:	2000      	movs	r0, #0
 80047a4:	e022      	b.n	80047ec <__sflush_r+0xf8>
 80047a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047aa:	b21b      	sxth	r3, r3
 80047ac:	e01b      	b.n	80047e6 <__sflush_r+0xf2>
 80047ae:	690f      	ldr	r7, [r1, #16]
 80047b0:	2f00      	cmp	r7, #0
 80047b2:	d0f6      	beq.n	80047a2 <__sflush_r+0xae>
 80047b4:	0793      	lsls	r3, r2, #30
 80047b6:	680e      	ldr	r6, [r1, #0]
 80047b8:	bf08      	it	eq
 80047ba:	694b      	ldreq	r3, [r1, #20]
 80047bc:	600f      	str	r7, [r1, #0]
 80047be:	bf18      	it	ne
 80047c0:	2300      	movne	r3, #0
 80047c2:	eba6 0807 	sub.w	r8, r6, r7
 80047c6:	608b      	str	r3, [r1, #8]
 80047c8:	f1b8 0f00 	cmp.w	r8, #0
 80047cc:	dde9      	ble.n	80047a2 <__sflush_r+0xae>
 80047ce:	6a21      	ldr	r1, [r4, #32]
 80047d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80047d2:	4643      	mov	r3, r8
 80047d4:	463a      	mov	r2, r7
 80047d6:	4628      	mov	r0, r5
 80047d8:	47b0      	blx	r6
 80047da:	2800      	cmp	r0, #0
 80047dc:	dc08      	bgt.n	80047f0 <__sflush_r+0xfc>
 80047de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047e6:	81a3      	strh	r3, [r4, #12]
 80047e8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047f0:	4407      	add	r7, r0
 80047f2:	eba8 0800 	sub.w	r8, r8, r0
 80047f6:	e7e7      	b.n	80047c8 <__sflush_r+0xd4>
 80047f8:	dfbffffe 	.word	0xdfbffffe

080047fc <_fflush_r>:
 80047fc:	b538      	push	{r3, r4, r5, lr}
 80047fe:	690b      	ldr	r3, [r1, #16]
 8004800:	4605      	mov	r5, r0
 8004802:	460c      	mov	r4, r1
 8004804:	b913      	cbnz	r3, 800480c <_fflush_r+0x10>
 8004806:	2500      	movs	r5, #0
 8004808:	4628      	mov	r0, r5
 800480a:	bd38      	pop	{r3, r4, r5, pc}
 800480c:	b118      	cbz	r0, 8004816 <_fflush_r+0x1a>
 800480e:	6a03      	ldr	r3, [r0, #32]
 8004810:	b90b      	cbnz	r3, 8004816 <_fflush_r+0x1a>
 8004812:	f7ff f8c5 	bl	80039a0 <__sinit>
 8004816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0f3      	beq.n	8004806 <_fflush_r+0xa>
 800481e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004820:	07d0      	lsls	r0, r2, #31
 8004822:	d404      	bmi.n	800482e <_fflush_r+0x32>
 8004824:	0599      	lsls	r1, r3, #22
 8004826:	d402      	bmi.n	800482e <_fflush_r+0x32>
 8004828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800482a:	f7ff fae0 	bl	8003dee <__retarget_lock_acquire_recursive>
 800482e:	4628      	mov	r0, r5
 8004830:	4621      	mov	r1, r4
 8004832:	f7ff ff5f 	bl	80046f4 <__sflush_r>
 8004836:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004838:	07da      	lsls	r2, r3, #31
 800483a:	4605      	mov	r5, r0
 800483c:	d4e4      	bmi.n	8004808 <_fflush_r+0xc>
 800483e:	89a3      	ldrh	r3, [r4, #12]
 8004840:	059b      	lsls	r3, r3, #22
 8004842:	d4e1      	bmi.n	8004808 <_fflush_r+0xc>
 8004844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004846:	f7ff fad3 	bl	8003df0 <__retarget_lock_release_recursive>
 800484a:	e7dd      	b.n	8004808 <_fflush_r+0xc>

0800484c <__swhatbuf_r>:
 800484c:	b570      	push	{r4, r5, r6, lr}
 800484e:	460c      	mov	r4, r1
 8004850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004854:	2900      	cmp	r1, #0
 8004856:	b096      	sub	sp, #88	@ 0x58
 8004858:	4615      	mov	r5, r2
 800485a:	461e      	mov	r6, r3
 800485c:	da0d      	bge.n	800487a <__swhatbuf_r+0x2e>
 800485e:	89a3      	ldrh	r3, [r4, #12]
 8004860:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004864:	f04f 0100 	mov.w	r1, #0
 8004868:	bf14      	ite	ne
 800486a:	2340      	movne	r3, #64	@ 0x40
 800486c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004870:	2000      	movs	r0, #0
 8004872:	6031      	str	r1, [r6, #0]
 8004874:	602b      	str	r3, [r5, #0]
 8004876:	b016      	add	sp, #88	@ 0x58
 8004878:	bd70      	pop	{r4, r5, r6, pc}
 800487a:	466a      	mov	r2, sp
 800487c:	f000 f862 	bl	8004944 <_fstat_r>
 8004880:	2800      	cmp	r0, #0
 8004882:	dbec      	blt.n	800485e <__swhatbuf_r+0x12>
 8004884:	9901      	ldr	r1, [sp, #4]
 8004886:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800488a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800488e:	4259      	negs	r1, r3
 8004890:	4159      	adcs	r1, r3
 8004892:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004896:	e7eb      	b.n	8004870 <__swhatbuf_r+0x24>

08004898 <__smakebuf_r>:
 8004898:	898b      	ldrh	r3, [r1, #12]
 800489a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800489c:	079d      	lsls	r5, r3, #30
 800489e:	4606      	mov	r6, r0
 80048a0:	460c      	mov	r4, r1
 80048a2:	d507      	bpl.n	80048b4 <__smakebuf_r+0x1c>
 80048a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	6123      	str	r3, [r4, #16]
 80048ac:	2301      	movs	r3, #1
 80048ae:	6163      	str	r3, [r4, #20]
 80048b0:	b003      	add	sp, #12
 80048b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048b4:	ab01      	add	r3, sp, #4
 80048b6:	466a      	mov	r2, sp
 80048b8:	f7ff ffc8 	bl	800484c <__swhatbuf_r>
 80048bc:	9f00      	ldr	r7, [sp, #0]
 80048be:	4605      	mov	r5, r0
 80048c0:	4639      	mov	r1, r7
 80048c2:	4630      	mov	r0, r6
 80048c4:	f7fe ff54 	bl	8003770 <_malloc_r>
 80048c8:	b948      	cbnz	r0, 80048de <__smakebuf_r+0x46>
 80048ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ce:	059a      	lsls	r2, r3, #22
 80048d0:	d4ee      	bmi.n	80048b0 <__smakebuf_r+0x18>
 80048d2:	f023 0303 	bic.w	r3, r3, #3
 80048d6:	f043 0302 	orr.w	r3, r3, #2
 80048da:	81a3      	strh	r3, [r4, #12]
 80048dc:	e7e2      	b.n	80048a4 <__smakebuf_r+0xc>
 80048de:	89a3      	ldrh	r3, [r4, #12]
 80048e0:	6020      	str	r0, [r4, #0]
 80048e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048e6:	81a3      	strh	r3, [r4, #12]
 80048e8:	9b01      	ldr	r3, [sp, #4]
 80048ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80048ee:	b15b      	cbz	r3, 8004908 <__smakebuf_r+0x70>
 80048f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048f4:	4630      	mov	r0, r6
 80048f6:	f000 f837 	bl	8004968 <_isatty_r>
 80048fa:	b128      	cbz	r0, 8004908 <__smakebuf_r+0x70>
 80048fc:	89a3      	ldrh	r3, [r4, #12]
 80048fe:	f023 0303 	bic.w	r3, r3, #3
 8004902:	f043 0301 	orr.w	r3, r3, #1
 8004906:	81a3      	strh	r3, [r4, #12]
 8004908:	89a3      	ldrh	r3, [r4, #12]
 800490a:	431d      	orrs	r5, r3
 800490c:	81a5      	strh	r5, [r4, #12]
 800490e:	e7cf      	b.n	80048b0 <__smakebuf_r+0x18>

08004910 <memmove>:
 8004910:	4288      	cmp	r0, r1
 8004912:	b510      	push	{r4, lr}
 8004914:	eb01 0402 	add.w	r4, r1, r2
 8004918:	d902      	bls.n	8004920 <memmove+0x10>
 800491a:	4284      	cmp	r4, r0
 800491c:	4623      	mov	r3, r4
 800491e:	d807      	bhi.n	8004930 <memmove+0x20>
 8004920:	1e43      	subs	r3, r0, #1
 8004922:	42a1      	cmp	r1, r4
 8004924:	d008      	beq.n	8004938 <memmove+0x28>
 8004926:	f811 2b01 	ldrb.w	r2, [r1], #1
 800492a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800492e:	e7f8      	b.n	8004922 <memmove+0x12>
 8004930:	4402      	add	r2, r0
 8004932:	4601      	mov	r1, r0
 8004934:	428a      	cmp	r2, r1
 8004936:	d100      	bne.n	800493a <memmove+0x2a>
 8004938:	bd10      	pop	{r4, pc}
 800493a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800493e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004942:	e7f7      	b.n	8004934 <memmove+0x24>

08004944 <_fstat_r>:
 8004944:	b538      	push	{r3, r4, r5, lr}
 8004946:	4d07      	ldr	r5, [pc, #28]	@ (8004964 <_fstat_r+0x20>)
 8004948:	2300      	movs	r3, #0
 800494a:	4604      	mov	r4, r0
 800494c:	4608      	mov	r0, r1
 800494e:	4611      	mov	r1, r2
 8004950:	602b      	str	r3, [r5, #0]
 8004952:	f7fc fe39 	bl	80015c8 <_fstat>
 8004956:	1c43      	adds	r3, r0, #1
 8004958:	d102      	bne.n	8004960 <_fstat_r+0x1c>
 800495a:	682b      	ldr	r3, [r5, #0]
 800495c:	b103      	cbz	r3, 8004960 <_fstat_r+0x1c>
 800495e:	6023      	str	r3, [r4, #0]
 8004960:	bd38      	pop	{r3, r4, r5, pc}
 8004962:	bf00      	nop
 8004964:	200004ac 	.word	0x200004ac

08004968 <_isatty_r>:
 8004968:	b538      	push	{r3, r4, r5, lr}
 800496a:	4d06      	ldr	r5, [pc, #24]	@ (8004984 <_isatty_r+0x1c>)
 800496c:	2300      	movs	r3, #0
 800496e:	4604      	mov	r4, r0
 8004970:	4608      	mov	r0, r1
 8004972:	602b      	str	r3, [r5, #0]
 8004974:	f7fc fe38 	bl	80015e8 <_isatty>
 8004978:	1c43      	adds	r3, r0, #1
 800497a:	d102      	bne.n	8004982 <_isatty_r+0x1a>
 800497c:	682b      	ldr	r3, [r5, #0]
 800497e:	b103      	cbz	r3, 8004982 <_isatty_r+0x1a>
 8004980:	6023      	str	r3, [r4, #0]
 8004982:	bd38      	pop	{r3, r4, r5, pc}
 8004984:	200004ac 	.word	0x200004ac

08004988 <_realloc_r>:
 8004988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800498c:	4680      	mov	r8, r0
 800498e:	4615      	mov	r5, r2
 8004990:	460c      	mov	r4, r1
 8004992:	b921      	cbnz	r1, 800499e <_realloc_r+0x16>
 8004994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004998:	4611      	mov	r1, r2
 800499a:	f7fe bee9 	b.w	8003770 <_malloc_r>
 800499e:	b92a      	cbnz	r2, 80049ac <_realloc_r+0x24>
 80049a0:	f7ff fa36 	bl	8003e10 <_free_r>
 80049a4:	2400      	movs	r4, #0
 80049a6:	4620      	mov	r0, r4
 80049a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049ac:	f000 f81a 	bl	80049e4 <_malloc_usable_size_r>
 80049b0:	4285      	cmp	r5, r0
 80049b2:	4606      	mov	r6, r0
 80049b4:	d802      	bhi.n	80049bc <_realloc_r+0x34>
 80049b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80049ba:	d8f4      	bhi.n	80049a6 <_realloc_r+0x1e>
 80049bc:	4629      	mov	r1, r5
 80049be:	4640      	mov	r0, r8
 80049c0:	f7fe fed6 	bl	8003770 <_malloc_r>
 80049c4:	4607      	mov	r7, r0
 80049c6:	2800      	cmp	r0, #0
 80049c8:	d0ec      	beq.n	80049a4 <_realloc_r+0x1c>
 80049ca:	42b5      	cmp	r5, r6
 80049cc:	462a      	mov	r2, r5
 80049ce:	4621      	mov	r1, r4
 80049d0:	bf28      	it	cs
 80049d2:	4632      	movcs	r2, r6
 80049d4:	f7ff fa0d 	bl	8003df2 <memcpy>
 80049d8:	4621      	mov	r1, r4
 80049da:	4640      	mov	r0, r8
 80049dc:	f7ff fa18 	bl	8003e10 <_free_r>
 80049e0:	463c      	mov	r4, r7
 80049e2:	e7e0      	b.n	80049a6 <_realloc_r+0x1e>

080049e4 <_malloc_usable_size_r>:
 80049e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049e8:	1f18      	subs	r0, r3, #4
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	bfbc      	itt	lt
 80049ee:	580b      	ldrlt	r3, [r1, r0]
 80049f0:	18c0      	addlt	r0, r0, r3
 80049f2:	4770      	bx	lr

080049f4 <_init>:
 80049f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f6:	bf00      	nop
 80049f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049fa:	bc08      	pop	{r3}
 80049fc:	469e      	mov	lr, r3
 80049fe:	4770      	bx	lr

08004a00 <_fini>:
 8004a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a02:	bf00      	nop
 8004a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a06:	bc08      	pop	{r3}
 8004a08:	469e      	mov	lr, r3
 8004a0a:	4770      	bx	lr
